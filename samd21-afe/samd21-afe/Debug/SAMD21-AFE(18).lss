
SAMD21-AFE(18).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004908  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00004908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003bc  200000e0  000049e8  000200e0  2**2
                  ALLOC
  3 .stack        00002004  2000049c  00004da4  000200e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004166b  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005c77  00000000  00000000  000617cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017e1f  00000000  00000000  00067443  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001310  00000000  00000000  0007f262  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c68  00000000  00000000  00080572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000203d5  00000000  00000000  000821da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b18b  00000000  00000000  000a25af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009676a  00000000  00000000  000bd73a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003498  00000000  00000000  00153ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 24 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .$. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	8d 16 00 00 ad 14 00 00 29 01 00 00 29 01 00 00     ........)...)...
      5c:	0d 2b 00 00 29 01 00 00 29 01 00 00 29 01 00 00     .+..)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 05 1a 00 00     )...)...).......
      8c:	29 01 00 00 29 01 00 00 00 00 00 00 00 00 00 00     )...)...........
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e0 	.word	0x200000e0
      d4:	00000000 	.word	0x00000000
      d8:	00004908 	.word	0x00004908

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e4 	.word	0x200000e4
     108:	00004908 	.word	0x00004908
     10c:	00004908 	.word	0x00004908
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	00000539 	.word	0x00000539
     124:	00003a11 	.word	0x00003a11

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00004908 	.word	0x00004908
     1dc:	20000000 	.word	0x20000000
     1e0:	200000e0 	.word	0x200000e0
     1e4:	20000004 	.word	0x20000004
     1e8:	200000e0 	.word	0x200000e0
     1ec:	2000049c 	.word	0x2000049c
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00003d5d 	.word	0x00003d5d
     20c:	00002d49 	.word	0x00002d49

00000210 <ADC_0_PORT_init>:
struct usart_sync_descriptor USART_0;

struct pwm_descriptor PWM_0;

void ADC_0_PORT_init(void)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	46ce      	mov	lr, r9
     214:	4647      	mov	r7, r8
     216:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     218:	26c0      	movs	r6, #192	; 0xc0
     21a:	05f6      	lsls	r6, r6, #23
     21c:	2304      	movs	r3, #4
     21e:	6073      	str	r3, [r6, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     220:	4b2c      	ldr	r3, [pc, #176]	; (2d4 <ADC_0_PORT_init+0xc4>)
     222:	4a2d      	ldr	r2, [pc, #180]	; (2d8 <ADC_0_PORT_init+0xc8>)
     224:	629a      	str	r2, [r3, #40]	; 0x28
     226:	25c0      	movs	r5, #192	; 0xc0
     228:	062d      	lsls	r5, r5, #24
     22a:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     22c:	2042      	movs	r0, #66	; 0x42
     22e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     230:	2401      	movs	r4, #1
     232:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     234:	2101      	movs	r1, #1
     236:	430a      	orrs	r2, r1
     238:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23a:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     23c:	2731      	movs	r7, #49	; 0x31
     23e:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     240:	3833      	subs	r0, #51	; 0x33
     242:	4681      	mov	r9, r0
     244:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     246:	430a      	orrs	r2, r1
     248:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     24a:	55da      	strb	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     24c:	2284      	movs	r2, #132	; 0x84
     24e:	4690      	mov	r8, r2
     250:	327c      	adds	r2, #124	; 0x7c
     252:	4647      	mov	r7, r8
     254:	51f2      	str	r2, [r6, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     256:	3a58      	subs	r2, #88	; 0x58
     258:	4694      	mov	ip, r2
     25a:	4a20      	ldr	r2, [pc, #128]	; (2dc <ADC_0_PORT_init+0xcc>)
     25c:	4667      	mov	r7, ip
     25e:	51da      	str	r2, [r3, r7]
     260:	51dd      	str	r5, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     262:	3720      	adds	r7, #32
     264:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     266:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     268:	430a      	orrs	r2, r1
     26a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26c:	55da      	strb	r2, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     26e:	3f14      	subs	r7, #20
     270:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     272:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     274:	430a      	orrs	r2, r1
     276:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     278:	55da      	strb	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     27a:	2280      	movs	r2, #128	; 0x80
     27c:	0092      	lsls	r2, r2, #2
     27e:	4640      	mov	r0, r8
     280:	5032      	str	r2, [r6, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     282:	4a17      	ldr	r2, [pc, #92]	; (2e0 <ADC_0_PORT_init+0xd0>)
     284:	4660      	mov	r0, ip
     286:	501a      	str	r2, [r3, r0]
     288:	4662      	mov	r2, ip
     28a:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     28c:	3221      	adds	r2, #33	; 0x21
     28e:	4694      	mov	ip, r2
     290:	5c9a      	ldrb	r2, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     292:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     294:	430a      	orrs	r2, r1
     296:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     298:	4660      	mov	r0, ip
     29a:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     29c:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     29e:	38ba      	subs	r0, #186	; 0xba
     2a0:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     2a2:	3001      	adds	r0, #1
     2a4:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a6:	55da      	strb	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2a8:	2210      	movs	r2, #16
     2aa:	6072      	str	r2, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <ADC_0_PORT_init+0xd4>)
     2ae:	629a      	str	r2, [r3, #40]	; 0x28
     2b0:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b2:	2544      	movs	r5, #68	; 0x44
     2b4:	5d5a      	ldrb	r2, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b6:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b8:	430a      	orrs	r2, r1
     2ba:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2bc:	555a      	strb	r2, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2be:	3431      	adds	r4, #49	; 0x31
     2c0:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2c2:	4648      	mov	r0, r9
     2c4:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     2c6:	430a      	orrs	r2, r1
     2c8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ca:	551a      	strb	r2, [r3, r4]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA04, PINMUX_PA04B_ADC_AIN4);
}
     2cc:	bc0c      	pop	{r2, r3}
     2ce:	4690      	mov	r8, r2
     2d0:	4699      	mov	r9, r3
     2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2d4:	41004400 	.word	0x41004400
     2d8:	40000004 	.word	0x40000004
     2dc:	40000100 	.word	0x40000100
     2e0:	40000200 	.word	0x40000200
     2e4:	40000010 	.word	0x40000010

000002e8 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2e8:	4a04      	ldr	r2, [pc, #16]	; (2fc <ADC_0_CLOCK_init+0x14>)
     2ea:	6a11      	ldr	r1, [r2, #32]
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	025b      	lsls	r3, r3, #9
     2f0:	430b      	orrs	r3, r1
     2f2:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2f4:	4a02      	ldr	r2, [pc, #8]	; (300 <ADC_0_CLOCK_init+0x18>)
     2f6:	4b03      	ldr	r3, [pc, #12]	; (304 <ADC_0_CLOCK_init+0x1c>)
     2f8:	805a      	strh	r2, [r3, #2]

void ADC_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
}
     2fa:	4770      	bx	lr
     2fc:	40000400 	.word	0x40000400
     300:	0000421e 	.word	0x0000421e
     304:	40000c00 	.word	0x40000c00

00000308 <ADC_0_init>:

void ADC_0_init(void)
{
     308:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     30a:	4b05      	ldr	r3, [pc, #20]	; (320 <ADC_0_init+0x18>)
     30c:	4798      	blx	r3
	ADC_0_PORT_init();
     30e:	4b05      	ldr	r3, [pc, #20]	; (324 <ADC_0_init+0x1c>)
     310:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     312:	2200      	movs	r2, #0
     314:	4904      	ldr	r1, [pc, #16]	; (328 <ADC_0_init+0x20>)
     316:	4805      	ldr	r0, [pc, #20]	; (32c <ADC_0_init+0x24>)
     318:	4b05      	ldr	r3, [pc, #20]	; (330 <ADC_0_init+0x28>)
     31a:	4798      	blx	r3
}
     31c:	bd10      	pop	{r4, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	000002e9 	.word	0x000002e9
     324:	00000211 	.word	0x00000211
     328:	42004000 	.word	0x42004000
     32c:	2000046c 	.word	0x2000046c
     330:	000005e9 	.word	0x000005e9

00000334 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     334:	b510      	push	{r4, lr}
			PM->AHBMASK.reg |= 1 << peripheral;
     336:	4b07      	ldr	r3, [pc, #28]	; (354 <CRC_0_init+0x20>)
     338:	695a      	ldr	r2, [r3, #20]
     33a:	2108      	movs	r1, #8
     33c:	430a      	orrs	r2, r1
     33e:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= 1 << peripheral;
     340:	69da      	ldr	r2, [r3, #28]
     342:	3907      	subs	r1, #7
     344:	430a      	orrs	r2, r1
     346:	61da      	str	r2, [r3, #28]
	_pm_enable_bus_clock(PM_BUS_AHB, DSU);
	_pm_enable_bus_clock(PM_BUS_APBB, PAC1);
	crc_sync_init(&CRC_0, DSU);
     348:	4903      	ldr	r1, [pc, #12]	; (358 <CRC_0_init+0x24>)
     34a:	4804      	ldr	r0, [pc, #16]	; (35c <CRC_0_init+0x28>)
     34c:	4b04      	ldr	r3, [pc, #16]	; (360 <CRC_0_init+0x2c>)
     34e:	4798      	blx	r3
}
     350:	bd10      	pop	{r4, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	40000400 	.word	0x40000400
     358:	41002000 	.word	0x41002000
     35c:	20000468 	.word	0x20000468
     360:	00000725 	.word	0x00000725

00000364 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     364:	b510      	push	{r4, lr}
     366:	4a03      	ldr	r2, [pc, #12]	; (374 <EXTERNAL_IRQ_0_init+0x10>)
     368:	4b03      	ldr	r3, [pc, #12]	; (378 <EXTERNAL_IRQ_0_init+0x14>)
     36a:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(EIC_GCLK_ID, CONF_GCLK_EIC_SRC);

	ext_irq_init();
     36c:	4b03      	ldr	r3, [pc, #12]	; (37c <EXTERNAL_IRQ_0_init+0x18>)
     36e:	4798      	blx	r3
}
     370:	bd10      	pop	{r4, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	00004205 	.word	0x00004205
     378:	40000c00 	.word	0x40000c00
     37c:	000007d1 	.word	0x000007d1

00000380 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     380:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     382:	4b0e      	ldr	r3, [pc, #56]	; (3bc <USART_0_PORT_init+0x3c>)
     384:	224a      	movs	r2, #74	; 0x4a
     386:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     388:	2501      	movs	r5, #1
     38a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38c:	2401      	movs	r4, #1
     38e:	4321      	orrs	r1, r4
     390:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     392:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     394:	2035      	movs	r0, #53	; 0x35
     396:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     398:	3a3b      	subs	r2, #59	; 0x3b
     39a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     39c:	3a0d      	subs	r2, #13
     39e:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	214b      	movs	r1, #75	; 0x4b
     3a4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3a8:	4322      	orrs	r2, r4
     3aa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ac:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ae:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b0:	393c      	subs	r1, #60	; 0x3c
     3b2:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3b4:	3111      	adds	r1, #17
     3b6:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b8:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(TX, PINMUX_PA10C_SERCOM0_PAD2);

	gpio_set_pin_function(RX, PINMUX_PA11C_SERCOM0_PAD3);
}
     3ba:	bd30      	pop	{r4, r5, pc}
     3bc:	41004400 	.word	0x41004400

000003c0 <USART_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     3c0:	4a04      	ldr	r2, [pc, #16]	; (3d4 <USART_0_CLOCK_init+0x14>)
     3c2:	6a13      	ldr	r3, [r2, #32]
     3c4:	2104      	movs	r1, #4
     3c6:	430b      	orrs	r3, r1
     3c8:	6213      	str	r3, [r2, #32]
     3ca:	4a03      	ldr	r2, [pc, #12]	; (3d8 <USART_0_CLOCK_init+0x18>)
     3cc:	4b03      	ldr	r3, [pc, #12]	; (3dc <USART_0_CLOCK_init+0x1c>)
     3ce:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     3d0:	4770      	bx	lr
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	40000400 	.word	0x40000400
     3d8:	00004214 	.word	0x00004214
     3dc:	40000c00 	.word	0x40000c00

000003e0 <USART_0_init>:

void USART_0_init(void)
{
     3e0:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     3e2:	4b05      	ldr	r3, [pc, #20]	; (3f8 <USART_0_init+0x18>)
     3e4:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     3e6:	2200      	movs	r2, #0
     3e8:	4904      	ldr	r1, [pc, #16]	; (3fc <USART_0_init+0x1c>)
     3ea:	4805      	ldr	r0, [pc, #20]	; (400 <USART_0_init+0x20>)
     3ec:	4b05      	ldr	r3, [pc, #20]	; (404 <USART_0_init+0x24>)
     3ee:	4798      	blx	r3
	USART_0_PORT_init();
     3f0:	4b05      	ldr	r3, [pc, #20]	; (408 <USART_0_init+0x28>)
     3f2:	4798      	blx	r3
}
     3f4:	bd10      	pop	{r4, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	000003c1 	.word	0x000003c1
     3fc:	42000800 	.word	0x42000800
     400:	20000470 	.word	0x20000470
     404:	00000ae1 	.word	0x00000ae1
     408:	00000381 	.word	0x00000381

0000040c <delay_driver_init>:

void delay_driver_init(void)
{
     40c:	b510      	push	{r4, lr}
	delay_init(SysTick);
     40e:	4802      	ldr	r0, [pc, #8]	; (418 <delay_driver_init+0xc>)
     410:	4b02      	ldr	r3, [pc, #8]	; (41c <delay_driver_init+0x10>)
     412:	4798      	blx	r3
}
     414:	bd10      	pop	{r4, pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	e000e010 	.word	0xe000e010
     41c:	00000759 	.word	0x00000759

00000420 <PWM_0_CLOCK_init>:
     420:	4a04      	ldr	r2, [pc, #16]	; (434 <PWM_0_CLOCK_init+0x14>)
     422:	6a11      	ldr	r1, [r2, #32]
     424:	2380      	movs	r3, #128	; 0x80
     426:	011b      	lsls	r3, r3, #4
     428:	430b      	orrs	r3, r1
     42a:	6213      	str	r3, [r2, #32]
     42c:	4a02      	ldr	r2, [pc, #8]	; (438 <PWM_0_CLOCK_init+0x18>)
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <PWM_0_CLOCK_init+0x1c>)
     430:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     432:	4770      	bx	lr
     434:	40000400 	.word	0x40000400
     438:	0000421b 	.word	0x0000421b
     43c:	40000c00 	.word	0x40000c00

00000440 <PWM_0_init>:

void PWM_0_init(void)
{
     440:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     442:	4b05      	ldr	r3, [pc, #20]	; (458 <PWM_0_init+0x18>)
     444:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     446:	4b05      	ldr	r3, [pc, #20]	; (45c <PWM_0_init+0x1c>)
     448:	4798      	blx	r3
     44a:	0002      	movs	r2, r0
     44c:	4904      	ldr	r1, [pc, #16]	; (460 <PWM_0_init+0x20>)
     44e:	4805      	ldr	r0, [pc, #20]	; (464 <PWM_0_init+0x24>)
     450:	4b05      	ldr	r3, [pc, #20]	; (468 <PWM_0_init+0x28>)
     452:	4798      	blx	r3
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	00000421 	.word	0x00000421
     45c:	00001a01 	.word	0x00001a01
     460:	42002c00 	.word	0x42002c00
     464:	2000044c 	.word	0x2000044c
     468:	00000875 	.word	0x00000875

0000046c <USB_DEVICE_INSTANCE_PORT_init>:

	event_system_init();
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     46c:	b5f0      	push	{r4, r5, r6, r7, lr}
     46e:	46c6      	mov	lr, r8
     470:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     472:	24c0      	movs	r4, #192	; 0xc0
     474:	05e4      	lsls	r4, r4, #23
     476:	2280      	movs	r2, #128	; 0x80
     478:	0452      	lsls	r2, r2, #17
     47a:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47c:	4b1a      	ldr	r3, [pc, #104]	; (4e8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     47e:	2780      	movs	r7, #128	; 0x80
     480:	05ff      	lsls	r7, r7, #23
     482:	629f      	str	r7, [r3, #40]	; 0x28
     484:	4919      	ldr	r1, [pc, #100]	; (4ec <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     486:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     488:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48a:	2058      	movs	r0, #88	; 0x58
     48c:	5c19      	ldrb	r1, [r3, r0]
     48e:	2204      	movs	r2, #4
     490:	4690      	mov	r8, r2
     492:	4391      	bics	r1, r2
     494:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     496:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     498:	2601      	movs	r6, #1
     49a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49c:	2501      	movs	r5, #1
     49e:	4329      	orrs	r1, r5
     4a0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a4:	381c      	subs	r0, #28
     4a6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4a8:	320b      	adds	r2, #11
     4aa:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     4ac:	3a09      	subs	r2, #9
     4ae:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b0:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4b2:	2180      	movs	r1, #128	; 0x80
     4b4:	0489      	lsls	r1, r1, #18
     4b6:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b8:	629f      	str	r7, [r3, #40]	; 0x28
     4ba:	4f0d      	ldr	r7, [pc, #52]	; (4f0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     4bc:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4be:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c0:	2159      	movs	r1, #89	; 0x59
     4c2:	5c5c      	ldrb	r4, [r3, r1]
     4c4:	4642      	mov	r2, r8
     4c6:	4394      	bics	r4, r2
     4c8:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4cc:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ce:	432a      	orrs	r2, r5
     4d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d6:	394a      	subs	r1, #74	; 0x4a
     4d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     4da:	3151      	adds	r1, #81	; 0x51
     4dc:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4de:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     4e0:	bc04      	pop	{r2}
     4e2:	4690      	mov	r8, r2
     4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	41004400 	.word	0x41004400
     4ec:	c0000100 	.word	0xc0000100
     4f0:	c0000200 	.word	0xc0000200

000004f4 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     4f4:	4b06      	ldr	r3, [pc, #24]	; (510 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     4f6:	69da      	ldr	r2, [r3, #28]
     4f8:	2120      	movs	r1, #32
     4fa:	430a      	orrs	r2, r1
     4fc:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     4fe:	695a      	ldr	r2, [r3, #20]
     500:	3120      	adds	r1, #32
     502:	430a      	orrs	r2, r1
     504:	615a      	str	r2, [r3, #20]
     506:	4a03      	ldr	r2, [pc, #12]	; (514 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     508:	4b03      	ldr	r3, [pc, #12]	; (518 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     50a:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     50c:	4770      	bx	lr
     50e:	46c0      	nop			; (mov r8, r8)
     510:	40000400 	.word	0x40000400
     514:	00004006 	.word	0x00004006
     518:	40000c00 	.word	0x40000c00

0000051c <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     51c:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     51e:	4b03      	ldr	r3, [pc, #12]	; (52c <USB_DEVICE_INSTANCE_init+0x10>)
     520:	4798      	blx	r3
	usb_d_init();
     522:	4b03      	ldr	r3, [pc, #12]	; (530 <USB_DEVICE_INSTANCE_init+0x14>)
     524:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     526:	4b03      	ldr	r3, [pc, #12]	; (534 <USB_DEVICE_INSTANCE_init+0x18>)
     528:	4798      	blx	r3
}
     52a:	bd10      	pop	{r4, pc}
     52c:	000004f5 	.word	0x000004f5
     530:	00000e1d 	.word	0x00000e1d
     534:	0000046d 	.word	0x0000046d

00000538 <system_init>:

void system_init(void)
{
     538:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     53a:	4b19      	ldr	r3, [pc, #100]	; (5a0 <system_init+0x68>)
     53c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     53e:	23c0      	movs	r3, #192	; 0xc0
     540:	05db      	lsls	r3, r3, #23
     542:	2280      	movs	r2, #128	; 0x80
     544:	0292      	lsls	r2, r2, #10
     546:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     548:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     54a:	4b16      	ldr	r3, [pc, #88]	; (5a4 <system_init+0x6c>)
     54c:	2280      	movs	r2, #128	; 0x80
     54e:	05d2      	lsls	r2, r2, #23
     550:	629a      	str	r2, [r3, #40]	; 0x28
     552:	4a15      	ldr	r2, [pc, #84]	; (5a8 <system_init+0x70>)
     554:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     556:	2151      	movs	r1, #81	; 0x51
     558:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	2001      	movs	r0, #1
     55c:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     560:	4b12      	ldr	r3, [pc, #72]	; (5ac <system_init+0x74>)
     562:	4798      	blx	r3
	CRC_0_init();
     564:	4b12      	ldr	r3, [pc, #72]	; (5b0 <system_init+0x78>)
     566:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     568:	4b12      	ldr	r3, [pc, #72]	; (5b4 <system_init+0x7c>)
     56a:	4798      	blx	r3

	USART_0_init();
     56c:	4b12      	ldr	r3, [pc, #72]	; (5b8 <system_init+0x80>)
     56e:	4798      	blx	r3

	delay_driver_init();
     570:	4b12      	ldr	r3, [pc, #72]	; (5bc <system_init+0x84>)
     572:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
     574:	4a12      	ldr	r2, [pc, #72]	; (5c0 <system_init+0x88>)
     576:	6993      	ldr	r3, [r2, #24]
     578:	2120      	movs	r1, #32
     57a:	430b      	orrs	r3, r1
     57c:	6193      	str	r3, [r2, #24]
     57e:	4a11      	ldr	r2, [pc, #68]	; (5c4 <system_init+0x8c>)
     580:	4b11      	ldr	r3, [pc, #68]	; (5c8 <system_init+0x90>)
     582:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     584:	4b11      	ldr	r3, [pc, #68]	; (5cc <system_init+0x94>)
     586:	4798      	blx	r3
     588:	0002      	movs	r2, r0
     58a:	4911      	ldr	r1, [pc, #68]	; (5d0 <system_init+0x98>)
     58c:	4811      	ldr	r0, [pc, #68]	; (5d4 <system_init+0x9c>)
     58e:	4b12      	ldr	r3, [pc, #72]	; (5d8 <system_init+0xa0>)
     590:	4798      	blx	r3

	TIMER_0_init();

	PWM_0_init();
     592:	4b12      	ldr	r3, [pc, #72]	; (5dc <system_init+0xa4>)
     594:	4798      	blx	r3
	event_system_init();
     596:	4b12      	ldr	r3, [pc, #72]	; (5e0 <system_init+0xa8>)
     598:	4798      	blx	r3

	EVENT_SYSTEM_0_init();

	USB_DEVICE_INSTANCE_init();
     59a:	4b12      	ldr	r3, [pc, #72]	; (5e4 <system_init+0xac>)
     59c:	4798      	blx	r3
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	000013e1 	.word	0x000013e1
     5a4:	41004400 	.word	0x41004400
     5a8:	c0000002 	.word	0xc0000002
     5ac:	00000309 	.word	0x00000309
     5b0:	00000335 	.word	0x00000335
     5b4:	00000365 	.word	0x00000365
     5b8:	000003e1 	.word	0x000003e1
     5bc:	0000040d 	.word	0x0000040d
     5c0:	40000400 	.word	0x40000400
     5c4:	00004204 	.word	0x00004204
     5c8:	40000c00 	.word	0x40000c00
     5cc:	00001689 	.word	0x00001689
     5d0:	40001400 	.word	0x40001400
     5d4:	2000047c 	.word	0x2000047c
     5d8:	000009b9 	.word	0x000009b9
     5dc:	00000441 	.word	0x00000441
     5e0:	0000078d 	.word	0x0000078d
     5e4:	0000051d 	.word	0x0000051d

000005e8 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     5e8:	b570      	push	{r4, r5, r6, lr}
     5ea:	0004      	movs	r4, r0
     5ec:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5ee:	2800      	cmp	r0, #0
     5f0:	d00c      	beq.n	60c <adc_sync_init+0x24>
     5f2:	0008      	movs	r0, r1
     5f4:	1e43      	subs	r3, r0, #1
     5f6:	4198      	sbcs	r0, r3
     5f8:	b2c0      	uxtb	r0, r0
     5fa:	2239      	movs	r2, #57	; 0x39
     5fc:	4904      	ldr	r1, [pc, #16]	; (610 <adc_sync_init+0x28>)
     5fe:	4b05      	ldr	r3, [pc, #20]	; (614 <adc_sync_init+0x2c>)
     600:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     602:	0029      	movs	r1, r5
     604:	0020      	movs	r0, r4
     606:	4b04      	ldr	r3, [pc, #16]	; (618 <adc_sync_init+0x30>)
     608:	4798      	blx	r3
}
     60a:	bd70      	pop	{r4, r5, r6, pc}
     60c:	2000      	movs	r0, #0
     60e:	e7f4      	b.n	5fa <adc_sync_init+0x12>
     610:	000045f8 	.word	0x000045f8
     614:	00001171 	.word	0x00001171
     618:	0000134d 	.word	0x0000134d

0000061c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     61c:	b570      	push	{r4, r5, r6, lr}
     61e:	0004      	movs	r4, r0
     620:	000d      	movs	r5, r1
	ASSERT(descr);
     622:	1e43      	subs	r3, r0, #1
     624:	4198      	sbcs	r0, r3
     626:	b2c0      	uxtb	r0, r0
     628:	224e      	movs	r2, #78	; 0x4e
     62a:	4904      	ldr	r1, [pc, #16]	; (63c <adc_sync_enable_channel+0x20>)
     62c:	4b04      	ldr	r3, [pc, #16]	; (640 <adc_sync_enable_channel+0x24>)
     62e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     630:	0029      	movs	r1, r5
     632:	0020      	movs	r0, r4
     634:	4b03      	ldr	r3, [pc, #12]	; (644 <adc_sync_enable_channel+0x28>)
     636:	4798      	blx	r3

	return ERR_NONE;
}
     638:	2000      	movs	r0, #0
     63a:	bd70      	pop	{r4, r5, r6, pc}
     63c:	000045f8 	.word	0x000045f8
     640:	00001171 	.word	0x00001171
     644:	00001385 	.word	0x00001385

00000648 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	46de      	mov	lr, fp
     64c:	4657      	mov	r7, sl
     64e:	464e      	mov	r6, r9
     650:	4645      	mov	r5, r8
     652:	b5e0      	push	{r5, r6, r7, lr}
     654:	b083      	sub	sp, #12
     656:	0006      	movs	r6, r0
     658:	000d      	movs	r5, r1
     65a:	4691      	mov	r9, r2
     65c:	9301      	str	r3, [sp, #4]
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     65e:	2800      	cmp	r0, #0
     660:	d01e      	beq.n	6a0 <adc_sync_read_channel+0x58>
     662:	2a00      	cmp	r2, #0
     664:	d01e      	beq.n	6a4 <adc_sync_read_channel+0x5c>
     666:	0018      	movs	r0, r3
     668:	1e43      	subs	r3, r0, #1
     66a:	4198      	sbcs	r0, r3
     66c:	2267      	movs	r2, #103	; 0x67
     66e:	491f      	ldr	r1, [pc, #124]	; (6ec <adc_sync_read_channel+0xa4>)
     670:	4f1f      	ldr	r7, [pc, #124]	; (6f0 <adc_sync_read_channel+0xa8>)
     672:	47b8      	blx	r7
	data_size = _adc_sync_get_data_size(&descr->device);
     674:	0034      	movs	r4, r6
     676:	0030      	movs	r0, r6
     678:	4b1e      	ldr	r3, [pc, #120]	; (6f4 <adc_sync_read_channel+0xac>)
     67a:	4798      	blx	r3
     67c:	0001      	movs	r1, r0
     67e:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
     680:	9801      	ldr	r0, [sp, #4]
     682:	4b1d      	ldr	r3, [pc, #116]	; (6f8 <adc_sync_read_channel+0xb0>)
     684:	4798      	blx	r3
     686:	4248      	negs	r0, r1
     688:	4148      	adcs	r0, r1
     68a:	b2c0      	uxtb	r0, r0
     68c:	2269      	movs	r2, #105	; 0x69
     68e:	4917      	ldr	r1, [pc, #92]	; (6ec <adc_sync_read_channel+0xa4>)
     690:	47b8      	blx	r7
	uint16_t offset = 0;
     692:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     694:	4b19      	ldr	r3, [pc, #100]	; (6fc <adc_sync_read_channel+0xb4>)
     696:	469b      	mov	fp, r3

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     698:	4e19      	ldr	r6, [pc, #100]	; (700 <adc_sync_read_channel+0xb8>)
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
     69a:	4b1a      	ldr	r3, [pc, #104]	; (704 <adc_sync_read_channel+0xbc>)
     69c:	469a      	mov	sl, r3
     69e:	e008      	b.n	6b2 <adc_sync_read_channel+0x6a>
	ASSERT(descr && buffer && length);
     6a0:	2000      	movs	r0, #0
     6a2:	e7e3      	b.n	66c <adc_sync_read_channel+0x24>
     6a4:	2000      	movs	r0, #0
     6a6:	e7e1      	b.n	66c <adc_sync_read_channel+0x24>
     6a8:	4447      	add	r7, r8
     6aa:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
     6ac:	9b01      	ldr	r3, [sp, #4]
     6ae:	42bb      	cmp	r3, r7
     6b0:	d913      	bls.n	6da <adc_sync_read_channel+0x92>
		_adc_sync_convert(&descr->device);
     6b2:	0020      	movs	r0, r4
     6b4:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     6b6:	0029      	movs	r1, r5
     6b8:	0020      	movs	r0, r4
     6ba:	47b0      	blx	r6
     6bc:	2800      	cmp	r0, #0
     6be:	d0fa      	beq.n	6b6 <adc_sync_read_channel+0x6e>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     6c0:	0029      	movs	r1, r5
     6c2:	0020      	movs	r0, r4
     6c4:	47d0      	blx	sl
		buffer[offset] = result;
     6c6:	464b      	mov	r3, r9
     6c8:	55d8      	strb	r0, [r3, r7]
		if (1 < data_size) {
     6ca:	4643      	mov	r3, r8
     6cc:	2b01      	cmp	r3, #1
     6ce:	d9eb      	bls.n	6a8 <adc_sync_read_channel+0x60>
			buffer[offset + 1] = result >> 8;
     6d0:	464b      	mov	r3, r9
     6d2:	19db      	adds	r3, r3, r7
     6d4:	0a00      	lsrs	r0, r0, #8
     6d6:	7058      	strb	r0, [r3, #1]
     6d8:	e7e6      	b.n	6a8 <adc_sync_read_channel+0x60>

	return offset;
}
     6da:	0038      	movs	r0, r7
     6dc:	b003      	add	sp, #12
     6de:	bc3c      	pop	{r2, r3, r4, r5}
     6e0:	4690      	mov	r8, r2
     6e2:	4699      	mov	r9, r3
     6e4:	46a2      	mov	sl, r4
     6e6:	46ab      	mov	fp, r5
     6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	000045f8 	.word	0x000045f8
     6f0:	00001171 	.word	0x00001171
     6f4:	00001391 	.word	0x00001391
     6f8:	00003cfd 	.word	0x00003cfd
     6fc:	000013b3 	.word	0x000013b3
     700:	000013a9 	.word	0x000013a9
     704:	000013c5 	.word	0x000013c5

00000708 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     708:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     70c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     70e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     710:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     714:	4770      	bx	lr

00000716 <atomic_leave_critical>:
     716:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     71a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     71c:	f383 8810 	msr	PRIMASK, r3
}
     720:	4770      	bx	lr
	...

00000724 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
     724:	b570      	push	{r4, r5, r6, lr}
     726:	0004      	movs	r4, r0
     728:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     72a:	2800      	cmp	r0, #0
     72c:	d00c      	beq.n	748 <crc_sync_init+0x24>
     72e:	0008      	movs	r0, r1
     730:	1e43      	subs	r3, r0, #1
     732:	4198      	sbcs	r0, r3
     734:	b2c0      	uxtb	r0, r0
     736:	222b      	movs	r2, #43	; 0x2b
     738:	4904      	ldr	r1, [pc, #16]	; (74c <crc_sync_init+0x28>)
     73a:	4b05      	ldr	r3, [pc, #20]	; (750 <crc_sync_init+0x2c>)
     73c:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
     73e:	0029      	movs	r1, r5
     740:	0020      	movs	r0, r4
     742:	4b04      	ldr	r3, [pc, #16]	; (754 <crc_sync_init+0x30>)
     744:	4798      	blx	r3
}
     746:	bd70      	pop	{r4, r5, r6, pc}
     748:	2000      	movs	r0, #0
     74a:	e7f4      	b.n	736 <crc_sync_init+0x12>
     74c:	00004614 	.word	0x00004614
     750:	00001171 	.word	0x00001171
     754:	00001415 	.word	0x00001415

00000758 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     758:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     75a:	4b02      	ldr	r3, [pc, #8]	; (764 <delay_init+0xc>)
     75c:	6018      	str	r0, [r3, #0]
     75e:	4b02      	ldr	r3, [pc, #8]	; (768 <delay_init+0x10>)
     760:	4798      	blx	r3
}
     762:	bd10      	pop	{r4, pc}
     764:	200000fc 	.word	0x200000fc
     768:	00001879 	.word	0x00001879

0000076c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     76c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     76e:	4b04      	ldr	r3, [pc, #16]	; (780 <delay_ms+0x14>)
     770:	681c      	ldr	r4, [r3, #0]
     772:	4b04      	ldr	r3, [pc, #16]	; (784 <delay_ms+0x18>)
     774:	4798      	blx	r3
     776:	0001      	movs	r1, r0
     778:	0020      	movs	r0, r4
     77a:	4b03      	ldr	r3, [pc, #12]	; (788 <delay_ms+0x1c>)
     77c:	4798      	blx	r3
}
     77e:	bd10      	pop	{r4, pc}
     780:	200000fc 	.word	0x200000fc
     784:	000013d5 	.word	0x000013d5
     788:	0000188d 	.word	0x0000188d

0000078c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     78c:	b510      	push	{r4, lr}
	return _event_system_init();
     78e:	4b01      	ldr	r3, [pc, #4]	; (794 <event_system_init+0x8>)
     790:	4798      	blx	r3
}
     792:	bd10      	pop	{r4, pc}
     794:	00001575 	.word	0x00001575

00000798 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     798:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     79a:	4b0c      	ldr	r3, [pc, #48]	; (7cc <process_ext_irq+0x34>)
     79c:	685c      	ldr	r4, [r3, #4]
     79e:	42a0      	cmp	r0, r4
     7a0:	d00e      	beq.n	7c0 <process_ext_irq+0x28>
     7a2:	2201      	movs	r2, #1
     7a4:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     7a6:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     7a8:	25ff      	movs	r5, #255	; 0xff
     7aa:	e003      	b.n	7b4 <process_ext_irq+0x1c>
     7ac:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     7ae:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     7b0:	085b      	lsrs	r3, r3, #1
     7b2:	d10a      	bne.n	7ca <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     7b4:	42a0      	cmp	r0, r4
     7b6:	d9f9      	bls.n	7ac <process_ext_irq+0x14>
	while (upper >= lower) {
     7b8:	2a00      	cmp	r2, #0
     7ba:	d006      	beq.n	7ca <process_ext_irq+0x32>
			lower = middle + 1;
     7bc:	0031      	movs	r1, r6
     7be:	e7f6      	b.n	7ae <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     7c0:	4b02      	ldr	r3, [pc, #8]	; (7cc <process_ext_irq+0x34>)
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	2b00      	cmp	r3, #0
     7c6:	d000      	beq.n	7ca <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     7c8:	4798      	blx	r3
		}
	}
}
     7ca:	bd70      	pop	{r4, r5, r6, pc}
     7cc:	20000100 	.word	0x20000100

000007d0 <ext_irq_init>:
{
     7d0:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     7d2:	4b05      	ldr	r3, [pc, #20]	; (7e8 <ext_irq_init+0x18>)
     7d4:	2201      	movs	r2, #1
     7d6:	4252      	negs	r2, r2
     7d8:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     7da:	2200      	movs	r2, #0
     7dc:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     7de:	4803      	ldr	r0, [pc, #12]	; (7ec <ext_irq_init+0x1c>)
     7e0:	4b03      	ldr	r3, [pc, #12]	; (7f0 <ext_irq_init+0x20>)
     7e2:	4798      	blx	r3
}
     7e4:	bd10      	pop	{r4, pc}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	20000100 	.word	0x20000100
     7ec:	00000799 	.word	0x00000799
     7f0:	0000141d 	.word	0x0000141d

000007f4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7f4:	b570      	push	{r4, r5, r6, lr}
     7f6:	0006      	movs	r6, r0
     7f8:	000c      	movs	r4, r1
     7fa:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     7fc:	2800      	cmp	r0, #0
     7fe:	d00d      	beq.n	81c <io_write+0x28>
     800:	0008      	movs	r0, r1
     802:	1e43      	subs	r3, r0, #1
     804:	4198      	sbcs	r0, r3
     806:	b2c0      	uxtb	r0, r0
     808:	2234      	movs	r2, #52	; 0x34
     80a:	4905      	ldr	r1, [pc, #20]	; (820 <io_write+0x2c>)
     80c:	4b05      	ldr	r3, [pc, #20]	; (824 <io_write+0x30>)
     80e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     810:	6833      	ldr	r3, [r6, #0]
     812:	002a      	movs	r2, r5
     814:	0021      	movs	r1, r4
     816:	0030      	movs	r0, r6
     818:	4798      	blx	r3
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
     81c:	2000      	movs	r0, #0
     81e:	e7f3      	b.n	808 <io_write+0x14>
     820:	00004630 	.word	0x00004630
     824:	00001171 	.word	0x00001171

00000828 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     828:	b570      	push	{r4, r5, r6, lr}
     82a:	0006      	movs	r6, r0
     82c:	000c      	movs	r4, r1
     82e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     830:	2800      	cmp	r0, #0
     832:	d00d      	beq.n	850 <io_read+0x28>
     834:	0008      	movs	r0, r1
     836:	1e43      	subs	r3, r0, #1
     838:	4198      	sbcs	r0, r3
     83a:	b2c0      	uxtb	r0, r0
     83c:	223d      	movs	r2, #61	; 0x3d
     83e:	4905      	ldr	r1, [pc, #20]	; (854 <io_read+0x2c>)
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <io_read+0x30>)
     842:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     844:	6873      	ldr	r3, [r6, #4]
     846:	002a      	movs	r2, r5
     848:	0021      	movs	r1, r4
     84a:	0030      	movs	r0, r6
     84c:	4798      	blx	r3
}
     84e:	bd70      	pop	{r4, r5, r6, pc}
     850:	2000      	movs	r0, #0
     852:	e7f3      	b.n	83c <io_read+0x14>
     854:	00004630 	.word	0x00004630
     858:	00001171 	.word	0x00001171

0000085c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     85c:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     85e:	6943      	ldr	r3, [r0, #20]
     860:	2b00      	cmp	r3, #0
     862:	d000      	beq.n	866 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     864:	4798      	blx	r3
	}
}
     866:	bd10      	pop	{r4, pc}

00000868 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     868:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     86a:	6983      	ldr	r3, [r0, #24]
     86c:	2b00      	cmp	r3, #0
     86e:	d000      	beq.n	872 <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     870:	4798      	blx	r3
	}
}
     872:	bd10      	pop	{r4, pc}

00000874 <pwm_init>:
{
     874:	b570      	push	{r4, r5, r6, lr}
     876:	0005      	movs	r5, r0
     878:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     87a:	2800      	cmp	r0, #0
     87c:	d011      	beq.n	8a2 <pwm_init+0x2e>
     87e:	0008      	movs	r0, r1
     880:	1e43      	subs	r3, r0, #1
     882:	4198      	sbcs	r0, r3
     884:	b2c0      	uxtb	r0, r0
     886:	2233      	movs	r2, #51	; 0x33
     888:	4907      	ldr	r1, [pc, #28]	; (8a8 <pwm_init+0x34>)
     88a:	4b08      	ldr	r3, [pc, #32]	; (8ac <pwm_init+0x38>)
     88c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     88e:	0021      	movs	r1, r4
     890:	0028      	movs	r0, r5
     892:	4b07      	ldr	r3, [pc, #28]	; (8b0 <pwm_init+0x3c>)
     894:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     896:	4b07      	ldr	r3, [pc, #28]	; (8b4 <pwm_init+0x40>)
     898:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <pwm_init+0x44>)
     89c:	606b      	str	r3, [r5, #4]
}
     89e:	2000      	movs	r0, #0
     8a0:	bd70      	pop	{r4, r5, r6, pc}
     8a2:	2000      	movs	r0, #0
     8a4:	e7ef      	b.n	886 <pwm_init+0x12>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	00004644 	.word	0x00004644
     8ac:	00001171 	.word	0x00001171
     8b0:	0000191d 	.word	0x0000191d
     8b4:	0000085d 	.word	0x0000085d
     8b8:	00000869 	.word	0x00000869

000008bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8be:	46ce      	mov	lr, r9
     8c0:	4647      	mov	r7, r8
     8c2:	b580      	push	{r7, lr}
     8c4:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     8c6:	6803      	ldr	r3, [r0, #0]
     8c8:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     8ca:	2b00      	cmp	r3, #0
     8cc:	d005      	beq.n	8da <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     8ce:	688e      	ldr	r6, [r1, #8]
     8d0:	001c      	movs	r4, r3
     8d2:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8d4:	2701      	movs	r7, #1
     8d6:	1abf      	subs	r7, r7, r2
     8d8:	e00d      	b.n	8f6 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     8da:	4b12      	ldr	r3, [pc, #72]	; (924 <timer_add_timer_task+0x68>)
     8dc:	4798      	blx	r3
		return;
     8de:	e018      	b.n	912 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8e0:	18fb      	adds	r3, r7, r3
     8e2:	68a0      	ldr	r0, [r4, #8]
     8e4:	4680      	mov	r8, r0
     8e6:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     8e8:	42b3      	cmp	r3, r6
     8ea:	d20c      	bcs.n	906 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     8ec:	6823      	ldr	r3, [r4, #0]
     8ee:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     8f0:	2b00      	cmp	r3, #0
     8f2:	d00b      	beq.n	90c <timer_add_timer_task+0x50>
     8f4:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     8f6:	6863      	ldr	r3, [r4, #4]
     8f8:	4293      	cmp	r3, r2
     8fa:	d8f1      	bhi.n	8e0 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     8fc:	68a0      	ldr	r0, [r4, #8]
     8fe:	4680      	mov	r8, r0
     900:	4443      	add	r3, r8
     902:	1a9b      	subs	r3, r3, r2
     904:	e7f0      	b.n	8e8 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     906:	45a4      	cmp	ip, r4
     908:	d007      	beq.n	91a <timer_add_timer_task+0x5e>
     90a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     90c:	0020      	movs	r0, r4
     90e:	4b06      	ldr	r3, [pc, #24]	; (928 <timer_add_timer_task+0x6c>)
     910:	4798      	blx	r3
	}
}
     912:	bc0c      	pop	{r2, r3}
     914:	4690      	mov	r8, r2
     916:	4699      	mov	r9, r3
     918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     91a:	4648      	mov	r0, r9
     91c:	4b01      	ldr	r3, [pc, #4]	; (924 <timer_add_timer_task+0x68>)
     91e:	4798      	blx	r3
     920:	e7f7      	b.n	912 <timer_add_timer_task+0x56>
     922:	46c0      	nop			; (mov r8, r8)
     924:	0000119d 	.word	0x0000119d
     928:	000011c9 	.word	0x000011c9

0000092c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     92c:	b5f0      	push	{r4, r5, r6, r7, lr}
     92e:	46c6      	mov	lr, r8
     930:	b500      	push	{lr}
     932:	b082      	sub	sp, #8
     934:	0007      	movs	r7, r0
	return (void *)list->head;
     936:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     938:	6903      	ldr	r3, [r0, #16]
     93a:	3301      	adds	r3, #1
     93c:	4698      	mov	r8, r3
     93e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     940:	7e03      	ldrb	r3, [r0, #24]
     942:	07db      	lsls	r3, r3, #31
     944:	d411      	bmi.n	96a <timer_process_counted+0x3e>
     946:	7e03      	ldrb	r3, [r0, #24]
     948:	079b      	lsls	r3, r3, #30
     94a:	d40e      	bmi.n	96a <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     94c:	2c00      	cmp	r4, #0
     94e:	d010      	beq.n	972 <timer_process_counted+0x46>
     950:	4643      	mov	r3, r8
     952:	6862      	ldr	r2, [r4, #4]
     954:	1a9b      	subs	r3, r3, r2
     956:	68a2      	ldr	r2, [r4, #8]
     958:	4293      	cmp	r3, r2
     95a:	d30a      	bcc.n	972 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     95c:	2314      	movs	r3, #20
     95e:	469c      	mov	ip, r3
     960:	4484      	add	ip, r0
     962:	4663      	mov	r3, ip
     964:	9301      	str	r3, [sp, #4]
     966:	4e12      	ldr	r6, [pc, #72]	; (9b0 <timer_process_counted+0x84>)
     968:	e014      	b.n	994 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     96a:	7e3b      	ldrb	r3, [r7, #24]
     96c:	2202      	movs	r2, #2
     96e:	4313      	orrs	r3, r2
     970:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     972:	b002      	add	sp, #8
     974:	bc04      	pop	{r2}
     976:	4690      	mov	r8, r2
     978:	bdf0      	pop	{r4, r5, r6, r7, pc}
     97a:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     97c:	68e3      	ldr	r3, [r4, #12]
     97e:	0020      	movs	r0, r4
     980:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     982:	2d00      	cmp	r5, #0
     984:	d0f5      	beq.n	972 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     986:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     988:	4643      	mov	r3, r8
     98a:	686a      	ldr	r2, [r5, #4]
     98c:	1a9b      	subs	r3, r3, r2
     98e:	68aa      	ldr	r2, [r5, #8]
     990:	4293      	cmp	r3, r2
     992:	d3ee      	bcc.n	972 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     994:	9801      	ldr	r0, [sp, #4]
     996:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     998:	7c23      	ldrb	r3, [r4, #16]
     99a:	2b01      	cmp	r3, #1
     99c:	d1ed      	bne.n	97a <timer_process_counted+0x4e>
			tmp->time_label = time;
     99e:	4643      	mov	r3, r8
     9a0:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9a2:	4642      	mov	r2, r8
     9a4:	0021      	movs	r1, r4
     9a6:	9801      	ldr	r0, [sp, #4]
     9a8:	4b02      	ldr	r3, [pc, #8]	; (9b4 <timer_process_counted+0x88>)
     9aa:	4798      	blx	r3
     9ac:	e7e5      	b.n	97a <timer_process_counted+0x4e>
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	00001211 	.word	0x00001211
     9b4:	000008bd 	.word	0x000008bd

000009b8 <timer_init>:
{
     9b8:	b570      	push	{r4, r5, r6, lr}
     9ba:	0005      	movs	r5, r0
     9bc:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     9be:	2800      	cmp	r0, #0
     9c0:	d011      	beq.n	9e6 <timer_init+0x2e>
     9c2:	0008      	movs	r0, r1
     9c4:	1e43      	subs	r3, r0, #1
     9c6:	4198      	sbcs	r0, r3
     9c8:	b2c0      	uxtb	r0, r0
     9ca:	223b      	movs	r2, #59	; 0x3b
     9cc:	4907      	ldr	r1, [pc, #28]	; (9ec <timer_init+0x34>)
     9ce:	4b08      	ldr	r3, [pc, #32]	; (9f0 <timer_init+0x38>)
     9d0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     9d2:	0021      	movs	r1, r4
     9d4:	0028      	movs	r0, r5
     9d6:	4b07      	ldr	r3, [pc, #28]	; (9f4 <timer_init+0x3c>)
     9d8:	4798      	blx	r3
	descr->time                           = 0;
     9da:	2300      	movs	r3, #0
     9dc:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     9de:	4b06      	ldr	r3, [pc, #24]	; (9f8 <timer_init+0x40>)
     9e0:	602b      	str	r3, [r5, #0]
}
     9e2:	2000      	movs	r0, #0
     9e4:	bd70      	pop	{r4, r5, r6, pc}
     9e6:	2000      	movs	r0, #0
     9e8:	e7ef      	b.n	9ca <timer_init+0x12>
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	0000465c 	.word	0x0000465c
     9f0:	00001171 	.word	0x00001171
     9f4:	0000162d 	.word	0x0000162d
     9f8:	0000092d 	.word	0x0000092d

000009fc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9fe:	46ce      	mov	lr, r9
     a00:	4647      	mov	r7, r8
     a02:	b580      	push	{r7, lr}
     a04:	0004      	movs	r4, r0
     a06:	000f      	movs	r7, r1
     a08:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     a0a:	2800      	cmp	r0, #0
     a0c:	d026      	beq.n	a5c <usart_sync_write+0x60>
     a0e:	2900      	cmp	r1, #0
     a10:	d026      	beq.n	a60 <usart_sync_write+0x64>
     a12:	0010      	movs	r0, r2
     a14:	1e43      	subs	r3, r0, #1
     a16:	4198      	sbcs	r0, r3
     a18:	22f1      	movs	r2, #241	; 0xf1
     a1a:	4912      	ldr	r1, [pc, #72]	; (a64 <usart_sync_write+0x68>)
     a1c:	4b12      	ldr	r3, [pc, #72]	; (a68 <usart_sync_write+0x6c>)
     a1e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     a20:	3408      	adds	r4, #8
     a22:	4d12      	ldr	r5, [pc, #72]	; (a6c <usart_sync_write+0x70>)
     a24:	0020      	movs	r0, r4
     a26:	47a8      	blx	r5
     a28:	2800      	cmp	r0, #0
     a2a:	d0fb      	beq.n	a24 <usart_sync_write+0x28>
     a2c:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     a2e:	4b10      	ldr	r3, [pc, #64]	; (a70 <usart_sync_write+0x74>)
     a30:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     a32:	4d0e      	ldr	r5, [pc, #56]	; (a6c <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     a34:	5db9      	ldrb	r1, [r7, r6]
     a36:	0020      	movs	r0, r4
     a38:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     a3a:	0020      	movs	r0, r4
     a3c:	47a8      	blx	r5
     a3e:	2800      	cmp	r0, #0
     a40:	d0fb      	beq.n	a3a <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     a42:	3601      	adds	r6, #1
     a44:	4546      	cmp	r6, r8
     a46:	d3f5      	bcc.n	a34 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     a48:	4d0a      	ldr	r5, [pc, #40]	; (a74 <usart_sync_write+0x78>)
     a4a:	0020      	movs	r0, r4
     a4c:	47a8      	blx	r5
     a4e:	2800      	cmp	r0, #0
     a50:	d0fb      	beq.n	a4a <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     a52:	0030      	movs	r0, r6
     a54:	bc0c      	pop	{r2, r3}
     a56:	4690      	mov	r8, r2
     a58:	4699      	mov	r9, r3
     a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     a5c:	2000      	movs	r0, #0
     a5e:	e7db      	b.n	a18 <usart_sync_write+0x1c>
     a60:	2000      	movs	r0, #0
     a62:	e7d9      	b.n	a18 <usart_sync_write+0x1c>
     a64:	00004674 	.word	0x00004674
     a68:	00001171 	.word	0x00001171
     a6c:	0000179d 	.word	0x0000179d
     a70:	0000178d 	.word	0x0000178d
     a74:	000017a7 	.word	0x000017a7

00000a78 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a7a:	46ce      	mov	lr, r9
     a7c:	4647      	mov	r7, r8
     a7e:	b580      	push	{r7, lr}
     a80:	0004      	movs	r4, r0
     a82:	000f      	movs	r7, r1
     a84:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     a86:	2800      	cmp	r0, #0
     a88:	d01d      	beq.n	ac6 <usart_sync_read+0x4e>
     a8a:	2900      	cmp	r1, #0
     a8c:	d01d      	beq.n	aca <usart_sync_read+0x52>
     a8e:	0010      	movs	r0, r2
     a90:	1e43      	subs	r3, r0, #1
     a92:	4198      	sbcs	r0, r3
     a94:	2286      	movs	r2, #134	; 0x86
     a96:	0052      	lsls	r2, r2, #1
     a98:	490d      	ldr	r1, [pc, #52]	; (ad0 <usart_sync_read+0x58>)
     a9a:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <usart_sync_read+0x5c>)
     a9c:	4798      	blx	r3
	uint32_t                      offset = 0;
     a9e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     aa0:	3408      	adds	r4, #8
     aa2:	4d0d      	ldr	r5, [pc, #52]	; (ad8 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     aa4:	4b0d      	ldr	r3, [pc, #52]	; (adc <usart_sync_read+0x64>)
     aa6:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     aa8:	0020      	movs	r0, r4
     aaa:	47a8      	blx	r5
     aac:	2800      	cmp	r0, #0
     aae:	d0fb      	beq.n	aa8 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     ab0:	0020      	movs	r0, r4
     ab2:	47c8      	blx	r9
     ab4:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     ab6:	3601      	adds	r6, #1
     ab8:	4546      	cmp	r6, r8
     aba:	d3f5      	bcc.n	aa8 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     abc:	0030      	movs	r0, r6
     abe:	bc0c      	pop	{r2, r3}
     ac0:	4690      	mov	r8, r2
     ac2:	4699      	mov	r9, r3
     ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     ac6:	2000      	movs	r0, #0
     ac8:	e7e4      	b.n	a94 <usart_sync_read+0x1c>
     aca:	2000      	movs	r0, #0
     acc:	e7e2      	b.n	a94 <usart_sync_read+0x1c>
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	00004674 	.word	0x00004674
     ad4:	00001171 	.word	0x00001171
     ad8:	000017b1 	.word	0x000017b1
     adc:	00001795 	.word	0x00001795

00000ae0 <usart_sync_init>:
{
     ae0:	b570      	push	{r4, r5, r6, lr}
     ae2:	0005      	movs	r5, r0
     ae4:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     ae6:	2800      	cmp	r0, #0
     ae8:	d013      	beq.n	b12 <usart_sync_init+0x32>
     aea:	0008      	movs	r0, r1
     aec:	1e43      	subs	r3, r0, #1
     aee:	4198      	sbcs	r0, r3
     af0:	b2c0      	uxtb	r0, r0
     af2:	2234      	movs	r2, #52	; 0x34
     af4:	4908      	ldr	r1, [pc, #32]	; (b18 <usart_sync_init+0x38>)
     af6:	4b09      	ldr	r3, [pc, #36]	; (b1c <usart_sync_init+0x3c>)
     af8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     afa:	0028      	movs	r0, r5
     afc:	3008      	adds	r0, #8
     afe:	0021      	movs	r1, r4
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <usart_sync_init+0x40>)
     b02:	4798      	blx	r3
	if (init_status) {
     b04:	2800      	cmp	r0, #0
     b06:	d103      	bne.n	b10 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     b08:	4b06      	ldr	r3, [pc, #24]	; (b24 <usart_sync_init+0x44>)
     b0a:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     b0c:	4b06      	ldr	r3, [pc, #24]	; (b28 <usart_sync_init+0x48>)
     b0e:	602b      	str	r3, [r5, #0]
}
     b10:	bd70      	pop	{r4, r5, r6, pc}
     b12:	2000      	movs	r0, #0
     b14:	e7ed      	b.n	af2 <usart_sync_init+0x12>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00004674 	.word	0x00004674
     b1c:	00001171 	.word	0x00001171
     b20:	0000174d 	.word	0x0000174d
     b24:	00000a79 	.word	0x00000a79
     b28:	000009fd 	.word	0x000009fd

00000b2c <usart_sync_enable>:
{
     b2c:	b510      	push	{r4, lr}
     b2e:	0004      	movs	r4, r0
	ASSERT(descr);
     b30:	1e43      	subs	r3, r0, #1
     b32:	4198      	sbcs	r0, r3
     b34:	b2c0      	uxtb	r0, r0
     b36:	2253      	movs	r2, #83	; 0x53
     b38:	4904      	ldr	r1, [pc, #16]	; (b4c <usart_sync_enable+0x20>)
     b3a:	4b05      	ldr	r3, [pc, #20]	; (b50 <usart_sync_enable+0x24>)
     b3c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     b3e:	0020      	movs	r0, r4
     b40:	3008      	adds	r0, #8
     b42:	4b04      	ldr	r3, [pc, #16]	; (b54 <usart_sync_enable+0x28>)
     b44:	4798      	blx	r3
}
     b46:	2000      	movs	r0, #0
     b48:	bd10      	pop	{r4, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00004674 	.word	0x00004674
     b50:	00001171 	.word	0x00001171
     b54:	00001779 	.word	0x00001779

00000b58 <usart_sync_get_io_descriptor>:
{
     b58:	b570      	push	{r4, r5, r6, lr}
     b5a:	0004      	movs	r4, r0
     b5c:	000d      	movs	r5, r1
	ASSERT(descr && io);
     b5e:	2800      	cmp	r0, #0
     b60:	d00a      	beq.n	b78 <usart_sync_get_io_descriptor+0x20>
     b62:	0008      	movs	r0, r1
     b64:	1e43      	subs	r3, r0, #1
     b66:	4198      	sbcs	r0, r3
     b68:	b2c0      	uxtb	r0, r0
     b6a:	2269      	movs	r2, #105	; 0x69
     b6c:	4903      	ldr	r1, [pc, #12]	; (b7c <usart_sync_get_io_descriptor+0x24>)
     b6e:	4b04      	ldr	r3, [pc, #16]	; (b80 <usart_sync_get_io_descriptor+0x28>)
     b70:	4798      	blx	r3
	*io = &descr->io;
     b72:	602c      	str	r4, [r5, #0]
}
     b74:	2000      	movs	r0, #0
     b76:	bd70      	pop	{r4, r5, r6, pc}
     b78:	2000      	movs	r0, #0
     b7a:	e7f6      	b.n	b6a <usart_sync_get_io_descriptor+0x12>
     b7c:	00004674 	.word	0x00004674
     b80:	00001171 	.word	0x00001171

00000b84 <usart_sync_is_rx_not_empty>:
{
     b84:	b510      	push	{r4, lr}
     b86:	0004      	movs	r4, r0
	ASSERT(descr);
     b88:	1e43      	subs	r3, r0, #1
     b8a:	4198      	sbcs	r0, r3
     b8c:	b2c0      	uxtb	r0, r0
     b8e:	22d7      	movs	r2, #215	; 0xd7
     b90:	4903      	ldr	r1, [pc, #12]	; (ba0 <usart_sync_is_rx_not_empty+0x1c>)
     b92:	4b04      	ldr	r3, [pc, #16]	; (ba4 <usart_sync_is_rx_not_empty+0x20>)
     b94:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
     b96:	0020      	movs	r0, r4
     b98:	3008      	adds	r0, #8
     b9a:	4b03      	ldr	r3, [pc, #12]	; (ba8 <usart_sync_is_rx_not_empty+0x24>)
     b9c:	4798      	blx	r3
}
     b9e:	bd10      	pop	{r4, pc}
     ba0:	00004674 	.word	0x00004674
     ba4:	00001171 	.word	0x00001171
     ba8:	000017b1 	.word	0x000017b1

00000bac <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     bb0:	4b0e      	ldr	r3, [pc, #56]	; (bec <_usb_d_find_ep+0x40>)
     bb2:	785a      	ldrb	r2, [r3, #1]
     bb4:	4290      	cmp	r0, r2
     bb6:	d017      	beq.n	be8 <_usb_d_find_ep+0x3c>
     bb8:	2300      	movs	r3, #0
     bba:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     bbc:	4f0b      	ldr	r7, [pc, #44]	; (bec <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     bbe:	260f      	movs	r6, #15
     bc0:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     bc2:	003d      	movs	r5, r7
     bc4:	e008      	b.n	bd8 <_usb_d_find_ep+0x2c>
     bc6:	3001      	adds	r0, #1
     bc8:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     bca:	2804      	cmp	r0, #4
     bcc:	d00a      	beq.n	be4 <_usb_d_find_ep+0x38>
     bce:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     bd0:	18ea      	adds	r2, r5, r3
     bd2:	7852      	ldrb	r2, [r2, #1]
     bd4:	42a2      	cmp	r2, r4
     bd6:	d006      	beq.n	be6 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     bd8:	5dd9      	ldrb	r1, [r3, r7]
     bda:	2900      	cmp	r1, #0
     bdc:	d1f3      	bne.n	bc6 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     bde:	4296      	cmp	r6, r2
     be0:	d1f1      	bne.n	bc6 <_usb_d_find_ep+0x1a>
     be2:	e000      	b.n	be6 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     be4:	3805      	subs	r0, #5
}
     be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     be8:	2000      	movs	r0, #0
     bea:	e7fc      	b.n	be6 <_usb_d_find_ep+0x3a>
     bec:	20000108 	.word	0x20000108

00000bf0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     bf0:	2000      	movs	r0, #0
     bf2:	4770      	bx	lr

00000bf4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	0004      	movs	r4, r0
     bf8:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     bfa:	4b0a      	ldr	r3, [pc, #40]	; (c24 <usb_d_cb_trans_more+0x30>)
     bfc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     bfe:	0142      	lsls	r2, r0, #5
     c00:	4b09      	ldr	r3, [pc, #36]	; (c28 <usb_d_cb_trans_more+0x34>)
     c02:	189b      	adds	r3, r3, r2
     c04:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     c06:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     c08:	2a03      	cmp	r2, #3
     c0a:	d001      	beq.n	c10 <usb_d_cb_trans_more+0x1c>
}
     c0c:	0018      	movs	r0, r3
     c0e:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     c10:	0140      	lsls	r0, r0, #5
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <usb_d_cb_trans_more+0x34>)
     c14:	1818      	adds	r0, r3, r0
     c16:	6983      	ldr	r3, [r0, #24]
     c18:	0029      	movs	r1, r5
     c1a:	0020      	movs	r0, r4
     c1c:	4798      	blx	r3
     c1e:	0003      	movs	r3, r0
     c20:	e7f4      	b.n	c0c <usb_d_cb_trans_more+0x18>
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	00000bad 	.word	0x00000bad
     c28:	20000108 	.word	0x20000108

00000c2c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c2e:	b085      	sub	sp, #20
     c30:	0005      	movs	r5, r0
     c32:	000f      	movs	r7, r1
     c34:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     c36:	4b51      	ldr	r3, [pc, #324]	; (d7c <_usb_d_cb_trans_done+0x150>)
     c38:	4798      	blx	r3
     c3a:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     c3c:	2f00      	cmp	r7, #0
     c3e:	d162      	bne.n	d06 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     c40:	4b4f      	ldr	r3, [pc, #316]	; (d80 <_usb_d_cb_trans_done+0x154>)
     c42:	0142      	lsls	r2, r0, #5
     c44:	1899      	adds	r1, r3, r2
     c46:	2000      	movs	r0, #0
     c48:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     c4a:	5cd3      	ldrb	r3, [r2, r3]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d00e      	beq.n	c6e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     c50:	0162      	lsls	r2, r4, #5
     c52:	4b4b      	ldr	r3, [pc, #300]	; (d80 <_usb_d_cb_trans_done+0x154>)
     c54:	189b      	adds	r3, r3, r2
     c56:	2201      	movs	r2, #1
     c58:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     c5a:	0164      	lsls	r4, r4, #5
     c5c:	4b48      	ldr	r3, [pc, #288]	; (d80 <_usb_d_cb_trans_done+0x154>)
     c5e:	191c      	adds	r4, r3, r4
     c60:	78e1      	ldrb	r1, [r4, #3]
     c62:	69e3      	ldr	r3, [r4, #28]
     c64:	0032      	movs	r2, r6
     c66:	0028      	movs	r0, r5
     c68:	4798      	blx	r3
}
     c6a:	b005      	add	sp, #20
     c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     c6e:	788b      	ldrb	r3, [r1, #2]
     c70:	2b03      	cmp	r3, #3
     c72:	d00c      	beq.n	c8e <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     c74:	4b42      	ldr	r3, [pc, #264]	; (d80 <_usb_d_cb_trans_done+0x154>)
     c76:	0162      	lsls	r2, r4, #5
     c78:	320c      	adds	r2, #12
     c7a:	189a      	adds	r2, r3, r2
     c7c:	0164      	lsls	r4, r4, #5
     c7e:	191c      	adds	r4, r3, r4
     c80:	7860      	ldrb	r0, [r4, #1]
     c82:	2100      	movs	r1, #0
     c84:	69e3      	ldr	r3, [r4, #28]
     c86:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     c88:	2302      	movs	r3, #2
     c8a:	70a3      	strb	r3, [r4, #2]
     c8c:	e7ed      	b.n	c6a <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     c8e:	4a3c      	ldr	r2, [pc, #240]	; (d80 <_usb_d_cb_trans_done+0x154>)
     c90:	000b      	movs	r3, r1
     c92:	250c      	movs	r5, #12
     c94:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     c96:	0161      	lsls	r1, r4, #5
     c98:	310c      	adds	r1, #12
     c9a:	1852      	adds	r2, r2, r1
     c9c:	7858      	ldrb	r0, [r3, #1]
     c9e:	69db      	ldr	r3, [r3, #28]
     ca0:	2101      	movs	r1, #1
     ca2:	4798      	blx	r3
		if (err) {
     ca4:	2800      	cmp	r0, #0
     ca6:	d017      	beq.n	cd8 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     ca8:	0162      	lsls	r2, r4, #5
     caa:	4b35      	ldr	r3, [pc, #212]	; (d80 <_usb_d_cb_trans_done+0x154>)
     cac:	189b      	adds	r3, r3, r2
     cae:	2205      	movs	r2, #5
     cb0:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     cb2:	3a03      	subs	r2, #3
     cb4:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     cb6:	2d00      	cmp	r5, #0
     cb8:	db09      	blt.n	cce <_usb_d_cb_trans_done+0xa2>
     cba:	0164      	lsls	r4, r4, #5
     cbc:	4b30      	ldr	r3, [pc, #192]	; (d80 <_usb_d_cb_trans_done+0x154>)
     cbe:	191c      	adds	r4, r3, r4
     cc0:	7860      	ldrb	r0, [r4, #1]
     cc2:	2380      	movs	r3, #128	; 0x80
     cc4:	4318      	orrs	r0, r3
     cc6:	2101      	movs	r1, #1
     cc8:	4b2e      	ldr	r3, [pc, #184]	; (d84 <_usb_d_cb_trans_done+0x158>)
     cca:	4798      	blx	r3
     ccc:	e7cd      	b.n	c6a <_usb_d_cb_trans_done+0x3e>
     cce:	0164      	lsls	r4, r4, #5
     cd0:	4b2b      	ldr	r3, [pc, #172]	; (d80 <_usb_d_cb_trans_done+0x154>)
     cd2:	191c      	adds	r4, r3, r4
     cd4:	7860      	ldrb	r0, [r4, #1]
     cd6:	e7f6      	b.n	cc6 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     cd8:	0164      	lsls	r4, r4, #5
     cda:	4b29      	ldr	r3, [pc, #164]	; (d80 <_usb_d_cb_trans_done+0x154>)
     cdc:	191c      	adds	r4, r3, r4
     cde:	2304      	movs	r3, #4
     ce0:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     ce2:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     ce4:	2200      	movs	r2, #0
     ce6:	9201      	str	r2, [sp, #4]
     ce8:	9202      	str	r2, [sp, #8]
     cea:	2d00      	cmp	r5, #0
     cec:	db08      	blt.n	d00 <_usb_d_cb_trans_done+0xd4>
     cee:	3280      	adds	r2, #128	; 0x80
     cf0:	4313      	orrs	r3, r2
     cf2:	a801      	add	r0, sp, #4
     cf4:	7203      	strb	r3, [r0, #8]
     cf6:	2301      	movs	r3, #1
     cf8:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     cfa:	4b23      	ldr	r3, [pc, #140]	; (d88 <_usb_d_cb_trans_done+0x15c>)
     cfc:	4798      	blx	r3
     cfe:	e7b4      	b.n	c6a <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     d00:	220f      	movs	r2, #15
     d02:	4013      	ands	r3, r2
     d04:	e7f5      	b.n	cf2 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     d06:	2f01      	cmp	r7, #1
     d08:	d00a      	beq.n	d20 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     d0a:	2f02      	cmp	r7, #2
     d0c:	d01d      	beq.n	d4a <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     d0e:	2f03      	cmp	r7, #3
     d10:	d02c      	beq.n	d6c <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     d12:	0142      	lsls	r2, r0, #5
     d14:	4b1a      	ldr	r3, [pc, #104]	; (d80 <_usb_d_cb_trans_done+0x154>)
     d16:	189b      	adds	r3, r3, r2
     d18:	2206      	movs	r2, #6
     d1a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     d1c:	70da      	strb	r2, [r3, #3]
     d1e:	e79c      	b.n	c5a <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     d20:	4b17      	ldr	r3, [pc, #92]	; (d80 <_usb_d_cb_trans_done+0x154>)
     d22:	0142      	lsls	r2, r0, #5
     d24:	1899      	adds	r1, r3, r2
     d26:	2002      	movs	r0, #2
     d28:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d2a:	5cd3      	ldrb	r3, [r2, r3]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d005      	beq.n	d3c <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     d30:	0162      	lsls	r2, r4, #5
     d32:	4b13      	ldr	r3, [pc, #76]	; (d80 <_usb_d_cb_trans_done+0x154>)
     d34:	189b      	adds	r3, r3, r2
     d36:	2205      	movs	r2, #5
     d38:	709a      	strb	r2, [r3, #2]
     d3a:	e78e      	b.n	c5a <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     d3c:	2202      	movs	r2, #2
     d3e:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     d40:	2100      	movs	r1, #0
     d42:	0028      	movs	r0, r5
     d44:	4b0f      	ldr	r3, [pc, #60]	; (d84 <_usb_d_cb_trans_done+0x158>)
     d46:	4798      	blx	r3
     d48:	e787      	b.n	c5a <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     d4a:	4b0d      	ldr	r3, [pc, #52]	; (d80 <_usb_d_cb_trans_done+0x154>)
     d4c:	0142      	lsls	r2, r0, #5
     d4e:	1899      	adds	r1, r3, r2
     d50:	2004      	movs	r0, #4
     d52:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d54:	5cd3      	ldrb	r3, [r2, r3]
     d56:	2b00      	cmp	r3, #0
     d58:	d005      	beq.n	d66 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     d5a:	0162      	lsls	r2, r4, #5
     d5c:	4b08      	ldr	r3, [pc, #32]	; (d80 <_usb_d_cb_trans_done+0x154>)
     d5e:	189b      	adds	r3, r3, r2
     d60:	2201      	movs	r2, #1
     d62:	709a      	strb	r2, [r3, #2]
     d64:	e779      	b.n	c5a <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     d66:	2302      	movs	r3, #2
     d68:	708b      	strb	r3, [r1, #2]
			return;
     d6a:	e77e      	b.n	c6a <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     d6c:	0142      	lsls	r2, r0, #5
     d6e:	4b04      	ldr	r3, [pc, #16]	; (d80 <_usb_d_cb_trans_done+0x154>)
     d70:	189b      	adds	r3, r3, r2
     d72:	2200      	movs	r2, #0
     d74:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     d76:	3205      	adds	r2, #5
     d78:	70da      	strb	r2, [r3, #3]
     d7a:	e76e      	b.n	c5a <_usb_d_cb_trans_done+0x2e>
     d7c:	00000bad 	.word	0x00000bad
     d80:	20000108 	.word	0x20000108
     d84:	000026d1 	.word	0x000026d1
     d88:	000028a5 	.word	0x000028a5

00000d8c <usb_d_cb_trans_setup>:
{
     d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8e:	46c6      	mov	lr, r8
     d90:	b500      	push	{lr}
     d92:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     d94:	4b1d      	ldr	r3, [pc, #116]	; (e0c <usb_d_cb_trans_setup+0x80>)
     d96:	4798      	blx	r3
     d98:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     d9a:	0145      	lsls	r5, r0, #5
     d9c:	350c      	adds	r5, #12
     d9e:	4b1c      	ldr	r3, [pc, #112]	; (e10 <usb_d_cb_trans_setup+0x84>)
     da0:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     da2:	0029      	movs	r1, r5
     da4:	0020      	movs	r0, r4
     da6:	4b1b      	ldr	r3, [pc, #108]	; (e14 <usb_d_cb_trans_setup+0x88>)
     da8:	4798      	blx	r3
	if (n != 8) {
     daa:	b2c0      	uxtb	r0, r0
     dac:	2808      	cmp	r0, #8
     dae:	d00a      	beq.n	dc6 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     db0:	2101      	movs	r1, #1
     db2:	0020      	movs	r0, r4
     db4:	4d18      	ldr	r5, [pc, #96]	; (e18 <usb_d_cb_trans_setup+0x8c>)
     db6:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     db8:	2080      	movs	r0, #128	; 0x80
     dba:	4320      	orrs	r0, r4
     dbc:	2101      	movs	r1, #1
     dbe:	47a8      	blx	r5
}
     dc0:	bc04      	pop	{r2}
     dc2:	4690      	mov	r8, r2
     dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     dc6:	2100      	movs	r1, #0
     dc8:	0020      	movs	r0, r4
     dca:	4b13      	ldr	r3, [pc, #76]	; (e18 <usb_d_cb_trans_setup+0x8c>)
     dcc:	4698      	mov	r8, r3
     dce:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     dd0:	2780      	movs	r7, #128	; 0x80
     dd2:	4327      	orrs	r7, r4
     dd4:	2100      	movs	r1, #0
     dd6:	0038      	movs	r0, r7
     dd8:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     dda:	0172      	lsls	r2, r6, #5
     ddc:	4b0c      	ldr	r3, [pc, #48]	; (e10 <usb_d_cb_trans_setup+0x84>)
     dde:	189b      	adds	r3, r3, r2
     de0:	2201      	movs	r2, #1
     de2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     de4:	695b      	ldr	r3, [r3, #20]
     de6:	0029      	movs	r1, r5
     de8:	0020      	movs	r0, r4
     dea:	4798      	blx	r3
     dec:	2800      	cmp	r0, #0
     dee:	d1e7      	bne.n	dc0 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     df0:	0176      	lsls	r6, r6, #5
     df2:	4b07      	ldr	r3, [pc, #28]	; (e10 <usb_d_cb_trans_setup+0x84>)
     df4:	199e      	adds	r6, r3, r6
     df6:	2305      	movs	r3, #5
     df8:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     dfa:	2101      	movs	r1, #1
     dfc:	0020      	movs	r0, r4
     dfe:	4c06      	ldr	r4, [pc, #24]	; (e18 <usb_d_cb_trans_setup+0x8c>)
     e00:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     e02:	2101      	movs	r1, #1
     e04:	0038      	movs	r0, r7
     e06:	47a0      	blx	r4
     e08:	e7da      	b.n	dc0 <usb_d_cb_trans_setup+0x34>
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	00000bad 	.word	0x00000bad
     e10:	20000108 	.word	0x20000108
     e14:	00002835 	.word	0x00002835
     e18:	000026d1 	.word	0x000026d1

00000e1c <usb_d_init>:

int32_t usb_d_init(void)
{
     e1c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     e1e:	4b10      	ldr	r3, [pc, #64]	; (e60 <usb_d_init+0x44>)
     e20:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     e22:	2800      	cmp	r0, #0
     e24:	db1b      	blt.n	e5e <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     e26:	4c0f      	ldr	r4, [pc, #60]	; (e64 <usb_d_init+0x48>)
     e28:	2280      	movs	r2, #128	; 0x80
     e2a:	2100      	movs	r1, #0
     e2c:	0020      	movs	r0, r4
     e2e:	4b0e      	ldr	r3, [pc, #56]	; (e68 <usb_d_init+0x4c>)
     e30:	4798      	blx	r3
     e32:	0023      	movs	r3, r4
     e34:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     e36:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     e38:	4a0c      	ldr	r2, [pc, #48]	; (e6c <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     e3a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     e3c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     e3e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     e40:	61da      	str	r2, [r3, #28]
     e42:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e44:	42a3      	cmp	r3, r4
     e46:	d1f8      	bne.n	e3a <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     e48:	4909      	ldr	r1, [pc, #36]	; (e70 <usb_d_init+0x54>)
     e4a:	2000      	movs	r0, #0
     e4c:	4c09      	ldr	r4, [pc, #36]	; (e74 <usb_d_init+0x58>)
     e4e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     e50:	4909      	ldr	r1, [pc, #36]	; (e78 <usb_d_init+0x5c>)
     e52:	2001      	movs	r0, #1
     e54:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     e56:	4909      	ldr	r1, [pc, #36]	; (e7c <usb_d_init+0x60>)
     e58:	2002      	movs	r0, #2
     e5a:	47a0      	blx	r4
	return ERR_NONE;
     e5c:	2000      	movs	r0, #0
}
     e5e:	bd10      	pop	{r4, pc}
     e60:	000020b1 	.word	0x000020b1
     e64:	20000108 	.word	0x20000108
     e68:	00003db7 	.word	0x00003db7
     e6c:	00000bf1 	.word	0x00000bf1
     e70:	00000d8d 	.word	0x00000d8d
     e74:	00002add 	.word	0x00002add
     e78:	00000bf5 	.word	0x00000bf5
     e7c:	00000c2d 	.word	0x00000c2d

00000e80 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     e80:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     e82:	4b01      	ldr	r3, [pc, #4]	; (e88 <usb_d_register_callback+0x8>)
     e84:	4798      	blx	r3
}
     e86:	bd10      	pop	{r4, pc}
     e88:	00002ab9 	.word	0x00002ab9

00000e8c <usb_d_enable>:

int32_t usb_d_enable(void)
{
     e8c:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     e8e:	4b01      	ldr	r3, [pc, #4]	; (e94 <usb_d_enable+0x8>)
     e90:	4798      	blx	r3
}
     e92:	bd10      	pop	{r4, pc}
     e94:	0000218d 	.word	0x0000218d

00000e98 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     e98:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     e9a:	4b01      	ldr	r3, [pc, #4]	; (ea0 <usb_d_attach+0x8>)
     e9c:	4798      	blx	r3
}
     e9e:	bd10      	pop	{r4, pc}
     ea0:	000021dd 	.word	0x000021dd

00000ea4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     ea4:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     ea6:	4b01      	ldr	r3, [pc, #4]	; (eac <usb_d_set_address+0x8>)
     ea8:	4798      	blx	r3
}
     eaa:	bd10      	pop	{r4, pc}
     eac:	000021ed 	.word	0x000021ed

00000eb0 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eb2:	0005      	movs	r5, r0
     eb4:	000e      	movs	r6, r1
     eb6:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     eb8:	4b0f      	ldr	r3, [pc, #60]	; (ef8 <usb_d_ep_init+0x48>)
     eba:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     ebc:	2800      	cmp	r0, #0
     ebe:	da14      	bge.n	eea <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     ec0:	20ff      	movs	r0, #255	; 0xff
     ec2:	4b0d      	ldr	r3, [pc, #52]	; (ef8 <usb_d_ep_init+0x48>)
     ec4:	4798      	blx	r3
     ec6:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     ec8:	db12      	blt.n	ef0 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     eca:	003a      	movs	r2, r7
     ecc:	0031      	movs	r1, r6
     ece:	0028      	movs	r0, r5
     ed0:	4b0a      	ldr	r3, [pc, #40]	; (efc <usb_d_ep_init+0x4c>)
     ed2:	4798      	blx	r3
	if (rc < 0) {
     ed4:	2800      	cmp	r0, #0
     ed6:	db07      	blt.n	ee8 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     ed8:	4a09      	ldr	r2, [pc, #36]	; (f00 <usb_d_ep_init+0x50>)
     eda:	0164      	lsls	r4, r4, #5
     edc:	1913      	adds	r3, r2, r4
     ede:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     ee0:	2303      	movs	r3, #3
     ee2:	401e      	ands	r6, r3
     ee4:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     ee6:	2000      	movs	r0, #0
}
     ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     eea:	2014      	movs	r0, #20
     eec:	4240      	negs	r0, r0
     eee:	e7fb      	b.n	ee8 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     ef0:	2015      	movs	r0, #21
     ef2:	4240      	negs	r0, r0
     ef4:	e7f8      	b.n	ee8 <usb_d_ep_init+0x38>
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00000bad 	.word	0x00000bad
     efc:	000021fd 	.word	0x000021fd
     f00:	20000108 	.word	0x20000108

00000f04 <usb_d_ep0_init>:
{
     f04:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     f06:	b282      	uxth	r2, r0
     f08:	2100      	movs	r1, #0
     f0a:	2000      	movs	r0, #0
     f0c:	4b01      	ldr	r3, [pc, #4]	; (f14 <usb_d_ep0_init+0x10>)
     f0e:	4798      	blx	r3
}
     f10:	bd10      	pop	{r4, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00000eb1 	.word	0x00000eb1

00000f18 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     f18:	b570      	push	{r4, r5, r6, lr}
     f1a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f1c:	4b06      	ldr	r3, [pc, #24]	; (f38 <usb_d_ep_deinit+0x20>)
     f1e:	4798      	blx	r3
     f20:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     f22:	db07      	blt.n	f34 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     f24:	0028      	movs	r0, r5
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <usb_d_ep_deinit+0x24>)
     f28:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     f2a:	0164      	lsls	r4, r4, #5
     f2c:	4b04      	ldr	r3, [pc, #16]	; (f40 <usb_d_ep_deinit+0x28>)
     f2e:	191c      	adds	r4, r3, r4
     f30:	23ff      	movs	r3, #255	; 0xff
     f32:	7063      	strb	r3, [r4, #1]
}
     f34:	bd70      	pop	{r4, r5, r6, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00000bad 	.word	0x00000bad
     f3c:	00002329 	.word	0x00002329
     f40:	20000108 	.word	0x20000108

00000f44 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     f44:	b570      	push	{r4, r5, r6, lr}
     f46:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f48:	4b0e      	ldr	r3, [pc, #56]	; (f84 <usb_d_ep_enable+0x40>)
     f4a:	4798      	blx	r3
     f4c:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     f4e:	db15      	blt.n	f7c <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     f50:	0143      	lsls	r3, r0, #5
     f52:	4a0d      	ldr	r2, [pc, #52]	; (f88 <usb_d_ep_enable+0x44>)
     f54:	5c9b      	ldrb	r3, [r3, r2]
     f56:	425a      	negs	r2, r3
     f58:	4153      	adcs	r3, r2
     f5a:	3301      	adds	r3, #1
     f5c:	0141      	lsls	r1, r0, #5
     f5e:	4a0a      	ldr	r2, [pc, #40]	; (f88 <usb_d_ep_enable+0x44>)
     f60:	1852      	adds	r2, r2, r1
     f62:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     f64:	0020      	movs	r0, r4
     f66:	4b09      	ldr	r3, [pc, #36]	; (f8c <usb_d_ep_enable+0x48>)
     f68:	4798      	blx	r3
	if (rc < 0) {
     f6a:	2800      	cmp	r0, #0
     f6c:	db00      	blt.n	f70 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     f6e:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     f70:	016d      	lsls	r5, r5, #5
     f72:	4b05      	ldr	r3, [pc, #20]	; (f88 <usb_d_ep_enable+0x44>)
     f74:	195d      	adds	r5, r3, r5
     f76:	2300      	movs	r3, #0
     f78:	70ab      	strb	r3, [r5, #2]
     f7a:	e7f8      	b.n	f6e <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     f7c:	2012      	movs	r0, #18
     f7e:	4240      	negs	r0, r0
     f80:	e7f5      	b.n	f6e <usb_d_ep_enable+0x2a>
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	00000bad 	.word	0x00000bad
     f88:	20000108 	.word	0x20000108
     f8c:	000023f5 	.word	0x000023f5

00000f90 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     f90:	b5f0      	push	{r4, r5, r6, r7, lr}
     f92:	46d6      	mov	lr, sl
     f94:	464f      	mov	r7, r9
     f96:	4646      	mov	r6, r8
     f98:	b5c0      	push	{r6, r7, lr}
     f9a:	b086      	sub	sp, #24
     f9c:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     f9e:	7a07      	ldrb	r7, [r0, #8]
     fa0:	0038      	movs	r0, r7
     fa2:	4b40      	ldr	r3, [pc, #256]	; (10a4 <usb_d_ep_transfer+0x114>)
     fa4:	4798      	blx	r3
     fa6:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     fa8:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     faa:	6863      	ldr	r3, [r4, #4]
     fac:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     fae:	2800      	cmp	r0, #0
     fb0:	da00      	bge.n	fb4 <usb_d_ep_transfer+0x24>
     fb2:	e071      	b.n	1098 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     fb4:	a804      	add	r0, sp, #16
     fb6:	4b3c      	ldr	r3, [pc, #240]	; (10a8 <usb_d_ep_transfer+0x118>)
     fb8:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     fba:	016a      	lsls	r2, r5, #5
     fbc:	4b3b      	ldr	r3, [pc, #236]	; (10ac <usb_d_ep_transfer+0x11c>)
     fbe:	189b      	adds	r3, r3, r2
     fc0:	789a      	ldrb	r2, [r3, #2]
     fc2:	2317      	movs	r3, #23
     fc4:	446b      	add	r3, sp
     fc6:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	2b01      	cmp	r3, #1
     fcc:	d010      	beq.n	ff0 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     fce:	a804      	add	r0, sp, #16
     fd0:	4b37      	ldr	r3, [pc, #220]	; (10b0 <usb_d_ep_transfer+0x120>)
     fd2:	4798      	blx	r3
		switch (state) {
     fd4:	2317      	movs	r3, #23
     fd6:	446b      	add	r3, sp
     fd8:	781b      	ldrb	r3, [r3, #0]
     fda:	b2db      	uxtb	r3, r3
     fdc:	2b05      	cmp	r3, #5
     fde:	d05e      	beq.n	109e <usb_d_ep_transfer+0x10e>
     fe0:	2b06      	cmp	r3, #6
     fe2:	d023      	beq.n	102c <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     fe4:	2001      	movs	r0, #1
		switch (state) {
     fe6:	2b00      	cmp	r3, #0
     fe8:	d13c      	bne.n	1064 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     fea:	2013      	movs	r0, #19
     fec:	4240      	negs	r0, r0
     fee:	e039      	b.n	1064 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     ff0:	4b2e      	ldr	r3, [pc, #184]	; (10ac <usb_d_ep_transfer+0x11c>)
     ff2:	4699      	mov	r9, r3
     ff4:	016b      	lsls	r3, r5, #5
     ff6:	469a      	mov	sl, r3
     ff8:	464b      	mov	r3, r9
     ffa:	4453      	add	r3, sl
     ffc:	2203      	movs	r2, #3
     ffe:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1000:	a804      	add	r0, sp, #16
    1002:	4b2b      	ldr	r3, [pc, #172]	; (10b0 <usb_d_ep_transfer+0x120>)
    1004:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1006:	464b      	mov	r3, r9
    1008:	4652      	mov	r2, sl
    100a:	5cd3      	ldrb	r3, [r2, r3]
    100c:	2b00      	cmp	r3, #0
    100e:	d010      	beq.n	1032 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1010:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1012:	1e72      	subs	r2, r6, #1
    1014:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1016:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1018:	6822      	ldr	r2, [r4, #0]
    101a:	9201      	str	r2, [sp, #4]
    101c:	4642      	mov	r2, r8
    101e:	9202      	str	r2, [sp, #8]
    1020:	b27f      	sxtb	r7, r7
    1022:	2f00      	cmp	r7, #0
    1024:	db17      	blt.n	1056 <usb_d_ep_transfer+0xc6>
    1026:	220f      	movs	r2, #15
    1028:	4013      	ands	r3, r2
    102a:	e016      	b.n	105a <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    102c:	2010      	movs	r0, #16
    102e:	4240      	negs	r0, r0
    1030:	e018      	b.n	1064 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1032:	016b      	lsls	r3, r5, #5
    1034:	4a1d      	ldr	r2, [pc, #116]	; (10ac <usb_d_ep_transfer+0x11c>)
    1036:	18d2      	adds	r2, r2, r3
    1038:	7cd1      	ldrb	r1, [r2, #19]
    103a:	0209      	lsls	r1, r1, #8
    103c:	7c93      	ldrb	r3, [r2, #18]
    103e:	185b      	adds	r3, r3, r1
    1040:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    1042:	2b00      	cmp	r3, #0
    1044:	d114      	bne.n	1070 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1046:	2304      	movs	r3, #4
    1048:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    104a:	2200      	movs	r2, #0
			zlp                 = true;
    104c:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    104e:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1050:	6821      	ldr	r1, [r4, #0]
    1052:	9101      	str	r1, [sp, #4]
    1054:	9202      	str	r2, [sp, #8]
    1056:	2280      	movs	r2, #128	; 0x80
    1058:	4313      	orrs	r3, r2
    105a:	a801      	add	r0, sp, #4
    105c:	7203      	strb	r3, [r0, #8]
    105e:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1060:	4b14      	ldr	r3, [pc, #80]	; (10b4 <usb_d_ep_transfer+0x124>)
    1062:	4798      	blx	r3
	return rc;
}
    1064:	b006      	add	sp, #24
    1066:	bc1c      	pop	{r2, r3, r4}
    1068:	4690      	mov	r8, r2
    106a:	4699      	mov	r9, r3
    106c:	46a2      	mov	sl, r4
    106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1070:	4642      	mov	r2, r8
    1072:	429a      	cmp	r2, r3
    1074:	d900      	bls.n	1078 <usb_d_ep_transfer+0xe8>
    1076:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1078:	016d      	lsls	r5, r5, #5
    107a:	490c      	ldr	r1, [pc, #48]	; (10ac <usb_d_ep_transfer+0x11c>)
    107c:	194d      	adds	r5, r1, r5
			if (dir) {
    107e:	7b29      	ldrb	r1, [r5, #12]
    1080:	297f      	cmp	r1, #127	; 0x7f
    1082:	d805      	bhi.n	1090 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1084:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1086:	6821      	ldr	r1, [r4, #0]
    1088:	9101      	str	r1, [sp, #4]
    108a:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    108c:	2600      	movs	r6, #0
    108e:	e7ca      	b.n	1026 <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    1090:	429a      	cmp	r2, r3
    1092:	41b6      	sbcs	r6, r6
    1094:	4276      	negs	r6, r6
    1096:	e7da      	b.n	104e <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    1098:	2012      	movs	r0, #18
    109a:	4240      	negs	r0, r0
    109c:	e7e2      	b.n	1064 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    109e:	2002      	movs	r0, #2
    10a0:	e7e0      	b.n	1064 <usb_d_ep_transfer+0xd4>
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	00000bad 	.word	0x00000bad
    10a8:	00000709 	.word	0x00000709
    10ac:	20000108 	.word	0x20000108
    10b0:	00000717 	.word	0x00000717
    10b4:	000028a5 	.word	0x000028a5

000010b8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    10b8:	b570      	push	{r4, r5, r6, lr}
    10ba:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    10bc:	2900      	cmp	r1, #0
    10be:	d005      	beq.n	10cc <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    10c0:	2901      	cmp	r1, #1
    10c2:	d021      	beq.n	1108 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    10c4:	2102      	movs	r1, #2
    10c6:	4b13      	ldr	r3, [pc, #76]	; (1114 <usb_d_ep_halt+0x5c>)
    10c8:	4798      	blx	r3
	}
}
    10ca:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    10cc:	4b12      	ldr	r3, [pc, #72]	; (1118 <usb_d_ep_halt+0x60>)
    10ce:	4798      	blx	r3
    10d0:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    10d2:	db1c      	blt.n	110e <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    10d4:	2102      	movs	r1, #2
    10d6:	0020      	movs	r0, r4
    10d8:	4b0e      	ldr	r3, [pc, #56]	; (1114 <usb_d_ep_halt+0x5c>)
    10da:	4798      	blx	r3
    10dc:	2800      	cmp	r0, #0
    10de:	d0f4      	beq.n	10ca <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    10e0:	2100      	movs	r1, #0
    10e2:	0020      	movs	r0, r4
    10e4:	4b0b      	ldr	r3, [pc, #44]	; (1114 <usb_d_ep_halt+0x5c>)
    10e6:	4798      	blx	r3
		if (rc < 0) {
    10e8:	2800      	cmp	r0, #0
    10ea:	dbee      	blt.n	10ca <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    10ec:	016d      	lsls	r5, r5, #5
    10ee:	4b0b      	ldr	r3, [pc, #44]	; (111c <usb_d_ep_halt+0x64>)
    10f0:	195d      	adds	r5, r3, r5
    10f2:	2301      	movs	r3, #1
    10f4:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    10f6:	3302      	adds	r3, #2
    10f8:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    10fa:	69eb      	ldr	r3, [r5, #28]
    10fc:	2200      	movs	r2, #0
    10fe:	2103      	movs	r1, #3
    1100:	0020      	movs	r0, r4
    1102:	4798      	blx	r3
	return ERR_NONE;
    1104:	2000      	movs	r0, #0
    1106:	e7e0      	b.n	10ca <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1108:	4b02      	ldr	r3, [pc, #8]	; (1114 <usb_d_ep_halt+0x5c>)
    110a:	4798      	blx	r3
    110c:	e7dd      	b.n	10ca <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    110e:	2012      	movs	r0, #18
    1110:	4240      	negs	r0, r0
    1112:	e7da      	b.n	10ca <usb_d_ep_halt+0x12>
    1114:	000026d1 	.word	0x000026d1
    1118:	00000bad 	.word	0x00000bad
    111c:	20000108 	.word	0x20000108

00001120 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1120:	b570      	push	{r4, r5, r6, lr}
    1122:	000d      	movs	r5, r1
    1124:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1126:	4b0f      	ldr	r3, [pc, #60]	; (1164 <usb_d_ep_register_callback+0x44>)
    1128:	4798      	blx	r3
    112a:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    112c:	1e22      	subs	r2, r4, #0
    112e:	d008      	beq.n	1142 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1130:	2b00      	cmp	r3, #0
    1132:	db05      	blt.n	1140 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    1134:	2d01      	cmp	r5, #1
    1136:	d00b      	beq.n	1150 <usb_d_ep_register_callback+0x30>
    1138:	2d00      	cmp	r5, #0
    113a:	d004      	beq.n	1146 <usb_d_ep_register_callback+0x26>
    113c:	2d02      	cmp	r5, #2
    113e:	d00c      	beq.n	115a <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    1140:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1142:	4a09      	ldr	r2, [pc, #36]	; (1168 <usb_d_ep_register_callback+0x48>)
    1144:	e7f4      	b.n	1130 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1146:	0140      	lsls	r0, r0, #5
    1148:	4b08      	ldr	r3, [pc, #32]	; (116c <usb_d_ep_register_callback+0x4c>)
    114a:	1818      	adds	r0, r3, r0
    114c:	6142      	str	r2, [r0, #20]
		break;
    114e:	e7f7      	b.n	1140 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1150:	0140      	lsls	r0, r0, #5
    1152:	4b06      	ldr	r3, [pc, #24]	; (116c <usb_d_ep_register_callback+0x4c>)
    1154:	1818      	adds	r0, r3, r0
    1156:	6182      	str	r2, [r0, #24]
		break;
    1158:	e7f2      	b.n	1140 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    115a:	0140      	lsls	r0, r0, #5
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <usb_d_ep_register_callback+0x4c>)
    115e:	1818      	adds	r0, r3, r0
    1160:	61c2      	str	r2, [r0, #28]
		break;
    1162:	e7ed      	b.n	1140 <usb_d_ep_register_callback+0x20>
    1164:	00000bad 	.word	0x00000bad
    1168:	00000bf1 	.word	0x00000bf1
    116c:	20000108 	.word	0x20000108

00001170 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1170:	2800      	cmp	r0, #0
    1172:	d100      	bne.n	1176 <assert+0x6>
		__asm("BKPT #0");
    1174:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1176:	4770      	bx	lr

00001178 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1178:	6803      	ldr	r3, [r0, #0]
    117a:	2b00      	cmp	r3, #0
    117c:	d00a      	beq.n	1194 <is_list_element+0x1c>
		if (it == element) {
    117e:	428b      	cmp	r3, r1
    1180:	d00a      	beq.n	1198 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	2b00      	cmp	r3, #0
    1186:	d003      	beq.n	1190 <is_list_element+0x18>
		if (it == element) {
    1188:	4299      	cmp	r1, r3
    118a:	d1fa      	bne.n	1182 <is_list_element+0xa>
			return true;
    118c:	2001      	movs	r0, #1
    118e:	e000      	b.n	1192 <is_list_element+0x1a>
		}
	}

	return false;
    1190:	2000      	movs	r0, #0
}
    1192:	4770      	bx	lr
	return false;
    1194:	2000      	movs	r0, #0
    1196:	e7fc      	b.n	1192 <is_list_element+0x1a>
			return true;
    1198:	2001      	movs	r0, #1
    119a:	e7fa      	b.n	1192 <is_list_element+0x1a>

0000119c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    119c:	b570      	push	{r4, r5, r6, lr}
    119e:	0004      	movs	r4, r0
    11a0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <list_insert_as_head+0x20>)
    11a4:	4798      	blx	r3
    11a6:	2301      	movs	r3, #1
    11a8:	4058      	eors	r0, r3
    11aa:	b2c0      	uxtb	r0, r0
    11ac:	2239      	movs	r2, #57	; 0x39
    11ae:	4904      	ldr	r1, [pc, #16]	; (11c0 <list_insert_as_head+0x24>)
    11b0:	4b04      	ldr	r3, [pc, #16]	; (11c4 <list_insert_as_head+0x28>)
    11b2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    11b4:	6823      	ldr	r3, [r4, #0]
    11b6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    11b8:	6025      	str	r5, [r4, #0]
}
    11ba:	bd70      	pop	{r4, r5, r6, pc}
    11bc:	00001179 	.word	0x00001179
    11c0:	00004690 	.word	0x00004690
    11c4:	00001171 	.word	0x00001171

000011c8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    11c8:	6803      	ldr	r3, [r0, #0]
    11ca:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    11cc:	6001      	str	r1, [r0, #0]
}
    11ce:	4770      	bx	lr

000011d0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    11d0:	b570      	push	{r4, r5, r6, lr}
    11d2:	0005      	movs	r5, r0
    11d4:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    11d6:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    11d8:	4b0a      	ldr	r3, [pc, #40]	; (1204 <list_insert_at_end+0x34>)
    11da:	4798      	blx	r3
    11dc:	2301      	movs	r3, #1
    11de:	4058      	eors	r0, r3
    11e0:	b2c0      	uxtb	r0, r0
    11e2:	224f      	movs	r2, #79	; 0x4f
    11e4:	4908      	ldr	r1, [pc, #32]	; (1208 <list_insert_at_end+0x38>)
    11e6:	4b09      	ldr	r3, [pc, #36]	; (120c <list_insert_at_end+0x3c>)
    11e8:	4798      	blx	r3

	if (!list->head) {
    11ea:	682b      	ldr	r3, [r5, #0]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d103      	bne.n	11f8 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    11f0:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    11f2:	6033      	str	r3, [r6, #0]
		return;
    11f4:	e005      	b.n	1202 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    11f6:	001c      	movs	r4, r3
	while (it->next) {
    11f8:	6823      	ldr	r3, [r4, #0]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d1fb      	bne.n	11f6 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    11fe:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1200:	6033      	str	r3, [r6, #0]
}
    1202:	bd70      	pop	{r4, r5, r6, pc}
    1204:	00001179 	.word	0x00001179
    1208:	00004690 	.word	0x00004690
    120c:	00001171 	.word	0x00001171

00001210 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1210:	6803      	ldr	r3, [r0, #0]
    1212:	2b00      	cmp	r3, #0
    1214:	d001      	beq.n	121a <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1216:	681a      	ldr	r2, [r3, #0]
    1218:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    121a:	0018      	movs	r0, r3
    121c:	4770      	bx	lr
	...

00001220 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1220:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1222:	4a06      	ldr	r2, [pc, #24]	; (123c <_sbrk+0x1c>)
    1224:	6812      	ldr	r2, [r2, #0]
    1226:	2a00      	cmp	r2, #0
    1228:	d004      	beq.n	1234 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    122a:	4a04      	ldr	r2, [pc, #16]	; (123c <_sbrk+0x1c>)
    122c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    122e:	18c3      	adds	r3, r0, r3
    1230:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1232:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1234:	4902      	ldr	r1, [pc, #8]	; (1240 <_sbrk+0x20>)
    1236:	4a01      	ldr	r2, [pc, #4]	; (123c <_sbrk+0x1c>)
    1238:	6011      	str	r1, [r2, #0]
    123a:	e7f6      	b.n	122a <_sbrk+0xa>
    123c:	20000188 	.word	0x20000188
    1240:	200024a0 	.word	0x200024a0

00001244 <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
    1244:	2000      	movs	r0, #0
    1246:	4770      	bx	lr

00001248 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1248:	b570      	push	{r4, r5, r6, lr}
    124a:	0004      	movs	r4, r0
    124c:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    124e:	4b39      	ldr	r3, [pc, #228]	; (1334 <_adc_init+0xec>)
    1250:	18c0      	adds	r0, r0, r3
    1252:	4242      	negs	r2, r0
    1254:	4142      	adcs	r2, r0
    1256:	b2d0      	uxtb	r0, r2
    1258:	2294      	movs	r2, #148	; 0x94
    125a:	4937      	ldr	r1, [pc, #220]	; (1338 <_adc_init+0xf0>)
    125c:	4b37      	ldr	r3, [pc, #220]	; (133c <_adc_init+0xf4>)
    125e:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    1260:	4b37      	ldr	r3, [pc, #220]	; (1340 <_adc_init+0xf8>)
    1262:	681a      	ldr	r2, [r3, #0]
    1264:	0152      	lsls	r2, r2, #5
    1266:	23e0      	movs	r3, #224	; 0xe0
    1268:	00db      	lsls	r3, r3, #3
    126a:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
    126c:	4b35      	ldr	r3, [pc, #212]	; (1344 <_adc_init+0xfc>)
    126e:	6859      	ldr	r1, [r3, #4]
    1270:	0149      	lsls	r1, r1, #5
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	0edb      	lsrs	r3, r3, #27
    1276:	430b      	orrs	r3, r1
    1278:	21ff      	movs	r1, #255	; 0xff
    127a:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    127c:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    127e:	7e63      	ldrb	r3, [r4, #25]
    1280:	09db      	lsrs	r3, r3, #7
    1282:	d1fc      	bne.n	127e <_adc_init+0x36>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
    1284:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1286:	079b      	lsls	r3, r3, #30
    1288:	d504      	bpl.n	1294 <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    128a:	2300      	movs	r3, #0
    128c:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    128e:	7e63      	ldrb	r3, [r4, #25]
    1290:	09db      	lsrs	r3, r3, #7
    1292:	d1fc      	bne.n	128e <_adc_init+0x46>
	((Adc *)hw)->CTRLA.reg = data;
    1294:	2301      	movs	r3, #1
    1296:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1298:	7e63      	ldrb	r3, [r4, #25]
    129a:	09db      	lsrs	r3, r3, #7
    129c:	d1fc      	bne.n	1298 <_adc_init+0x50>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    129e:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    12a0:	00ea      	lsls	r2, r5, #3
    12a2:	1b52      	subs	r2, r2, r5
    12a4:	0092      	lsls	r2, r2, #2
    12a6:	4b28      	ldr	r3, [pc, #160]	; (1348 <_adc_init+0x100>)
    12a8:	189b      	adds	r3, r3, r2
    12aa:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
    12ac:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    12ae:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
    12b0:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    12b2:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
    12b4:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    12b6:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
    12b8:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    12ba:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
    12bc:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    12be:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
    12c0:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    12c2:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    12c4:	222a      	movs	r2, #42	; 0x2a
    12c6:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    12c8:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
    12ca:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    12cc:	7e63      	ldrb	r3, [r4, #25]
    12ce:	09db      	lsrs	r3, r3, #7
    12d0:	d1fc      	bne.n	12cc <_adc_init+0x84>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    12d2:	00eb      	lsls	r3, r5, #3
    12d4:	1b5b      	subs	r3, r3, r5
    12d6:	009b      	lsls	r3, r3, #2
    12d8:	4a1b      	ldr	r2, [pc, #108]	; (1348 <_adc_init+0x100>)
    12da:	18d3      	adds	r3, r2, r3
    12dc:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
    12de:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    12e0:	7e63      	ldrb	r3, [r4, #25]
    12e2:	09db      	lsrs	r3, r3, #7
    12e4:	d1fc      	bne.n	12e0 <_adc_init+0x98>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    12e6:	00eb      	lsls	r3, r5, #3
    12e8:	1b5b      	subs	r3, r3, r5
    12ea:	009b      	lsls	r3, r3, #2
    12ec:	4a16      	ldr	r2, [pc, #88]	; (1348 <_adc_init+0x100>)
    12ee:	18d3      	adds	r3, r2, r3
    12f0:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
    12f2:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    12f4:	7e63      	ldrb	r3, [r4, #25]
    12f6:	09db      	lsrs	r3, r3, #7
    12f8:	d1fc      	bne.n	12f4 <_adc_init+0xac>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    12fa:	00eb      	lsls	r3, r5, #3
    12fc:	1b5b      	subs	r3, r3, r5
    12fe:	009b      	lsls	r3, r3, #2
    1300:	4a11      	ldr	r2, [pc, #68]	; (1348 <_adc_init+0x100>)
    1302:	18d3      	adds	r3, r2, r3
    1304:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
    1306:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1308:	7e63      	ldrb	r3, [r4, #25]
    130a:	09db      	lsrs	r3, r3, #7
    130c:	d1fc      	bne.n	1308 <_adc_init+0xc0>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    130e:	00eb      	lsls	r3, r5, #3
    1310:	1b5b      	subs	r3, r3, r5
    1312:	009b      	lsls	r3, r3, #2
    1314:	4a0c      	ldr	r2, [pc, #48]	; (1348 <_adc_init+0x100>)
    1316:	18d3      	adds	r3, r2, r3
    1318:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
    131a:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    131c:	7e63      	ldrb	r3, [r4, #25]
    131e:	09db      	lsrs	r3, r3, #7
    1320:	d1fc      	bne.n	131c <_adc_init+0xd4>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1322:	00eb      	lsls	r3, r5, #3
    1324:	1b5d      	subs	r5, r3, r5
    1326:	00ad      	lsls	r5, r5, #2
    1328:	4b07      	ldr	r3, [pc, #28]	; (1348 <_adc_init+0x100>)
    132a:	195d      	adds	r5, r3, r5
    132c:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    132e:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
    1330:	2000      	movs	r0, #0
    1332:	bd70      	pop	{r4, r5, r6, pc}
    1334:	bdffc000 	.word	0xbdffc000
    1338:	000046cc 	.word	0x000046cc
    133c:	00001171 	.word	0x00001171
    1340:	00806024 	.word	0x00806024
    1344:	00806020 	.word	0x00806020
    1348:	000046b0 	.word	0x000046b0

0000134c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    134c:	b570      	push	{r4, r5, r6, lr}
    134e:	0005      	movs	r5, r0
    1350:	000c      	movs	r4, r1
	ASSERT(device);
    1352:	1e43      	subs	r3, r0, #1
    1354:	4198      	sbcs	r0, r3
    1356:	b2c0      	uxtb	r0, r0
    1358:	22c5      	movs	r2, #197	; 0xc5
    135a:	4906      	ldr	r1, [pc, #24]	; (1374 <_adc_sync_init+0x28>)
    135c:	4b06      	ldr	r3, [pc, #24]	; (1378 <_adc_sync_init+0x2c>)
    135e:	4798      	blx	r3

	device->hw = hw;
    1360:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1362:	0020      	movs	r0, r4
    1364:	4b05      	ldr	r3, [pc, #20]	; (137c <_adc_sync_init+0x30>)
    1366:	4798      	blx	r3
    1368:	0001      	movs	r1, r0
    136a:	0020      	movs	r0, r4
    136c:	4b04      	ldr	r3, [pc, #16]	; (1380 <_adc_sync_init+0x34>)
    136e:	4798      	blx	r3
}
    1370:	bd70      	pop	{r4, r5, r6, pc}
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	000046cc 	.word	0x000046cc
    1378:	00001171 	.word	0x00001171
    137c:	00001245 	.word	0x00001245
    1380:	00001249 	.word	0x00001249

00001384 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    1384:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1386:	7813      	ldrb	r3, [r2, #0]
    1388:	2102      	movs	r1, #2
    138a:	430b      	orrs	r3, r1
    138c:	7013      	strb	r3, [r2, #0]
}
    138e:	4770      	bx	lr

00001390 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1390:	6802      	ldr	r2, [r0, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1392:	7e53      	ldrb	r3, [r2, #25]
    1394:	09db      	lsrs	r3, r3, #7
    1396:	d1fc      	bne.n	1392 <_adc_sync_get_data_size+0x2>
	tmp = ((Adc *)hw)->CTRLB.reg;
    1398:	8890      	ldrh	r0, [r2, #4]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    139a:	0680      	lsls	r0, r0, #26
    139c:	0f80      	lsrs	r0, r0, #30
    139e:	3803      	subs	r0, #3
    13a0:	1e43      	subs	r3, r0, #1
    13a2:	4198      	sbcs	r0, r3
    13a4:	3001      	adds	r0, #1
}
    13a6:	4770      	bx	lr

000013a8 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    13a8:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    13aa:	7e18      	ldrb	r0, [r3, #24]
    13ac:	2301      	movs	r3, #1
    13ae:	4018      	ands	r0, r3
}
    13b0:	4770      	bx	lr

000013b2 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    13b2:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    13b4:	7b13      	ldrb	r3, [r2, #12]
    13b6:	2102      	movs	r1, #2
    13b8:	430b      	orrs	r3, r1
    13ba:	7313      	strb	r3, [r2, #12]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    13bc:	7e53      	ldrb	r3, [r2, #25]
    13be:	09db      	lsrs	r3, r3, #7
    13c0:	d1fc      	bne.n	13bc <_adc_sync_convert+0xa>
}
    13c2:	4770      	bx	lr

000013c4 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    13c4:	6802      	ldr	r2, [r0, #0]
    13c6:	7e53      	ldrb	r3, [r2, #25]
    13c8:	09db      	lsrs	r3, r3, #7
    13ca:	d1fc      	bne.n	13c6 <_adc_sync_read_channel_data+0x2>
	return ((Adc *)hw)->RESULT.reg;
    13cc:	8b50      	ldrh	r0, [r2, #26]
    13ce:	b280      	uxth	r0, r0
}
    13d0:	4770      	bx	lr
	...

000013d4 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    13d4:	4b01      	ldr	r3, [pc, #4]	; (13dc <_get_cycles_for_ms+0x8>)
    13d6:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    13d8:	4770      	bx	lr
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	0000bb80 	.word	0x0000bb80

000013e0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    13e0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    13e2:	4b07      	ldr	r3, [pc, #28]	; (1400 <_init_chip+0x20>)
    13e4:	685a      	ldr	r2, [r3, #4]
    13e6:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <_init_chip+0x24>)
    13ea:	4798      	blx	r3
	_sysctrl_init_sources();
    13ec:	4b06      	ldr	r3, [pc, #24]	; (1408 <_init_chip+0x28>)
    13ee:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    13f0:	2002      	movs	r0, #2
    13f2:	4c06      	ldr	r4, [pc, #24]	; (140c <_init_chip+0x2c>)
    13f4:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <_init_chip+0x30>)
    13f8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    13fa:	20fd      	movs	r0, #253	; 0xfd
    13fc:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    13fe:	bd10      	pop	{r4, pc}
    1400:	41004000 	.word	0x41004000
    1404:	0000160d 	.word	0x0000160d
    1408:	000017bd 	.word	0x000017bd
    140c:	000015b1 	.word	0x000015b1
    1410:	000017e9 	.word	0x000017e9

00001414 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    1414:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    1416:	2000      	movs	r0, #0
    1418:	4770      	bx	lr
	...

0000141c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    141c:	4a20      	ldr	r2, [pc, #128]	; (14a0 <_ext_irq_init+0x84>)
    141e:	7853      	ldrb	r3, [r2, #1]
    1420:	09db      	lsrs	r3, r3, #7
    1422:	d1fc      	bne.n	141e <_ext_irq_init+0x2>
    1424:	4a1e      	ldr	r2, [pc, #120]	; (14a0 <_ext_irq_init+0x84>)
    1426:	7853      	ldrb	r3, [r2, #1]
    1428:	09db      	lsrs	r3, r3, #7
    142a:	d1fc      	bne.n	1426 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    142c:	4b1c      	ldr	r3, [pc, #112]	; (14a0 <_ext_irq_init+0x84>)
    142e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1430:	079b      	lsls	r3, r3, #30
    1432:	d50a      	bpl.n	144a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1434:	2200      	movs	r2, #0
    1436:	4b1a      	ldr	r3, [pc, #104]	; (14a0 <_ext_irq_init+0x84>)
    1438:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    143a:	001a      	movs	r2, r3
    143c:	7853      	ldrb	r3, [r2, #1]
    143e:	09db      	lsrs	r3, r3, #7
    1440:	d1fc      	bne.n	143c <_ext_irq_init+0x20>
    1442:	4a17      	ldr	r2, [pc, #92]	; (14a0 <_ext_irq_init+0x84>)
    1444:	7853      	ldrb	r3, [r2, #1]
    1446:	09db      	lsrs	r3, r3, #7
    1448:	d1fc      	bne.n	1444 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
    144a:	2201      	movs	r2, #1
    144c:	4b14      	ldr	r3, [pc, #80]	; (14a0 <_ext_irq_init+0x84>)
    144e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1450:	001a      	movs	r2, r3
    1452:	7853      	ldrb	r3, [r2, #1]
    1454:	09db      	lsrs	r3, r3, #7
    1456:	d1fc      	bne.n	1452 <_ext_irq_init+0x36>
    1458:	4a11      	ldr	r2, [pc, #68]	; (14a0 <_ext_irq_init+0x84>)
    145a:	7853      	ldrb	r3, [r2, #1]
    145c:	09db      	lsrs	r3, r3, #7
    145e:	d1fc      	bne.n	145a <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1460:	4b0f      	ldr	r3, [pc, #60]	; (14a0 <_ext_irq_init+0x84>)
    1462:	2200      	movs	r2, #0
    1464:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1466:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1468:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    146a:	619a      	str	r2, [r3, #24]
    146c:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    146e:	781a      	ldrb	r2, [r3, #0]
    1470:	2102      	movs	r1, #2
    1472:	430a      	orrs	r2, r1
    1474:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1476:	001a      	movs	r2, r3
    1478:	7853      	ldrb	r3, [r2, #1]
    147a:	09db      	lsrs	r3, r3, #7
    147c:	d1fc      	bne.n	1478 <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    147e:	4b09      	ldr	r3, [pc, #36]	; (14a4 <_ext_irq_init+0x88>)
    1480:	2210      	movs	r2, #16
    1482:	2180      	movs	r1, #128	; 0x80
    1484:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1486:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    148a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    148e:	3101      	adds	r1, #1
    1490:	31ff      	adds	r1, #255	; 0xff
    1492:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1494:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1496:	4b04      	ldr	r3, [pc, #16]	; (14a8 <_ext_irq_init+0x8c>)
    1498:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    149a:	2000      	movs	r0, #0
    149c:	4770      	bx	lr
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	40001800 	.word	0x40001800
    14a4:	e000e100 	.word	0xe000e100
    14a8:	2000018c 	.word	0x2000018c

000014ac <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    14ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ae:	46d6      	mov	lr, sl
    14b0:	4647      	mov	r7, r8
    14b2:	b580      	push	{r7, lr}
    14b4:	b085      	sub	sp, #20
	return ((Eic *)hw)->INTFLAG.reg;
    14b6:	4b29      	ldr	r3, [pc, #164]	; (155c <EIC_Handler+0xb0>)
    14b8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    14ba:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    14bc:	400a      	ands	r2, r1
    14be:	9203      	str	r2, [sp, #12]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    14c0:	9a03      	ldr	r2, [sp, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    14c2:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    14c4:	4b26      	ldr	r3, [pc, #152]	; (1560 <EIC_Handler+0xb4>)
    14c6:	6818      	ldr	r0, [r3, #0]
    14c8:	1e43      	subs	r3, r0, #1
    14ca:	4198      	sbcs	r0, r3
    14cc:	b2c0      	uxtb	r0, r0
    14ce:	22d2      	movs	r2, #210	; 0xd2
    14d0:	4924      	ldr	r1, [pc, #144]	; (1564 <EIC_Handler+0xb8>)
    14d2:	4b25      	ldr	r3, [pc, #148]	; (1568 <EIC_Handler+0xbc>)
    14d4:	4798      	blx	r3

	while (flags) {
    14d6:	9b03      	ldr	r3, [sp, #12]
    14d8:	2b00      	cmp	r3, #0
    14da:	d039      	beq.n	1550 <EIC_Handler+0xa4>
		pos = ffs(flags) - 1;
    14dc:	4b23      	ldr	r3, [pc, #140]	; (156c <EIC_Handler+0xc0>)
    14de:	469a      	mov	sl, r3
		while (-1 != pos) {
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
    14e0:	24ff      	movs	r4, #255	; 0xff
    14e2:	4f23      	ldr	r7, [pc, #140]	; (1570 <EIC_Handler+0xc4>)
    14e4:	9401      	str	r4, [sp, #4]

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}
			flags &= ~(1ul << pos);
			pos = ffs(flags) - 1;
    14e6:	4698      	mov	r8, r3
    14e8:	e02a      	b.n	1540 <EIC_Handler+0x94>
					upper = middle - 1;
    14ea:	3e01      	subs	r6, #1
    14ec:	b2f1      	uxtb	r1, r6
			while (upper >= lower) {
    14ee:	428a      	cmp	r2, r1
    14f0:	d80c      	bhi.n	150c <EIC_Handler+0x60>
				middle = (upper + lower) >> 1;
    14f2:	188b      	adds	r3, r1, r2
    14f4:	105b      	asrs	r3, r3, #1
    14f6:	b2de      	uxtb	r6, r3
				if (_map[middle].extint == pos) {
    14f8:	4023      	ands	r3, r4
    14fa:	00db      	lsls	r3, r3, #3
    14fc:	5ddb      	ldrb	r3, [r3, r7]
    14fe:	4283      	cmp	r3, r0
    1500:	d004      	beq.n	150c <EIC_Handler+0x60>
				if (_map[middle].extint < pos) {
    1502:	4298      	cmp	r0, r3
    1504:	ddf1      	ble.n	14ea <EIC_Handler+0x3e>
					lower = middle + 1;
    1506:	3601      	adds	r6, #1
    1508:	b2f2      	uxtb	r2, r6
    150a:	e7f0      	b.n	14ee <EIC_Handler+0x42>
			flags &= ~(1ul << pos);
    150c:	9b03      	ldr	r3, [sp, #12]
    150e:	002a      	movs	r2, r5
    1510:	4082      	lsls	r2, r0
    1512:	4393      	bics	r3, r2
    1514:	9303      	str	r3, [sp, #12]
			pos = ffs(flags) - 1;
    1516:	9803      	ldr	r0, [sp, #12]
    1518:	47c0      	blx	r8
    151a:	3801      	subs	r0, #1
    151c:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    151e:	1c43      	adds	r3, r0, #1
    1520:	d004      	beq.n	152c <EIC_Handler+0x80>
				if (_map[middle].extint == pos) {
    1522:	9b01      	ldr	r3, [sp, #4]
    1524:	2600      	movs	r6, #0
    1526:	2100      	movs	r1, #0
    1528:	2200      	movs	r2, #0
    152a:	e7ea      	b.n	1502 <EIC_Handler+0x56>
	return ((Eic *)hw)->INTFLAG.reg;
    152c:	4b0b      	ldr	r3, [pc, #44]	; (155c <EIC_Handler+0xb0>)
    152e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1530:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1532:	400a      	ands	r2, r1
    1534:	9203      	str	r2, [sp, #12]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1536:	9a03      	ldr	r2, [sp, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1538:	611a      	str	r2, [r3, #16]
	while (flags) {
    153a:	9b03      	ldr	r3, [sp, #12]
    153c:	2b00      	cmp	r3, #0
    153e:	d007      	beq.n	1550 <EIC_Handler+0xa4>
		pos = ffs(flags) - 1;
    1540:	9803      	ldr	r0, [sp, #12]
    1542:	47d0      	blx	sl
    1544:	3801      	subs	r0, #1
    1546:	b240      	sxtb	r0, r0
			flags &= ~(1ul << pos);
    1548:	2501      	movs	r5, #1
		while (-1 != pos) {
    154a:	1c43      	adds	r3, r0, #1
    154c:	d1e9      	bne.n	1522 <EIC_Handler+0x76>
    154e:	e7ed      	b.n	152c <EIC_Handler+0x80>
	}
}
    1550:	b005      	add	sp, #20
    1552:	bc0c      	pop	{r2, r3}
    1554:	4690      	mov	r8, r2
    1556:	469a      	mov	sl, r3
    1558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	40001800 	.word	0x40001800
    1560:	2000018c 	.word	0x2000018c
    1564:	000046ec 	.word	0x000046ec
    1568:	00001171 	.word	0x00001171
    156c:	00003d09 	.word	0x00003d09
    1570:	000046e4 	.word	0x000046e4

00001574 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1574:	4b0c      	ldr	r3, [pc, #48]	; (15a8 <_event_system_init+0x34>)
    1576:	0018      	movs	r0, r3
    1578:	303a      	adds	r0, #58	; 0x3a
}

static inline void hri_evsys_write_USER_reg(const void *const hw, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER.reg = data;
    157a:	490c      	ldr	r1, [pc, #48]	; (15ac <_event_system_init+0x38>)
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, user_mux_confs[i]);
    157c:	881a      	ldrh	r2, [r3, #0]
    157e:	810a      	strh	r2, [r1, #8]
    1580:	3302      	adds	r3, #2
	for (i = 0; i < EVSYS_USERS; i++) {
    1582:	4283      	cmp	r3, r0
    1584:	d1fa      	bne.n	157c <_event_system_init+0x8>
    1586:	4908      	ldr	r1, [pc, #32]	; (15a8 <_event_system_init+0x34>)
    1588:	000b      	movs	r3, r1
    158a:	333c      	adds	r3, #60	; 0x3c
    158c:	316c      	adds	r1, #108	; 0x6c
	((Evsys *)hw)->CHANNEL.reg = data;
    158e:	4807      	ldr	r0, [pc, #28]	; (15ac <_event_system_init+0x38>)
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, channel_confs[i]);
    1590:	cb04      	ldmia	r3!, {r2}
    1592:	6042      	str	r2, [r0, #4]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1594:	428b      	cmp	r3, r1
    1596:	d1fb      	bne.n	1590 <_event_system_init+0x1c>
	((Evsys *)hw)->INTENSET.reg = data;
    1598:	4b04      	ldr	r3, [pc, #16]	; (15ac <_event_system_init+0x38>)
    159a:	2200      	movs	r2, #0
    159c:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    159e:	3a01      	subs	r2, #1
    15a0:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    15a2:	2000      	movs	r0, #0
    15a4:	4770      	bx	lr
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00004704 	.word	0x00004704
    15ac:	42000400 	.word	0x42000400

000015b0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    15b0:	07c3      	lsls	r3, r0, #31
    15b2:	d509      	bpl.n	15c8 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    15b4:	4b10      	ldr	r3, [pc, #64]	; (15f8 <_gclk_init_generators_by_fref+0x48>)
    15b6:	2280      	movs	r2, #128	; 0x80
    15b8:	0052      	lsls	r2, r2, #1
    15ba:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    15bc:	4a0f      	ldr	r2, [pc, #60]	; (15fc <_gclk_init_generators_by_fref+0x4c>)
    15be:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15c0:	001a      	movs	r2, r3
    15c2:	7853      	ldrb	r3, [r2, #1]
    15c4:	09db      	lsrs	r3, r3, #7
    15c6:	d1fc      	bne.n	15c2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    15c8:	0783      	lsls	r3, r0, #30
    15ca:	d509      	bpl.n	15e0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    15cc:	4b0a      	ldr	r3, [pc, #40]	; (15f8 <_gclk_init_generators_by_fref+0x48>)
    15ce:	2202      	movs	r2, #2
    15d0:	32ff      	adds	r2, #255	; 0xff
    15d2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    15d4:	4a0a      	ldr	r2, [pc, #40]	; (1600 <_gclk_init_generators_by_fref+0x50>)
    15d6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15d8:	001a      	movs	r2, r3
    15da:	7853      	ldrb	r3, [r2, #1]
    15dc:	09db      	lsrs	r3, r3, #7
    15de:	d1fc      	bne.n	15da <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    15e0:	0743      	lsls	r3, r0, #29
    15e2:	d508      	bpl.n	15f6 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    15e4:	4b04      	ldr	r3, [pc, #16]	; (15f8 <_gclk_init_generators_by_fref+0x48>)
    15e6:	4a07      	ldr	r2, [pc, #28]	; (1604 <_gclk_init_generators_by_fref+0x54>)
    15e8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    15ea:	4a07      	ldr	r2, [pc, #28]	; (1608 <_gclk_init_generators_by_fref+0x58>)
    15ec:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15ee:	001a      	movs	r2, r3
    15f0:	7853      	ldrb	r3, [r2, #1]
    15f2:	09db      	lsrs	r3, r3, #7
    15f4:	d1fc      	bne.n	15f0 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    15f6:	4770      	bx	lr
    15f8:	40000c00 	.word	0x40000c00
    15fc:	00090700 	.word	0x00090700
    1600:	00090501 	.word	0x00090501
    1604:	00001802 	.word	0x00001802
    1608:	00090702 	.word	0x00090702

0000160c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    160c:	4b06      	ldr	r3, [pc, #24]	; (1628 <_pm_init+0x1c>)
    160e:	7a1a      	ldrb	r2, [r3, #8]
    1610:	b2d2      	uxtb	r2, r2
    1612:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1614:	7a5a      	ldrb	r2, [r3, #9]
    1616:	b2d2      	uxtb	r2, r2
    1618:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    161a:	7a9a      	ldrb	r2, [r3, #10]
    161c:	b2d2      	uxtb	r2, r2
    161e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1620:	7ada      	ldrb	r2, [r3, #11]
    1622:	b2d2      	uxtb	r2, r2
    1624:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1626:	4770      	bx	lr
    1628:	40000400 	.word	0x40000400

0000162c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    162c:	b570      	push	{r4, r5, r6, lr}
    162e:	0004      	movs	r4, r0
    1630:	000d      	movs	r5, r1
	ASSERT(dev);
    1632:	1e43      	subs	r3, r0, #1
    1634:	4198      	sbcs	r0, r3
    1636:	b2c0      	uxtb	r0, r0
    1638:	2233      	movs	r2, #51	; 0x33
    163a:	4910      	ldr	r1, [pc, #64]	; (167c <_timer_init+0x50>)
    163c:	4b10      	ldr	r3, [pc, #64]	; (1680 <_timer_init+0x54>)
    163e:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
    1640:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    1642:	2301      	movs	r3, #1
    1644:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1646:	7aab      	ldrb	r3, [r5, #10]
    1648:	09db      	lsrs	r3, r3, #7
    164a:	d1fc      	bne.n	1646 <_timer_init+0x1a>

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw);
    164c:	68e2      	ldr	r2, [r4, #12]
    164e:	7a93      	ldrb	r3, [r2, #10]
    1650:	09db      	lsrs	r3, r3, #7
    1652:	d1fc      	bne.n	164e <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    1654:	3380      	adds	r3, #128	; 0x80
    1656:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1658:	7a93      	ldrb	r3, [r2, #10]
    165a:	09db      	lsrs	r3, r3, #7
    165c:	d1fc      	bne.n	1658 <_timer_init+0x2c>
	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    165e:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    1660:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    1662:	2380      	movs	r3, #128	; 0x80
    1664:	00db      	lsls	r3, r3, #3
    1666:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1668:	7a93      	ldrb	r3, [r2, #10]
    166a:	09db      	lsrs	r3, r3, #7
    166c:	d1fc      	bne.n	1668 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    166e:	3301      	adds	r3, #1
    1670:	68e2      	ldr	r2, [r4, #12]
    1672:	71d3      	strb	r3, [r2, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
    1674:	4b03      	ldr	r3, [pc, #12]	; (1684 <_timer_init+0x58>)
    1676:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
    1678:	2000      	movs	r0, #0
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	00004770 	.word	0x00004770
    1680:	00001171 	.word	0x00001171
    1684:	20000190 	.word	0x20000190

00001688 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1688:	2000      	movs	r0, #0
    168a:	4770      	bx	lr

0000168c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    168c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    168e:	4b07      	ldr	r3, [pc, #28]	; (16ac <RTC_Handler+0x20>)
    1690:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1692:	68e3      	ldr	r3, [r4, #12]
    1694:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1696:	07db      	lsls	r3, r3, #31
    1698:	d507      	bpl.n	16aa <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    169a:	6823      	ldr	r3, [r4, #0]
    169c:	2b00      	cmp	r3, #0
    169e:	d001      	beq.n	16a4 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    16a0:	0020      	movs	r0, r4
    16a2:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    16a4:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    16a6:	2201      	movs	r2, #1
    16a8:	721a      	strb	r2, [r3, #8]
}
    16aa:	bd10      	pop	{r4, pc}
    16ac:	20000190 	.word	0x20000190

000016b0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    16b0:	b510      	push	{r4, lr}
    16b2:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    16b4:	4b1f      	ldr	r3, [pc, #124]	; (1734 <_usart_init+0x84>)
    16b6:	18c3      	adds	r3, r0, r3
    16b8:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    16ba:	b2db      	uxtb	r3, r3
    16bc:	2b00      	cmp	r3, #0
    16be:	d004      	beq.n	16ca <_usart_init+0x1a>
	ASSERT(false);
    16c0:	4a1d      	ldr	r2, [pc, #116]	; (1738 <_usart_init+0x88>)
    16c2:	491e      	ldr	r1, [pc, #120]	; (173c <_usart_init+0x8c>)
    16c4:	2000      	movs	r0, #0
    16c6:	4b1e      	ldr	r3, [pc, #120]	; (1740 <_usart_init+0x90>)
    16c8:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    16ca:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    16cc:	07db      	lsls	r3, r3, #31
    16ce:	d418      	bmi.n	1702 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    16d0:	2203      	movs	r2, #3
    16d2:	69e3      	ldr	r3, [r4, #28]
    16d4:	421a      	tst	r2, r3
    16d6:	d1fc      	bne.n	16d2 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    16d8:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    16da:	079b      	lsls	r3, r3, #30
    16dc:	d50b      	bpl.n	16f6 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    16de:	6823      	ldr	r3, [r4, #0]
    16e0:	2202      	movs	r2, #2
    16e2:	4393      	bics	r3, r2
    16e4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    16e6:	3201      	adds	r2, #1
    16e8:	69e3      	ldr	r3, [r4, #28]
    16ea:	421a      	tst	r2, r3
    16ec:	d1fc      	bne.n	16e8 <_usart_init+0x38>
    16ee:	2202      	movs	r2, #2
    16f0:	69e3      	ldr	r3, [r4, #28]
    16f2:	421a      	tst	r2, r3
    16f4:	d1fc      	bne.n	16f0 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    16f6:	2305      	movs	r3, #5
    16f8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    16fa:	2203      	movs	r2, #3
    16fc:	69e3      	ldr	r3, [r4, #28]
    16fe:	421a      	tst	r2, r3
    1700:	d1fc      	bne.n	16fc <_usart_init+0x4c>
    1702:	2201      	movs	r2, #1
    1704:	69e3      	ldr	r3, [r4, #28]
    1706:	421a      	tst	r2, r3
    1708:	d1fc      	bne.n	1704 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    170a:	4b0e      	ldr	r3, [pc, #56]	; (1744 <_usart_init+0x94>)
    170c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    170e:	2203      	movs	r2, #3
    1710:	69e3      	ldr	r3, [r4, #28]
    1712:	421a      	tst	r2, r3
    1714:	d1fc      	bne.n	1710 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1716:	23c0      	movs	r3, #192	; 0xc0
    1718:	029b      	lsls	r3, r3, #10
    171a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    171c:	2207      	movs	r2, #7
    171e:	69e3      	ldr	r3, [r4, #28]
    1720:	421a      	tst	r2, r3
    1722:	d1fc      	bne.n	171e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1724:	4b08      	ldr	r3, [pc, #32]	; (1748 <_usart_init+0x98>)
    1726:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1728:	2300      	movs	r3, #0
    172a:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    172c:	2230      	movs	r2, #48	; 0x30
    172e:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1730:	2000      	movs	r0, #0
    1732:	bd10      	pop	{r4, pc}
    1734:	bdfff800 	.word	0xbdfff800
    1738:	0000023a 	.word	0x0000023a
    173c:	00004788 	.word	0x00004788
    1740:	00001171 	.word	0x00001171
    1744:	40310004 	.word	0x40310004
    1748:	00001418 	.word	0x00001418

0000174c <_usart_sync_init>:
{
    174c:	b570      	push	{r4, r5, r6, lr}
    174e:	0005      	movs	r5, r0
    1750:	000c      	movs	r4, r1
	ASSERT(device);
    1752:	1e43      	subs	r3, r0, #1
    1754:	4198      	sbcs	r0, r3
    1756:	b2c0      	uxtb	r0, r0
    1758:	22b4      	movs	r2, #180	; 0xb4
    175a:	4904      	ldr	r1, [pc, #16]	; (176c <_usart_sync_init+0x20>)
    175c:	4b04      	ldr	r3, [pc, #16]	; (1770 <_usart_sync_init+0x24>)
    175e:	4798      	blx	r3
	device->hw = hw;
    1760:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1762:	0020      	movs	r0, r4
    1764:	4b03      	ldr	r3, [pc, #12]	; (1774 <_usart_sync_init+0x28>)
    1766:	4798      	blx	r3
}
    1768:	bd70      	pop	{r4, r5, r6, pc}
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	00004788 	.word	0x00004788
    1770:	00001171 	.word	0x00001171
    1774:	000016b1 	.word	0x000016b1

00001778 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1778:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    177a:	6813      	ldr	r3, [r2, #0]
    177c:	2102      	movs	r1, #2
    177e:	430b      	orrs	r3, r1
    1780:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1782:	3101      	adds	r1, #1
    1784:	69d3      	ldr	r3, [r2, #28]
    1786:	4219      	tst	r1, r3
    1788:	d1fc      	bne.n	1784 <_usart_sync_enable+0xc>
}
    178a:	4770      	bx	lr

0000178c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    178c:	6803      	ldr	r3, [r0, #0]
    178e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1790:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1792:	4770      	bx	lr

00001794 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1794:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1796:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1798:	b2c0      	uxtb	r0, r0
}
    179a:	4770      	bx	lr

0000179c <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    179c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    179e:	7e18      	ldrb	r0, [r3, #24]
    17a0:	2301      	movs	r3, #1
    17a2:	4018      	ands	r0, r3
}
    17a4:	4770      	bx	lr

000017a6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    17a6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    17a8:	7e18      	ldrb	r0, [r3, #24]
    17aa:	0780      	lsls	r0, r0, #30
    17ac:	0fc0      	lsrs	r0, r0, #31
}
    17ae:	4770      	bx	lr

000017b0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    17b0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    17b2:	7e18      	ldrb	r0, [r3, #24]
    17b4:	0740      	lsls	r0, r0, #29
    17b6:	0fc0      	lsrs	r0, r0, #31
}
    17b8:	4770      	bx	lr
	...

000017bc <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    17bc:	4b08      	ldr	r3, [pc, #32]	; (17e0 <_sysctrl_init_sources+0x24>)
    17be:	4a09      	ldr	r2, [pc, #36]	; (17e4 <_sysctrl_init_sources+0x28>)
    17c0:	829a      	strh	r2, [r3, #20]
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    17c2:	699a      	ldr	r2, [r3, #24]
    17c4:	2102      	movs	r1, #2
    17c6:	430a      	orrs	r2, r1
    17c8:	619a      	str	r2, [r3, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    17ca:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    17cc:	311d      	adds	r1, #29
    17ce:	400a      	ands	r2, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    17d0:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    17d2:	0019      	movs	r1, r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    17d4:	2202      	movs	r2, #2
    17d6:	68cb      	ldr	r3, [r1, #12]
    17d8:	421a      	tst	r2, r3
    17da:	d0fc      	beq.n	17d6 <_sysctrl_init_sources+0x1a>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    17dc:	4770      	bx	lr
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	40000800 	.word	0x40000800
    17e4:	0000076e 	.word	0x0000076e

000017e8 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    17e8:	2282      	movs	r2, #130	; 0x82
    17ea:	01d2      	lsls	r2, r2, #7
    17ec:	4b1d      	ldr	r3, [pc, #116]	; (1864 <_sysctrl_init_referenced_generators+0x7c>)
    17ee:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    17f0:	2202      	movs	r2, #2
    17f2:	4b1d      	ldr	r3, [pc, #116]	; (1868 <_sysctrl_init_referenced_generators+0x80>)
    17f4:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    17f6:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    17f8:	320e      	adds	r2, #14
    17fa:	68cb      	ldr	r3, [r1, #12]
    17fc:	421a      	tst	r2, r3
    17fe:	d0fc      	beq.n	17fa <_sysctrl_init_referenced_generators+0x12>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1800:	4a1a      	ldr	r2, [pc, #104]	; (186c <_sysctrl_init_referenced_generators+0x84>)
    1802:	4b19      	ldr	r3, [pc, #100]	; (1868 <_sysctrl_init_referenced_generators+0x80>)
    1804:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1806:	4b1a      	ldr	r3, [pc, #104]	; (1870 <_sysctrl_init_referenced_generators+0x88>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	0e9b      	lsrs	r3, r3, #26
    180c:	2b3f      	cmp	r3, #63	; 0x3f
    180e:	d01f      	beq.n	1850 <_sysctrl_init_referenced_generators+0x68>
    1810:	029b      	lsls	r3, r3, #10
    1812:	2280      	movs	r2, #128	; 0x80
    1814:	0092      	lsls	r2, r2, #2
    1816:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1818:	4a13      	ldr	r2, [pc, #76]	; (1868 <_sysctrl_init_referenced_generators+0x80>)
    181a:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    181c:	4b15      	ldr	r3, [pc, #84]	; (1874 <_sysctrl_init_referenced_generators+0x8c>)
    181e:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1820:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1822:	075b      	lsls	r3, r3, #29
    1824:	d517      	bpl.n	1856 <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1826:	0011      	movs	r1, r2
	tmp &= mask;
    1828:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    182a:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    182c:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    182e:	2bd0      	cmp	r3, #208	; 0xd0
    1830:	d1fb      	bne.n	182a <_sysctrl_init_referenced_generators+0x42>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    1832:	4a0d      	ldr	r2, [pc, #52]	; (1868 <_sysctrl_init_referenced_generators+0x80>)
    1834:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1836:	2180      	movs	r1, #128	; 0x80
    1838:	430b      	orrs	r3, r1
    183a:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    183c:	4a09      	ldr	r2, [pc, #36]	; (1864 <_sysctrl_init_referenced_generators+0x7c>)
    183e:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1840:	09db      	lsrs	r3, r3, #7
    1842:	d1fc      	bne.n	183e <_sysctrl_init_referenced_generators+0x56>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1844:	4a08      	ldr	r2, [pc, #32]	; (1868 <_sysctrl_init_referenced_generators+0x80>)
    1846:	6993      	ldr	r3, [r2, #24]
    1848:	2102      	movs	r1, #2
    184a:	438b      	bics	r3, r1
    184c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    184e:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1850:	23fc      	movs	r3, #252	; 0xfc
    1852:	01db      	lsls	r3, r3, #7
    1854:	e7e0      	b.n	1818 <_sysctrl_init_referenced_generators+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1856:	4904      	ldr	r1, [pc, #16]	; (1868 <_sysctrl_init_referenced_generators+0x80>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1858:	2210      	movs	r2, #16
    185a:	68cb      	ldr	r3, [r1, #12]
    185c:	421a      	tst	r2, r3
    185e:	d0fc      	beq.n	185a <_sysctrl_init_referenced_generators+0x72>
    1860:	e7e7      	b.n	1832 <_sysctrl_init_referenced_generators+0x4a>
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	40000c00 	.word	0x40000c00
    1868:	40000800 	.word	0x40000800
    186c:	7dff05b9 	.word	0x7dff05b9
    1870:	00806024 	.word	0x00806024
    1874:	00000806 	.word	0x00000806

00001878 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1878:	4b02      	ldr	r3, [pc, #8]	; (1884 <_delay_init+0xc>)
    187a:	4a03      	ldr	r2, [pc, #12]	; (1888 <_delay_init+0x10>)
    187c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    187e:	2205      	movs	r2, #5
    1880:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    1882:	4770      	bx	lr
    1884:	e000e010 	.word	0xe000e010
    1888:	00ffffff 	.word	0x00ffffff

0000188c <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    188c:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    188e:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1890:	1e5e      	subs	r6, r3, #1
    1892:	b2f6      	uxtb	r6, r6
    1894:	2b00      	cmp	r3, #0
    1896:	d013      	beq.n	18c0 <_delay_cycles+0x34>
    1898:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    189a:	4a0e      	ldr	r2, [pc, #56]	; (18d4 <_delay_cycles+0x48>)
    189c:	4d0e      	ldr	r5, [pc, #56]	; (18d8 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    189e:	2080      	movs	r0, #128	; 0x80
    18a0:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    18a2:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    18a4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    18a6:	6813      	ldr	r3, [r2, #0]
    18a8:	4203      	tst	r3, r0
    18aa:	d0fc      	beq.n	18a6 <_delay_cycles+0x1a>
	while (n--) {
    18ac:	3c01      	subs	r4, #1
    18ae:	b2e4      	uxtb	r4, r4
    18b0:	2cff      	cmp	r4, #255	; 0xff
    18b2:	d1f6      	bne.n	18a2 <_delay_cycles+0x16>
    18b4:	0633      	lsls	r3, r6, #24
    18b6:	1af6      	subs	r6, r6, r3
    18b8:	4b08      	ldr	r3, [pc, #32]	; (18dc <_delay_cycles+0x50>)
    18ba:	469c      	mov	ip, r3
    18bc:	4461      	add	r1, ip
    18be:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    18c0:	4b04      	ldr	r3, [pc, #16]	; (18d4 <_delay_cycles+0x48>)
    18c2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    18c4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    18c6:	0019      	movs	r1, r3
    18c8:	2280      	movs	r2, #128	; 0x80
    18ca:	0252      	lsls	r2, r2, #9
    18cc:	680b      	ldr	r3, [r1, #0]
    18ce:	4213      	tst	r3, r2
    18d0:	d0fc      	beq.n	18cc <_delay_cycles+0x40>
		;
}
    18d2:	bd70      	pop	{r4, r5, r6, pc}
    18d4:	e000e010 	.word	0xe000e010
    18d8:	00ffffff 	.word	0x00ffffff
    18dc:	ff000001 	.word	0xff000001

000018e0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    18e0:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    18e2:	4b0a      	ldr	r3, [pc, #40]	; (190c <get_tc_index+0x2c>)
    18e4:	469c      	mov	ip, r3
    18e6:	4460      	add	r0, ip
    18e8:	0a80      	lsrs	r0, r0, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    18ea:	3003      	adds	r0, #3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    18ec:	4b08      	ldr	r3, [pc, #32]	; (1910 <get_tc_index+0x30>)
    18ee:	781b      	ldrb	r3, [r3, #0]
    18f0:	b2c0      	uxtb	r0, r0
    18f2:	4283      	cmp	r3, r0
    18f4:	d008      	beq.n	1908 <get_tc_index+0x28>
			return i;
		}
	}

	ASSERT(false);
    18f6:	225a      	movs	r2, #90	; 0x5a
    18f8:	32ff      	adds	r2, #255	; 0xff
    18fa:	4906      	ldr	r1, [pc, #24]	; (1914 <get_tc_index+0x34>)
    18fc:	2000      	movs	r0, #0
    18fe:	4b06      	ldr	r3, [pc, #24]	; (1918 <get_tc_index+0x38>)
    1900:	4798      	blx	r3
	return -1;
    1902:	2001      	movs	r0, #1
    1904:	4240      	negs	r0, r0
}
    1906:	bd10      	pop	{r4, pc}
			return i;
    1908:	2000      	movs	r0, #0
    190a:	e7fc      	b.n	1906 <get_tc_index+0x26>
    190c:	bdffd400 	.word	0xbdffd400
    1910:	20000000 	.word	0x20000000
    1914:	000047a4 	.word	0x000047a4
    1918:	00001171 	.word	0x00001171

0000191c <_pwm_init>:
{
    191c:	b570      	push	{r4, r5, r6, lr}
    191e:	0005      	movs	r5, r0
    1920:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1922:	0008      	movs	r0, r1
    1924:	4b30      	ldr	r3, [pc, #192]	; (19e8 <_pwm_init+0xcc>)
    1926:	4798      	blx	r3
	device->hw = hw;
    1928:	612c      	str	r4, [r5, #16]
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    192a:	7be3      	ldrb	r3, [r4, #15]
    192c:	09db      	lsrs	r3, r3, #7
    192e:	d1fc      	bne.n	192a <_pwm_init+0xe>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1930:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1932:	079b      	lsls	r3, r3, #30
    1934:	d504      	bpl.n	1940 <_pwm_init+0x24>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1936:	2300      	movs	r3, #0
    1938:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    193a:	7be3      	ldrb	r3, [r4, #15]
    193c:	09db      	lsrs	r3, r3, #7
    193e:	d1fc      	bne.n	193a <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1940:	2301      	movs	r3, #1
    1942:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1944:	7be3      	ldrb	r3, [r4, #15]
    1946:	09db      	lsrs	r3, r3, #7
    1948:	d1fc      	bne.n	1944 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    194a:	0083      	lsls	r3, r0, #2
    194c:	181b      	adds	r3, r3, r0
    194e:	009a      	lsls	r2, r3, #2
    1950:	4b26      	ldr	r3, [pc, #152]	; (19ec <_pwm_init+0xd0>)
    1952:	189b      	adds	r3, r3, r2
    1954:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1956:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1958:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    195a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    195c:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    195e:	8163      	strh	r3, [r4, #10]
    1960:	230c      	movs	r3, #12
    1962:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1964:	2b08      	cmp	r3, #8
    1966:	d029      	beq.n	19bc <_pwm_init+0xa0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1968:	2b00      	cmp	r3, #0
    196a:	d138      	bne.n	19de <_pwm_init+0xc2>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    196c:	491f      	ldr	r1, [pc, #124]	; (19ec <_pwm_init+0xd0>)
    196e:	0083      	lsls	r3, r0, #2
    1970:	181a      	adds	r2, r3, r0
    1972:	0092      	lsls	r2, r2, #2
    1974:	188a      	adds	r2, r1, r2
    1976:	8992      	ldrh	r2, [r2, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1978:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    197a:	1818      	adds	r0, r3, r0
    197c:	0080      	lsls	r0, r0, #2
    197e:	1808      	adds	r0, r1, r0
    1980:	8a03      	ldrh	r3, [r0, #16]
    1982:	8363      	strh	r3, [r4, #26]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1984:	4b1a      	ldr	r3, [pc, #104]	; (19f0 <_pwm_init+0xd4>)
    1986:	429c      	cmp	r4, r3
    1988:	d025      	beq.n	19d6 <_pwm_init+0xba>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    198a:	4b1a      	ldr	r3, [pc, #104]	; (19f4 <_pwm_init+0xd8>)
    198c:	469c      	mov	ip, r3
    198e:	4464      	add	r4, ip
    1990:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1992:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    1994:	b2e3      	uxtb	r3, r4
    1996:	0622      	lsls	r2, r4, #24
    1998:	d424      	bmi.n	19e4 <_pwm_init+0xc8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    199a:	221f      	movs	r2, #31
    199c:	401a      	ands	r2, r3
    199e:	2301      	movs	r3, #1
    19a0:	4093      	lsls	r3, r2
    19a2:	4a15      	ldr	r2, [pc, #84]	; (19f8 <_pwm_init+0xdc>)
    19a4:	2180      	movs	r1, #128	; 0x80
    19a6:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    19a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ac:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19b0:	3101      	adds	r1, #1
    19b2:	31ff      	adds	r1, #255	; 0xff
    19b4:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19b6:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    19b8:	2000      	movs	r0, #0
}
    19ba:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    19bc:	490b      	ldr	r1, [pc, #44]	; (19ec <_pwm_init+0xd0>)
    19be:	0083      	lsls	r3, r0, #2
    19c0:	181a      	adds	r2, r3, r0
    19c2:	0092      	lsls	r2, r2, #2
    19c4:	188a      	adds	r2, r1, r2
    19c6:	68d2      	ldr	r2, [r2, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    19c8:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    19ca:	1818      	adds	r0, r3, r0
    19cc:	0080      	lsls	r0, r0, #2
    19ce:	1808      	adds	r0, r1, r0
    19d0:	6903      	ldr	r3, [r0, #16]
    19d2:	61e3      	str	r3, [r4, #28]
    19d4:	e7d6      	b.n	1984 <_pwm_init+0x68>
		_tc3_dev = (struct _pwm_device *)dev;
    19d6:	4b09      	ldr	r3, [pc, #36]	; (19fc <_pwm_init+0xe0>)
    19d8:	601d      	str	r5, [r3, #0]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    19da:	2312      	movs	r3, #18
    19dc:	e7dd      	b.n	199a <_pwm_init+0x7e>
		return ERR_INVALID_DATA;
    19de:	2001      	movs	r0, #1
    19e0:	4240      	negs	r0, r0
    19e2:	e7ea      	b.n	19ba <_pwm_init+0x9e>
	return ERR_NONE;
    19e4:	2000      	movs	r0, #0
    19e6:	e7e8      	b.n	19ba <_pwm_init+0x9e>
    19e8:	000018e1 	.word	0x000018e1
    19ec:	20000000 	.word	0x20000000
    19f0:	42002c00 	.word	0x42002c00
    19f4:	bdffd400 	.word	0xbdffd400
    19f8:	e000e100 	.word	0xe000e100
    19fc:	20000194 	.word	0x20000194

00001a00 <_tc_get_pwm>:
}
    1a00:	2000      	movs	r0, #0
    1a02:	4770      	bx	lr

00001a04 <TC3_Handler>:
{
    1a04:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    1a06:	4b0c      	ldr	r3, [pc, #48]	; (1a38 <TC3_Handler+0x34>)
    1a08:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    1a0a:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1a0c:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1a0e:	07db      	lsls	r3, r3, #31
    1a10:	d506      	bpl.n	1a20 <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1a12:	2301      	movs	r3, #1
    1a14:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    1a16:	682b      	ldr	r3, [r5, #0]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d001      	beq.n	1a20 <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    1a1c:	0028      	movs	r0, r5
    1a1e:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1a20:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1a22:	079b      	lsls	r3, r3, #30
    1a24:	d506      	bpl.n	1a34 <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1a26:	2302      	movs	r3, #2
    1a28:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    1a2a:	686b      	ldr	r3, [r5, #4]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d001      	beq.n	1a34 <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1a30:	0028      	movs	r0, r5
    1a32:	4798      	blx	r3
}
    1a34:	bd70      	pop	{r4, r5, r6, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	20000194 	.word	0x20000194

00001a3c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1a3c:	2000      	movs	r0, #0
    1a3e:	4770      	bx	lr

00001a40 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1a40:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1a42:	7c83      	ldrb	r3, [r0, #18]
    1a44:	220f      	movs	r2, #15
    1a46:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1a48:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    1a4a:	3a08      	subs	r2, #8
    1a4c:	400a      	ands	r2, r1
    1a4e:	2a01      	cmp	r2, #1
    1a50:	d00b      	beq.n	1a6a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a52:	015a      	lsls	r2, r3, #5
    1a54:	4919      	ldr	r1, [pc, #100]	; (1abc <_usb_d_dev_handle_setup+0x7c>)
    1a56:	468c      	mov	ip, r1
    1a58:	4462      	add	r2, ip
    1a5a:	2110      	movs	r1, #16
    1a5c:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1a5e:	015b      	lsls	r3, r3, #5
    1a60:	4a17      	ldr	r2, [pc, #92]	; (1ac0 <_usb_d_dev_handle_setup+0x80>)
    1a62:	4694      	mov	ip, r2
    1a64:	4463      	add	r3, ip
    1a66:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1a68:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    1a6a:	064a      	lsls	r2, r1, #25
    1a6c:	d50e      	bpl.n	1a8c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    1a6e:	7cc2      	ldrb	r2, [r0, #19]
    1a70:	2140      	movs	r1, #64	; 0x40
    1a72:	438a      	bics	r2, r1
    1a74:	74c2      	strb	r2, [r0, #19]
    1a76:	015a      	lsls	r2, r3, #5
    1a78:	4c12      	ldr	r4, [pc, #72]	; (1ac4 <_usb_d_dev_handle_setup+0x84>)
    1a7a:	46a4      	mov	ip, r4
    1a7c:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a7e:	2580      	movs	r5, #128	; 0x80
    1a80:	2482      	movs	r4, #130	; 0x82
    1a82:	0064      	lsls	r4, r4, #1
    1a84:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a86:	2406      	movs	r4, #6
    1a88:	34ff      	adds	r4, #255	; 0xff
    1a8a:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    1a8c:	7cc2      	ldrb	r2, [r0, #19]
    1a8e:	2108      	movs	r1, #8
    1a90:	438a      	bics	r2, r1
    1a92:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1a94:	490c      	ldr	r1, [pc, #48]	; (1ac8 <_usb_d_dev_handle_setup+0x88>)
    1a96:	015a      	lsls	r2, r3, #5
    1a98:	188c      	adds	r4, r1, r2
    1a9a:	2500      	movs	r5, #0
    1a9c:	72a5      	strb	r5, [r4, #10]
    1a9e:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1aa0:	0013      	movs	r3, r2
    1aa2:	4c06      	ldr	r4, [pc, #24]	; (1abc <_usb_d_dev_handle_setup+0x7c>)
    1aa4:	46a4      	mov	ip, r4
    1aa6:	4463      	add	r3, ip
    1aa8:	246f      	movs	r4, #111	; 0x6f
    1aaa:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1aac:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <_usb_d_dev_handle_setup+0x80>)
    1aae:	469c      	mov	ip, r3
    1ab0:	4462      	add	r2, ip
    1ab2:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1ab4:	7c80      	ldrb	r0, [r0, #18]
    1ab6:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1ab8:	4798      	blx	r3
    1aba:	e7d5      	b.n	1a68 <_usb_d_dev_handle_setup+0x28>
    1abc:	41005100 	.word	0x41005100
    1ac0:	41005108 	.word	0x41005108
    1ac4:	41005000 	.word	0x41005000
    1ac8:	20000198 	.word	0x20000198

00001acc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1acc:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1ace:	2220      	movs	r2, #32
    1ad0:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1ad2:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1ad4:	7c81      	ldrb	r1, [r0, #18]
    1ad6:	230f      	movs	r3, #15
    1ad8:	400b      	ands	r3, r1
    1ada:	015b      	lsls	r3, r3, #5
    1adc:	4905      	ldr	r1, [pc, #20]	; (1af4 <_usb_d_dev_handle_stall+0x28>)
    1ade:	468c      	mov	ip, r1
    1ae0:	4463      	add	r3, ip
    1ae2:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1ae4:	6882      	ldr	r2, [r0, #8]
    1ae6:	7c80      	ldrb	r0, [r0, #18]
    1ae8:	4b03      	ldr	r3, [pc, #12]	; (1af8 <_usb_d_dev_handle_stall+0x2c>)
    1aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1aec:	2101      	movs	r1, #1
    1aee:	4798      	blx	r3
}
    1af0:	bd10      	pop	{r4, pc}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	41005108 	.word	0x41005108
    1af8:	20000198 	.word	0x20000198

00001afc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1afc:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1afe:	7c83      	ldrb	r3, [r0, #18]
    1b00:	2bff      	cmp	r3, #255	; 0xff
    1b02:	d002      	beq.n	1b0a <_usb_d_dev_trans_done+0xe>
    1b04:	7cc2      	ldrb	r2, [r0, #19]
    1b06:	0652      	lsls	r2, r2, #25
    1b08:	d400      	bmi.n	1b0c <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    1b0a:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1b0c:	7cc2      	ldrb	r2, [r0, #19]
    1b0e:	2440      	movs	r4, #64	; 0x40
    1b10:	43a2      	bics	r2, r4
    1b12:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1b14:	6882      	ldr	r2, [r0, #8]
    1b16:	4802      	ldr	r0, [pc, #8]	; (1b20 <_usb_d_dev_trans_done+0x24>)
    1b18:	6f04      	ldr	r4, [r0, #112]	; 0x70
    1b1a:	0018      	movs	r0, r3
    1b1c:	47a0      	blx	r4
    1b1e:	e7f4      	b.n	1b0a <_usb_d_dev_trans_done+0xe>
    1b20:	20000198 	.word	0x20000198

00001b24 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1b24:	b530      	push	{r4, r5, lr}
    1b26:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b28:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1b2a:	ac01      	add	r4, sp, #4
    1b2c:	2525      	movs	r5, #37	; 0x25
    1b2e:	7025      	strb	r5, [r4, #0]
    1b30:	3525      	adds	r5, #37	; 0x25
    1b32:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1b34:	2bff      	cmp	r3, #255	; 0xff
    1b36:	d01b      	beq.n	1b70 <_usb_d_dev_trans_stop+0x4c>
    1b38:	7cc4      	ldrb	r4, [r0, #19]
    1b3a:	0664      	lsls	r4, r4, #25
    1b3c:	d518      	bpl.n	1b70 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b3e:	240f      	movs	r4, #15
    1b40:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1b42:	2900      	cmp	r1, #0
    1b44:	d016      	beq.n	1b74 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b46:	015c      	lsls	r4, r3, #5
    1b48:	4d0e      	ldr	r5, [pc, #56]	; (1b84 <_usb_d_dev_trans_stop+0x60>)
    1b4a:	46ac      	mov	ip, r5
    1b4c:	4464      	add	r4, ip
    1b4e:	2580      	movs	r5, #128	; 0x80
    1b50:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1b52:	ac01      	add	r4, sp, #4
    1b54:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b56:	0159      	lsls	r1, r3, #5
    1b58:	4d0a      	ldr	r5, [pc, #40]	; (1b84 <_usb_d_dev_trans_stop+0x60>)
    1b5a:	46ac      	mov	ip, r5
    1b5c:	4461      	add	r1, ip
    1b5e:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b60:	015b      	lsls	r3, r3, #5
    1b62:	4909      	ldr	r1, [pc, #36]	; (1b88 <_usb_d_dev_trans_stop+0x64>)
    1b64:	468c      	mov	ip, r1
    1b66:	4463      	add	r3, ip
    1b68:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1b6a:	0011      	movs	r1, r2
    1b6c:	4b07      	ldr	r3, [pc, #28]	; (1b8c <_usb_d_dev_trans_stop+0x68>)
    1b6e:	4798      	blx	r3
}
    1b70:	b003      	add	sp, #12
    1b72:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b74:	015c      	lsls	r4, r3, #5
    1b76:	4d03      	ldr	r5, [pc, #12]	; (1b84 <_usb_d_dev_trans_stop+0x60>)
    1b78:	46ac      	mov	ip, r5
    1b7a:	4464      	add	r4, ip
    1b7c:	2540      	movs	r5, #64	; 0x40
    1b7e:	7165      	strb	r5, [r4, #5]
    1b80:	e7e7      	b.n	1b52 <_usb_d_dev_trans_stop+0x2e>
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	41005100 	.word	0x41005100
    1b88:	41005108 	.word	0x41005108
    1b8c:	00001afd 	.word	0x00001afd

00001b90 <_usb_d_dev_handle_trfail>:
{
    1b90:	b570      	push	{r4, r5, r6, lr}
    1b92:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1b94:	7c83      	ldrb	r3, [r0, #18]
    1b96:	220f      	movs	r2, #15
    1b98:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1b9a:	aa01      	add	r2, sp, #4
    1b9c:	2404      	movs	r4, #4
    1b9e:	7014      	strb	r4, [r2, #0]
    1ba0:	3404      	adds	r4, #4
    1ba2:	7054      	strb	r4, [r2, #1]
    1ba4:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    1ba6:	2900      	cmp	r1, #0
    1ba8:	d031      	beq.n	1c0e <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1baa:	001a      	movs	r2, r3
    1bac:	3208      	adds	r2, #8
    1bae:	0152      	lsls	r2, r2, #5
    1bb0:	4c32      	ldr	r4, [pc, #200]	; (1c7c <_usb_d_dev_handle_trfail+0xec>)
    1bb2:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1bb4:	0664      	lsls	r4, r4, #25
    1bb6:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1bb8:	010a      	lsls	r2, r1, #4
    1bba:	1952      	adds	r2, r2, r5
    1bbc:	4d30      	ldr	r5, [pc, #192]	; (1c80 <_usb_d_dev_handle_trfail+0xf0>)
    1bbe:	18aa      	adds	r2, r5, r2
    1bc0:	7a95      	ldrb	r5, [r2, #10]
    1bc2:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1bc4:	2c02      	cmp	r4, #2
    1bc6:	d02a      	beq.n	1c1e <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    1bc8:	07ac      	lsls	r4, r5, #30
    1bca:	d541      	bpl.n	1c50 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bcc:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1bce:	7a94      	ldrb	r4, [r2, #10]
    1bd0:	2602      	movs	r6, #2
    1bd2:	43b4      	bics	r4, r6
    1bd4:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1bd6:	aa01      	add	r2, sp, #4
    1bd8:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bda:	015a      	lsls	r2, r3, #5
    1bdc:	4e29      	ldr	r6, [pc, #164]	; (1c84 <_usb_d_dev_handle_trfail+0xf4>)
    1bde:	46b4      	mov	ip, r6
    1be0:	4462      	add	r2, ip
    1be2:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1be4:	015b      	lsls	r3, r3, #5
    1be6:	4a28      	ldr	r2, [pc, #160]	; (1c88 <_usb_d_dev_handle_trfail+0xf8>)
    1be8:	4694      	mov	ip, r2
    1bea:	4463      	add	r3, ip
    1bec:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1bee:	2307      	movs	r3, #7
    1bf0:	402b      	ands	r3, r5
    1bf2:	2b01      	cmp	r3, #1
    1bf4:	d13f      	bne.n	1c76 <_usb_d_dev_handle_trfail+0xe6>
    1bf6:	7cc3      	ldrb	r3, [r0, #19]
    1bf8:	065b      	lsls	r3, r3, #25
    1bfa:	d53c      	bpl.n	1c76 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1bfc:	7cc3      	ldrb	r3, [r0, #19]
    1bfe:	09db      	lsrs	r3, r3, #7
    1c00:	4299      	cmp	r1, r3
    1c02:	d038      	beq.n	1c76 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1c04:	2200      	movs	r2, #0
    1c06:	0019      	movs	r1, r3
    1c08:	4b20      	ldr	r3, [pc, #128]	; (1c8c <_usb_d_dev_handle_trfail+0xfc>)
    1c0a:	4798      	blx	r3
    1c0c:	e033      	b.n	1c76 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1c0e:	001a      	movs	r2, r3
    1c10:	3208      	adds	r2, #8
    1c12:	0152      	lsls	r2, r2, #5
    1c14:	4c19      	ldr	r4, [pc, #100]	; (1c7c <_usb_d_dev_handle_trfail+0xec>)
    1c16:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1c18:	2207      	movs	r2, #7
    1c1a:	4014      	ands	r4, r2
    1c1c:	e7cc      	b.n	1bb8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1c1e:	07ec      	lsls	r4, r5, #31
    1c20:	d5d2      	bpl.n	1bc8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1c22:	7a94      	ldrb	r4, [r2, #10]
    1c24:	2501      	movs	r5, #1
    1c26:	43ac      	bics	r4, r5
    1c28:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1c2a:	aa01      	add	r2, sp, #4
    1c2c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c2e:	015a      	lsls	r2, r3, #5
    1c30:	4d14      	ldr	r5, [pc, #80]	; (1c84 <_usb_d_dev_handle_trfail+0xf4>)
    1c32:	46ac      	mov	ip, r5
    1c34:	4462      	add	r2, ip
    1c36:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c38:	015b      	lsls	r3, r3, #5
    1c3a:	4a13      	ldr	r2, [pc, #76]	; (1c88 <_usb_d_dev_handle_trfail+0xf8>)
    1c3c:	4694      	mov	ip, r2
    1c3e:	4463      	add	r3, ip
    1c40:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1c42:	1e4b      	subs	r3, r1, #1
    1c44:	4199      	sbcs	r1, r3
    1c46:	b2c9      	uxtb	r1, r1
    1c48:	2204      	movs	r2, #4
    1c4a:	4b10      	ldr	r3, [pc, #64]	; (1c8c <_usb_d_dev_handle_trfail+0xfc>)
    1c4c:	4798      	blx	r3
    1c4e:	e012      	b.n	1c76 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1c50:	005a      	lsls	r2, r3, #1
    1c52:	1852      	adds	r2, r2, r1
    1c54:	0112      	lsls	r2, r2, #4
    1c56:	480a      	ldr	r0, [pc, #40]	; (1c80 <_usb_d_dev_handle_trfail+0xf0>)
    1c58:	1882      	adds	r2, r0, r2
    1c5a:	2000      	movs	r0, #0
    1c5c:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1c5e:	aa01      	add	r2, sp, #4
    1c60:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c62:	015a      	lsls	r2, r3, #5
    1c64:	4807      	ldr	r0, [pc, #28]	; (1c84 <_usb_d_dev_handle_trfail+0xf4>)
    1c66:	4684      	mov	ip, r0
    1c68:	4462      	add	r2, ip
    1c6a:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c6c:	015b      	lsls	r3, r3, #5
    1c6e:	4a06      	ldr	r2, [pc, #24]	; (1c88 <_usb_d_dev_handle_trfail+0xf8>)
    1c70:	4694      	mov	ip, r2
    1c72:	4463      	add	r3, ip
    1c74:	7019      	strb	r1, [r3, #0]
}
    1c76:	b002      	add	sp, #8
    1c78:	bd70      	pop	{r4, r5, r6, pc}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	41005000 	.word	0x41005000
    1c80:	20000198 	.word	0x20000198
    1c84:	41005100 	.word	0x41005100
    1c88:	41005108 	.word	0x41005108
    1c8c:	00001b25 	.word	0x00001b25

00001c90 <_usb_d_dev_reset_epts>:
{
    1c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c92:	46c6      	mov	lr, r8
    1c94:	b500      	push	{lr}
    1c96:	4d0c      	ldr	r5, [pc, #48]	; (1cc8 <_usb_d_dev_reset_epts+0x38>)
    1c98:	002c      	movs	r4, r5
    1c9a:	3474      	adds	r4, #116	; 0x74
    1c9c:	3529      	adds	r5, #41	; 0x29
    1c9e:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1ca0:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <_usb_d_dev_reset_epts+0x3c>)
    1ca2:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1ca4:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1ca6:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1ca8:	2103      	movs	r1, #3
    1caa:	0020      	movs	r0, r4
    1cac:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1cae:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1cb0:	74e6      	strb	r6, [r4, #19]
    1cb2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1cb4:	42ac      	cmp	r4, r5
    1cb6:	d1f7      	bne.n	1ca8 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1cb8:	2260      	movs	r2, #96	; 0x60
    1cba:	2100      	movs	r1, #0
    1cbc:	4802      	ldr	r0, [pc, #8]	; (1cc8 <_usb_d_dev_reset_epts+0x38>)
    1cbe:	4b04      	ldr	r3, [pc, #16]	; (1cd0 <_usb_d_dev_reset_epts+0x40>)
    1cc0:	4798      	blx	r3
}
    1cc2:	bc04      	pop	{r2}
    1cc4:	4690      	mov	r8, r2
    1cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cc8:	20000198 	.word	0x20000198
    1ccc:	00001afd 	.word	0x00001afd
    1cd0:	00003db7 	.word	0x00003db7

00001cd4 <_usb_d_dev_in_next>:
{
    1cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd6:	46c6      	mov	lr, r8
    1cd8:	b500      	push	{lr}
    1cda:	0004      	movs	r4, r0
    1cdc:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1cde:	7c83      	ldrb	r3, [r0, #18]
    1ce0:	250f      	movs	r5, #15
    1ce2:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1ce4:	2900      	cmp	r1, #0
    1ce6:	d100      	bne.n	1cea <_usb_d_dev_in_next+0x16>
    1ce8:	e0aa      	b.n	1e40 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1cea:	016a      	lsls	r2, r5, #5
    1cec:	4b5a      	ldr	r3, [pc, #360]	; (1e58 <_usb_d_dev_in_next+0x184>)
    1cee:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1cf0:	6958      	ldr	r0, [r3, #20]
    1cf2:	0480      	lsls	r0, r0, #18
    1cf4:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1cf6:	8a23      	ldrh	r3, [r4, #16]
    1cf8:	4a58      	ldr	r2, [pc, #352]	; (1e5c <_usb_d_dev_in_next+0x188>)
    1cfa:	4293      	cmp	r3, r2
    1cfc:	d100      	bne.n	1d00 <_usb_d_dev_in_next+0x2c>
    1cfe:	e09a      	b.n	1e36 <_usb_d_dev_in_next+0x162>
    1d00:	3b01      	subs	r3, #1
    1d02:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1d04:	7ce3      	ldrb	r3, [r4, #19]
    1d06:	2707      	movs	r7, #7
    1d08:	401f      	ands	r7, r3
	if (isr) {
    1d0a:	2e00      	cmp	r6, #0
    1d0c:	d005      	beq.n	1d1a <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d0e:	016b      	lsls	r3, r5, #5
    1d10:	4953      	ldr	r1, [pc, #332]	; (1e60 <_usb_d_dev_in_next+0x18c>)
    1d12:	468c      	mov	ip, r1
    1d14:	4463      	add	r3, ip
    1d16:	2102      	movs	r1, #2
    1d18:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1d1a:	68a3      	ldr	r3, [r4, #8]
    1d1c:	18c1      	adds	r1, r0, r3
    1d1e:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1d20:	6863      	ldr	r3, [r4, #4]
    1d22:	4299      	cmp	r1, r3
    1d24:	d24a      	bcs.n	1dbc <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1d26:	1a5b      	subs	r3, r3, r1
    1d28:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1d2a:	7ce2      	ldrb	r2, [r4, #19]
    1d2c:	0692      	lsls	r2, r2, #26
    1d2e:	d535      	bpl.n	1d9c <_usb_d_dev_in_next+0xc8>
    1d30:	8a22      	ldrh	r2, [r4, #16]
    1d32:	1c10      	adds	r0, r2, #0
    1d34:	b292      	uxth	r2, r2
    1d36:	429a      	cmp	r2, r3
    1d38:	d900      	bls.n	1d3c <_usb_d_dev_in_next+0x68>
    1d3a:	1c18      	adds	r0, r3, #0
    1d3c:	b283      	uxth	r3, r0
    1d3e:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1d40:	6823      	ldr	r3, [r4, #0]
    1d42:	469c      	mov	ip, r3
    1d44:	4461      	add	r1, ip
    1d46:	4642      	mov	r2, r8
    1d48:	68e0      	ldr	r0, [r4, #12]
    1d4a:	4b46      	ldr	r3, [pc, #280]	; (1e64 <_usb_d_dev_in_next+0x190>)
    1d4c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1d4e:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1d50:	016a      	lsls	r2, r5, #5
    1d52:	4b41      	ldr	r3, [pc, #260]	; (1e58 <_usb_d_dev_in_next+0x184>)
    1d54:	189b      	adds	r3, r3, r2
    1d56:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1d58:	016a      	lsls	r2, r5, #5
    1d5a:	4b3f      	ldr	r3, [pc, #252]	; (1e58 <_usb_d_dev_in_next+0x184>)
    1d5c:	189b      	adds	r3, r3, r2
    1d5e:	695a      	ldr	r2, [r3, #20]
    1d60:	4641      	mov	r1, r8
    1d62:	0489      	lsls	r1, r1, #18
    1d64:	0c89      	lsrs	r1, r1, #18
    1d66:	0b92      	lsrs	r2, r2, #14
    1d68:	0392      	lsls	r2, r2, #14
    1d6a:	430a      	orrs	r2, r1
    1d6c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1d6e:	695a      	ldr	r2, [r3, #20]
    1d70:	493d      	ldr	r1, [pc, #244]	; (1e68 <_usb_d_dev_in_next+0x194>)
    1d72:	400a      	ands	r2, r1
    1d74:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1d76:	2e00      	cmp	r6, #0
    1d78:	d107      	bne.n	1d8a <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1d7a:	2f01      	cmp	r7, #1
    1d7c:	d059      	beq.n	1e32 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1d7e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1d80:	016b      	lsls	r3, r5, #5
    1d82:	493a      	ldr	r1, [pc, #232]	; (1e6c <_usb_d_dev_in_next+0x198>)
    1d84:	468c      	mov	ip, r1
    1d86:	4463      	add	r3, ip
    1d88:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1d8a:	016d      	lsls	r5, r5, #5
    1d8c:	4b34      	ldr	r3, [pc, #208]	; (1e60 <_usb_d_dev_in_next+0x18c>)
    1d8e:	469c      	mov	ip, r3
    1d90:	4465      	add	r5, ip
    1d92:	2380      	movs	r3, #128	; 0x80
    1d94:	716b      	strb	r3, [r5, #5]
}
    1d96:	bc04      	pop	{r2}
    1d98:	4690      	mov	r8, r2
    1d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d9c:	1c1a      	adds	r2, r3, #0
    1d9e:	2080      	movs	r0, #128	; 0x80
    1da0:	0180      	lsls	r0, r0, #6
    1da2:	4283      	cmp	r3, r0
    1da4:	d901      	bls.n	1daa <_usb_d_dev_in_next+0xd6>
    1da6:	4b32      	ldr	r3, [pc, #200]	; (1e70 <_usb_d_dev_in_next+0x19c>)
    1da8:	881a      	ldrh	r2, [r3, #0]
    1daa:	b293      	uxth	r3, r2
    1dac:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1dae:	6823      	ldr	r3, [r4, #0]
    1db0:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1db2:	016a      	lsls	r2, r5, #5
    1db4:	4b28      	ldr	r3, [pc, #160]	; (1e58 <_usb_d_dev_in_next+0x184>)
    1db6:	189b      	adds	r3, r3, r2
    1db8:	6119      	str	r1, [r3, #16]
    1dba:	e7cd      	b.n	1d58 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1dbc:	7ce3      	ldrb	r3, [r4, #19]
    1dbe:	06db      	lsls	r3, r3, #27
    1dc0:	d50f      	bpl.n	1de2 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1dc2:	7ce3      	ldrb	r3, [r4, #19]
    1dc4:	2210      	movs	r2, #16
    1dc6:	4393      	bics	r3, r2
    1dc8:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1dca:	016a      	lsls	r2, r5, #5
    1dcc:	4b22      	ldr	r3, [pc, #136]	; (1e58 <_usb_d_dev_in_next+0x184>)
    1dce:	189b      	adds	r3, r3, r2
    1dd0:	695a      	ldr	r2, [r3, #20]
    1dd2:	0b92      	lsrs	r2, r2, #14
    1dd4:	0392      	lsls	r2, r2, #14
    1dd6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1dd8:	695a      	ldr	r2, [r3, #20]
    1dda:	4923      	ldr	r1, [pc, #140]	; (1e68 <_usb_d_dev_in_next+0x194>)
    1ddc:	400a      	ands	r2, r1
    1dde:	615a      	str	r2, [r3, #20]
    1de0:	e7c9      	b.n	1d76 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1de2:	2f01      	cmp	r7, #1
    1de4:	d00e      	beq.n	1e04 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1de6:	016d      	lsls	r5, r5, #5
    1de8:	4b22      	ldr	r3, [pc, #136]	; (1e74 <_usb_d_dev_in_next+0x1a0>)
    1dea:	469c      	mov	ip, r3
    1dec:	4465      	add	r5, ip
    1dee:	234a      	movs	r3, #74	; 0x4a
    1df0:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1df2:	8a21      	ldrh	r1, [r4, #16]
    1df4:	4002      	ands	r2, r0
    1df6:	4291      	cmp	r1, r2
    1df8:	d00b      	beq.n	1e12 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1dfa:	2100      	movs	r1, #0
    1dfc:	0020      	movs	r0, r4
    1dfe:	4b1e      	ldr	r3, [pc, #120]	; (1e78 <_usb_d_dev_in_next+0x1a4>)
    1e00:	4798      	blx	r3
	return;
    1e02:	e7c8      	b.n	1d96 <_usb_d_dev_in_next+0xc2>
    1e04:	016d      	lsls	r5, r5, #5
    1e06:	4b1b      	ldr	r3, [pc, #108]	; (1e74 <_usb_d_dev_in_next+0x1a0>)
    1e08:	469c      	mov	ip, r3
    1e0a:	4465      	add	r5, ip
    1e0c:	234b      	movs	r3, #75	; 0x4b
    1e0e:	702b      	strb	r3, [r5, #0]
    1e10:	e7ef      	b.n	1df2 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1e12:	7ce3      	ldrb	r3, [r4, #19]
    1e14:	2240      	movs	r2, #64	; 0x40
    1e16:	4393      	bics	r3, r2
    1e18:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1e1a:	7ca0      	ldrb	r0, [r4, #18]
    1e1c:	4b0e      	ldr	r3, [pc, #56]	; (1e58 <_usb_d_dev_in_next+0x184>)
    1e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1e20:	68a1      	ldr	r1, [r4, #8]
    1e22:	4798      	blx	r3
    1e24:	2800      	cmp	r0, #0
    1e26:	d1b6      	bne.n	1d96 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1e28:	7ce3      	ldrb	r3, [r4, #19]
    1e2a:	2240      	movs	r2, #64	; 0x40
    1e2c:	4313      	orrs	r3, r2
    1e2e:	74e3      	strb	r3, [r4, #19]
    1e30:	e7e3      	b.n	1dfa <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1e32:	224e      	movs	r2, #78	; 0x4e
    1e34:	e7a4      	b.n	1d80 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e36:	7ce7      	ldrb	r7, [r4, #19]
    1e38:	2307      	movs	r3, #7
    1e3a:	401f      	ands	r7, r3
    1e3c:	4a07      	ldr	r2, [pc, #28]	; (1e5c <_usb_d_dev_in_next+0x188>)
    1e3e:	e766      	b.n	1d0e <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1e40:	8a03      	ldrh	r3, [r0, #16]
    1e42:	4a06      	ldr	r2, [pc, #24]	; (1e5c <_usb_d_dev_in_next+0x188>)
    1e44:	2000      	movs	r0, #0
    1e46:	4293      	cmp	r3, r2
    1e48:	d000      	beq.n	1e4c <_usb_d_dev_in_next+0x178>
    1e4a:	e759      	b.n	1d00 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e4c:	7ce3      	ldrb	r3, [r4, #19]
    1e4e:	2707      	movs	r7, #7
    1e50:	401f      	ands	r7, r3
    1e52:	2000      	movs	r0, #0
    1e54:	4a01      	ldr	r2, [pc, #4]	; (1e5c <_usb_d_dev_in_next+0x188>)
    1e56:	e760      	b.n	1d1a <_usb_d_dev_in_next+0x46>
    1e58:	20000198 	.word	0x20000198
    1e5c:	000003ff 	.word	0x000003ff
    1e60:	41005100 	.word	0x41005100
    1e64:	00003da5 	.word	0x00003da5
    1e68:	f0003fff 	.word	0xf0003fff
    1e6c:	41005109 	.word	0x41005109
    1e70:	000047b8 	.word	0x000047b8
    1e74:	41005108 	.word	0x41005108
    1e78:	00001afd 	.word	0x00001afd

00001e7c <_usb_d_dev_out_next>:
{
    1e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e7e:	46de      	mov	lr, fp
    1e80:	4657      	mov	r7, sl
    1e82:	464e      	mov	r6, r9
    1e84:	4645      	mov	r5, r8
    1e86:	b5e0      	push	{r5, r6, r7, lr}
    1e88:	0004      	movs	r4, r0
    1e8a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1e8c:	7c83      	ldrb	r3, [r0, #18]
    1e8e:	250f      	movs	r5, #15
    1e90:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1e92:	2900      	cmp	r1, #0
    1e94:	d057      	beq.n	1f46 <_usb_d_dev_out_next+0xca>
    1e96:	016a      	lsls	r2, r5, #5
    1e98:	4b7d      	ldr	r3, [pc, #500]	; (2090 <STACK_SIZE+0x90>)
    1e9a:	189b      	adds	r3, r3, r2
    1e9c:	685a      	ldr	r2, [r3, #4]
    1e9e:	0112      	lsls	r2, r2, #4
    1ea0:	0c92      	lsrs	r2, r2, #18
    1ea2:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1ea4:	685f      	ldr	r7, [r3, #4]
    1ea6:	04bf      	lsls	r7, r7, #18
    1ea8:	0cbf      	lsrs	r7, r7, #18
    1eaa:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1eac:	8a06      	ldrh	r6, [r0, #16]
    1eae:	4b79      	ldr	r3, [pc, #484]	; (2094 <STACK_SIZE+0x94>)
    1eb0:	429e      	cmp	r6, r3
    1eb2:	d100      	bne.n	1eb6 <_usb_d_dev_out_next+0x3a>
    1eb4:	e0cd      	b.n	2052 <STACK_SIZE+0x52>
    1eb6:	3e01      	subs	r6, #1
    1eb8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1eba:	465f      	mov	r7, fp
    1ebc:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ebe:	7ce3      	ldrb	r3, [r4, #19]
    1ec0:	2207      	movs	r2, #7
    1ec2:	401a      	ands	r2, r3
    1ec4:	4691      	mov	r9, r2
	if (isr) {
    1ec6:	4643      	mov	r3, r8
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d005      	beq.n	1ed8 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ecc:	016b      	lsls	r3, r5, #5
    1ece:	4a72      	ldr	r2, [pc, #456]	; (2098 <STACK_SIZE+0x98>)
    1ed0:	4694      	mov	ip, r2
    1ed2:	4463      	add	r3, ip
    1ed4:	2201      	movs	r2, #1
    1ed6:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1ed8:	7ce3      	ldrb	r3, [r4, #19]
    1eda:	069b      	lsls	r3, r3, #26
    1edc:	d50f      	bpl.n	1efe <_usb_d_dev_out_next+0x82>
    1ede:	6863      	ldr	r3, [r4, #4]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d039      	beq.n	1f58 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1ee4:	68a0      	ldr	r0, [r4, #8]
    1ee6:	1a1b      	subs	r3, r3, r0
    1ee8:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1eea:	6822      	ldr	r2, [r4, #0]
    1eec:	4694      	mov	ip, r2
    1eee:	4460      	add	r0, ip
    1ef0:	68e1      	ldr	r1, [r4, #12]
    1ef2:	001a      	movs	r2, r3
    1ef4:	42bb      	cmp	r3, r7
    1ef6:	d900      	bls.n	1efa <_usb_d_dev_out_next+0x7e>
    1ef8:	003a      	movs	r2, r7
    1efa:	4b68      	ldr	r3, [pc, #416]	; (209c <STACK_SIZE+0x9c>)
    1efc:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1efe:	6863      	ldr	r3, [r4, #4]
    1f00:	2b00      	cmp	r3, #0
    1f02:	d029      	beq.n	1f58 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1f04:	4642      	mov	r2, r8
    1f06:	2a00      	cmp	r2, #0
    1f08:	d042      	beq.n	1f90 <_usb_d_dev_out_next+0x114>
    1f0a:	8a22      	ldrh	r2, [r4, #16]
    1f0c:	42ba      	cmp	r2, r7
    1f0e:	d93f      	bls.n	1f90 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1f10:	7ce3      	ldrb	r3, [r4, #19]
    1f12:	2210      	movs	r2, #16
    1f14:	4393      	bics	r3, r2
    1f16:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1f18:	68a3      	ldr	r3, [r4, #8]
    1f1a:	445b      	add	r3, fp
    1f1c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1f1e:	464b      	mov	r3, r9
    1f20:	2b01      	cmp	r3, #1
    1f22:	d100      	bne.n	1f26 <_usb_d_dev_out_next+0xaa>
    1f24:	e087      	b.n	2036 <STACK_SIZE+0x36>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f26:	016b      	lsls	r3, r5, #5
    1f28:	4a5d      	ldr	r2, [pc, #372]	; (20a0 <STACK_SIZE+0xa0>)
    1f2a:	4694      	mov	ip, r2
    1f2c:	4463      	add	r3, ip
    1f2e:	2225      	movs	r2, #37	; 0x25
    1f30:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1f32:	2d00      	cmp	r5, #0
    1f34:	d102      	bne.n	1f3c <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1f36:	4b56      	ldr	r3, [pc, #344]	; (2090 <STACK_SIZE+0x90>)
    1f38:	68e2      	ldr	r2, [r4, #12]
    1f3a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1f3c:	2100      	movs	r1, #0
    1f3e:	0020      	movs	r0, r4
    1f40:	4b58      	ldr	r3, [pc, #352]	; (20a4 <STACK_SIZE+0xa4>)
    1f42:	4798      	blx	r3
	return;
    1f44:	e059      	b.n	1ffa <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f46:	8a06      	ldrh	r6, [r0, #16]
    1f48:	4b52      	ldr	r3, [pc, #328]	; (2094 <STACK_SIZE+0x94>)
    1f4a:	429e      	cmp	r6, r3
    1f4c:	d100      	bne.n	1f50 <_usb_d_dev_out_next+0xd4>
    1f4e:	e08e      	b.n	206e <STACK_SIZE+0x6e>
    1f50:	2300      	movs	r3, #0
    1f52:	469b      	mov	fp, r3
    1f54:	469a      	mov	sl, r3
    1f56:	e7ae      	b.n	1eb6 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1f58:	7ce3      	ldrb	r3, [r4, #19]
    1f5a:	06db      	lsls	r3, r3, #27
    1f5c:	d400      	bmi.n	1f60 <_usb_d_dev_out_next+0xe4>
    1f5e:	e07f      	b.n	2060 <STACK_SIZE+0x60>
		ept->flags.bits.need_zlp  = 0;
    1f60:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1f62:	2210      	movs	r2, #16
    1f64:	4393      	bics	r3, r2
    1f66:	2220      	movs	r2, #32
    1f68:	4313      	orrs	r3, r2
    1f6a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1f6c:	4a48      	ldr	r2, [pc, #288]	; (2090 <STACK_SIZE+0x90>)
    1f6e:	016b      	lsls	r3, r5, #5
    1f70:	68e1      	ldr	r1, [r4, #12]
    1f72:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1f74:	8a21      	ldrh	r1, [r4, #16]
    1f76:	18d3      	adds	r3, r2, r3
    1f78:	685a      	ldr	r2, [r3, #4]
    1f7a:	0489      	lsls	r1, r1, #18
    1f7c:	0909      	lsrs	r1, r1, #4
    1f7e:	484a      	ldr	r0, [pc, #296]	; (20a8 <STACK_SIZE+0xa8>)
    1f80:	4002      	ands	r2, r0
    1f82:	430a      	orrs	r2, r1
    1f84:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1f86:	685a      	ldr	r2, [r3, #4]
    1f88:	0b92      	lsrs	r2, r2, #14
    1f8a:	0392      	lsls	r2, r2, #14
    1f8c:	605a      	str	r2, [r3, #4]
    1f8e:	e022      	b.n	1fd6 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1f90:	68a2      	ldr	r2, [r4, #8]
    1f92:	4452      	add	r2, sl
    1f94:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1f96:	4293      	cmp	r3, r2
    1f98:	d9c1      	bls.n	1f1e <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1f9a:	1a9b      	subs	r3, r3, r2
    1f9c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1f9e:	7ce1      	ldrb	r1, [r4, #19]
    1fa0:	0689      	lsls	r1, r1, #26
    1fa2:	d530      	bpl.n	2006 <STACK_SIZE+0x6>
    1fa4:	8a22      	ldrh	r2, [r4, #16]
    1fa6:	1c11      	adds	r1, r2, #0
    1fa8:	b292      	uxth	r2, r2
    1faa:	429a      	cmp	r2, r3
    1fac:	d900      	bls.n	1fb0 <_usb_d_dev_out_next+0x134>
    1fae:	1c19      	adds	r1, r3, #0
    1fb0:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1fb2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1fb4:	016a      	lsls	r2, r5, #5
    1fb6:	4936      	ldr	r1, [pc, #216]	; (2090 <STACK_SIZE+0x90>)
    1fb8:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1fba:	016a      	lsls	r2, r5, #5
    1fbc:	4934      	ldr	r1, [pc, #208]	; (2090 <STACK_SIZE+0x90>)
    1fbe:	1889      	adds	r1, r1, r2
    1fc0:	684a      	ldr	r2, [r1, #4]
    1fc2:	049b      	lsls	r3, r3, #18
    1fc4:	091b      	lsrs	r3, r3, #4
    1fc6:	4838      	ldr	r0, [pc, #224]	; (20a8 <STACK_SIZE+0xa8>)
    1fc8:	4002      	ands	r2, r0
    1fca:	4313      	orrs	r3, r2
    1fcc:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1fce:	684b      	ldr	r3, [r1, #4]
    1fd0:	0b9b      	lsrs	r3, r3, #14
    1fd2:	039b      	lsls	r3, r3, #14
    1fd4:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1fd6:	4643      	mov	r3, r8
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d108      	bne.n	1fee <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1fdc:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1fde:	464b      	mov	r3, r9
    1fe0:	2b01      	cmp	r3, #1
    1fe2:	d02f      	beq.n	2044 <STACK_SIZE+0x44>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1fe4:	016b      	lsls	r3, r5, #5
    1fe6:	4931      	ldr	r1, [pc, #196]	; (20ac <STACK_SIZE+0xac>)
    1fe8:	468c      	mov	ip, r1
    1fea:	4463      	add	r3, ip
    1fec:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1fee:	016d      	lsls	r5, r5, #5
    1ff0:	4b29      	ldr	r3, [pc, #164]	; (2098 <STACK_SIZE+0x98>)
    1ff2:	469c      	mov	ip, r3
    1ff4:	4465      	add	r5, ip
    1ff6:	2340      	movs	r3, #64	; 0x40
    1ff8:	712b      	strb	r3, [r5, #4]
}
    1ffa:	bc3c      	pop	{r2, r3, r4, r5}
    1ffc:	4690      	mov	r8, r2
    1ffe:	4699      	mov	r9, r3
    2000:	46a2      	mov	sl, r4
    2002:	46ab      	mov	fp, r5
    2004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    2006:	8a21      	ldrh	r1, [r4, #16]
    2008:	428b      	cmp	r3, r1
    200a:	d90a      	bls.n	2022 <STACK_SIZE+0x22>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    200c:	2180      	movs	r1, #128	; 0x80
    200e:	0189      	lsls	r1, r1, #6
    2010:	428b      	cmp	r3, r1
    2012:	d80d      	bhi.n	2030 <STACK_SIZE+0x30>
    2014:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2016:	6821      	ldr	r1, [r4, #0]
    2018:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    201a:	0169      	lsls	r1, r5, #5
    201c:	481c      	ldr	r0, [pc, #112]	; (2090 <STACK_SIZE+0x90>)
    201e:	500a      	str	r2, [r1, r0]
    2020:	e7cb      	b.n	1fba <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    2022:	428b      	cmp	r3, r1
    2024:	d2f7      	bcs.n	2016 <STACK_SIZE+0x16>
					ept->flags.bits.use_cache = 1;
    2026:	7ce1      	ldrb	r1, [r4, #19]
    2028:	2020      	movs	r0, #32
    202a:	4301      	orrs	r1, r0
    202c:	74e1      	strb	r1, [r4, #19]
    202e:	e7f2      	b.n	2016 <STACK_SIZE+0x16>
						trans_next = USB_D_DEV_TRANS_MAX;
    2030:	2380      	movs	r3, #128	; 0x80
    2032:	019b      	lsls	r3, r3, #6
    2034:	e7ef      	b.n	2016 <STACK_SIZE+0x16>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2036:	016b      	lsls	r3, r5, #5
    2038:	4a19      	ldr	r2, [pc, #100]	; (20a0 <STACK_SIZE+0xa0>)
    203a:	4694      	mov	ip, r2
    203c:	4463      	add	r3, ip
    203e:	222d      	movs	r2, #45	; 0x2d
    2040:	701a      	strb	r2, [r3, #0]
    2042:	e776      	b.n	1f32 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    2044:	016a      	lsls	r2, r5, #5
    2046:	4b12      	ldr	r3, [pc, #72]	; (2090 <STACK_SIZE+0x90>)
    2048:	189b      	adds	r3, r3, r2
    204a:	2200      	movs	r2, #0
    204c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    204e:	322d      	adds	r2, #45	; 0x2d
    2050:	e7c8      	b.n	1fe4 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    2052:	05bf      	lsls	r7, r7, #22
    2054:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2056:	7cc3      	ldrb	r3, [r0, #19]
    2058:	2207      	movs	r2, #7
    205a:	401a      	ands	r2, r3
    205c:	4691      	mov	r9, r2
    205e:	e735      	b.n	1ecc <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    2060:	4643      	mov	r3, r8
    2062:	2b00      	cmp	r3, #0
    2064:	d10c      	bne.n	2080 <STACK_SIZE+0x80>
		ept->trans_count += trans_size;
    2066:	68a3      	ldr	r3, [r4, #8]
    2068:	4453      	add	r3, sl
    206a:	60a3      	str	r3, [r4, #8]
    206c:	e757      	b.n	1f1e <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    206e:	7cc3      	ldrb	r3, [r0, #19]
    2070:	2207      	movs	r2, #7
    2072:	401a      	ands	r2, r3
    2074:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    2076:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2078:	2300      	movs	r3, #0
    207a:	469b      	mov	fp, r3
    207c:	469a      	mov	sl, r3
    207e:	e72b      	b.n	1ed8 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    2080:	8a23      	ldrh	r3, [r4, #16]
    2082:	42bb      	cmp	r3, r7
    2084:	d900      	bls.n	2088 <STACK_SIZE+0x88>
    2086:	e743      	b.n	1f10 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    2088:	68a3      	ldr	r3, [r4, #8]
    208a:	4453      	add	r3, sl
    208c:	60a3      	str	r3, [r4, #8]
    208e:	e746      	b.n	1f1e <_usb_d_dev_out_next+0xa2>
    2090:	20000198 	.word	0x20000198
    2094:	000003ff 	.word	0x000003ff
    2098:	41005100 	.word	0x41005100
    209c:	00003da5 	.word	0x00003da5
    20a0:	41005108 	.word	0x41005108
    20a4:	00001afd 	.word	0x00001afd
    20a8:	f0003fff 	.word	0xf0003fff
    20ac:	41005109 	.word	0x41005109

000020b0 <_usb_d_dev_init>:
{
    20b0:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    20b2:	4b31      	ldr	r3, [pc, #196]	; (2178 <_usb_d_dev_init+0xc8>)
    20b4:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    20b6:	07db      	lsls	r3, r3, #31
    20b8:	d41f      	bmi.n	20fa <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    20ba:	492f      	ldr	r1, [pc, #188]	; (2178 <_usb_d_dev_init+0xc8>)
    20bc:	2203      	movs	r2, #3
    20be:	788b      	ldrb	r3, [r1, #2]
    20c0:	4213      	tst	r3, r2
    20c2:	d1fc      	bne.n	20be <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    20c4:	4b2c      	ldr	r3, [pc, #176]	; (2178 <_usb_d_dev_init+0xc8>)
    20c6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    20c8:	079b      	lsls	r3, r3, #30
    20ca:	d50e      	bpl.n	20ea <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    20cc:	4a2a      	ldr	r2, [pc, #168]	; (2178 <_usb_d_dev_init+0xc8>)
    20ce:	7813      	ldrb	r3, [r2, #0]
    20d0:	2102      	movs	r1, #2
    20d2:	438b      	bics	r3, r1
    20d4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    20d6:	0011      	movs	r1, r2
    20d8:	2203      	movs	r2, #3
    20da:	788b      	ldrb	r3, [r1, #2]
    20dc:	4213      	tst	r3, r2
    20de:	d1fc      	bne.n	20da <_usb_d_dev_init+0x2a>
    20e0:	4925      	ldr	r1, [pc, #148]	; (2178 <_usb_d_dev_init+0xc8>)
    20e2:	2202      	movs	r2, #2
    20e4:	788b      	ldrb	r3, [r1, #2]
    20e6:	4213      	tst	r3, r2
    20e8:	d1fc      	bne.n	20e4 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    20ea:	2201      	movs	r2, #1
    20ec:	4b22      	ldr	r3, [pc, #136]	; (2178 <_usb_d_dev_init+0xc8>)
    20ee:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    20f0:	0019      	movs	r1, r3
    20f2:	3202      	adds	r2, #2
    20f4:	788b      	ldrb	r3, [r1, #2]
    20f6:	4213      	tst	r3, r2
    20f8:	d1fc      	bne.n	20f4 <_usb_d_dev_init+0x44>
    20fa:	491f      	ldr	r1, [pc, #124]	; (2178 <_usb_d_dev_init+0xc8>)
    20fc:	2201      	movs	r2, #1
    20fe:	788b      	ldrb	r3, [r1, #2]
    2100:	4213      	tst	r3, r2
    2102:	d1fc      	bne.n	20fe <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2104:	4b1d      	ldr	r3, [pc, #116]	; (217c <_usb_d_dev_init+0xcc>)
    2106:	4a1e      	ldr	r2, [pc, #120]	; (2180 <_usb_d_dev_init+0xd0>)
    2108:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    210a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    210c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    210e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2110:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2112:	4b1c      	ldr	r3, [pc, #112]	; (2184 <_usb_d_dev_init+0xd4>)
    2114:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2116:	4b1c      	ldr	r3, [pc, #112]	; (2188 <_usb_d_dev_init+0xd8>)
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    211c:	211f      	movs	r1, #31
    211e:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    2120:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    2122:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2124:	019b      	lsls	r3, r3, #6
    2126:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    2128:	2a1f      	cmp	r2, #31
    212a:	d01f      	beq.n	216c <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    212c:	291f      	cmp	r1, #31
    212e:	d01f      	beq.n	2170 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    2130:	2b07      	cmp	r3, #7
    2132:	d01f      	beq.n	2174 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2134:	0192      	lsls	r2, r2, #6
    2136:	430a      	orrs	r2, r1
    2138:	031b      	lsls	r3, r3, #12
    213a:	4313      	orrs	r3, r2
    213c:	4a0e      	ldr	r2, [pc, #56]	; (2178 <_usb_d_dev_init+0xc8>)
    213e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2140:	78d3      	ldrb	r3, [r2, #3]
    2142:	2103      	movs	r1, #3
    2144:	430b      	orrs	r3, r1
    2146:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2148:	78d3      	ldrb	r3, [r2, #3]
    214a:	210c      	movs	r1, #12
    214c:	430b      	orrs	r3, r1
    214e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2150:	2304      	movs	r3, #4
    2152:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2154:	0011      	movs	r1, r2
    2156:	2203      	movs	r2, #3
    2158:	788b      	ldrb	r3, [r1, #2]
    215a:	4213      	tst	r3, r2
    215c:	d1fc      	bne.n	2158 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    215e:	4b06      	ldr	r3, [pc, #24]	; (2178 <_usb_d_dev_init+0xc8>)
    2160:	4a06      	ldr	r2, [pc, #24]	; (217c <_usb_d_dev_init+0xcc>)
    2162:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2164:	2201      	movs	r2, #1
    2166:	811a      	strh	r2, [r3, #8]
}
    2168:	2000      	movs	r0, #0
    216a:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    216c:	3a1a      	subs	r2, #26
    216e:	e7dd      	b.n	212c <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    2170:	3902      	subs	r1, #2
    2172:	e7dd      	b.n	2130 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    2174:	3b02      	subs	r3, #2
    2176:	e7dd      	b.n	2134 <_usb_d_dev_init+0x84>
    2178:	41005000 	.word	0x41005000
    217c:	20000198 	.word	0x20000198
    2180:	00001a3d 	.word	0x00001a3d
    2184:	00001c91 	.word	0x00001c91
    2188:	00806024 	.word	0x00806024

0000218c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    218c:	4b10      	ldr	r3, [pc, #64]	; (21d0 <_usb_d_dev_enable+0x44>)
    218e:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2190:	079b      	lsls	r3, r3, #30
    2192:	d11a      	bne.n	21ca <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2194:	490e      	ldr	r1, [pc, #56]	; (21d0 <_usb_d_dev_enable+0x44>)
    2196:	2203      	movs	r2, #3
    2198:	788b      	ldrb	r3, [r1, #2]
    219a:	4213      	tst	r3, r2
    219c:	d1fc      	bne.n	2198 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    219e:	4b0c      	ldr	r3, [pc, #48]	; (21d0 <_usb_d_dev_enable+0x44>)
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    21a4:	079a      	lsls	r2, r3, #30
    21a6:	d408      	bmi.n	21ba <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    21a8:	2202      	movs	r2, #2
    21aa:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    21ac:	4a08      	ldr	r2, [pc, #32]	; (21d0 <_usb_d_dev_enable+0x44>)
    21ae:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    21b0:	0011      	movs	r1, r2
    21b2:	2203      	movs	r2, #3
    21b4:	788b      	ldrb	r3, [r1, #2]
    21b6:	4213      	tst	r3, r2
    21b8:	d1fc      	bne.n	21b4 <_usb_d_dev_enable+0x28>
    21ba:	2280      	movs	r2, #128	; 0x80
    21bc:	4b05      	ldr	r3, [pc, #20]	; (21d4 <_usb_d_dev_enable+0x48>)
    21be:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    21c0:	4a05      	ldr	r2, [pc, #20]	; (21d8 <_usb_d_dev_enable+0x4c>)
    21c2:	4b03      	ldr	r3, [pc, #12]	; (21d0 <_usb_d_dev_enable+0x44>)
    21c4:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    21c6:	2000      	movs	r0, #0
}
    21c8:	4770      	bx	lr
		return -USB_ERR_DENIED;
    21ca:	2011      	movs	r0, #17
    21cc:	4240      	negs	r0, r0
    21ce:	e7fb      	b.n	21c8 <_usb_d_dev_enable+0x3c>
    21d0:	41005000 	.word	0x41005000
    21d4:	e000e100 	.word	0xe000e100
    21d8:	0000028d 	.word	0x0000028d

000021dc <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    21dc:	4a02      	ldr	r2, [pc, #8]	; (21e8 <_usb_d_dev_attach+0xc>)
    21de:	8913      	ldrh	r3, [r2, #8]
    21e0:	2101      	movs	r1, #1
    21e2:	438b      	bics	r3, r1
    21e4:	8113      	strh	r3, [r2, #8]
}
    21e6:	4770      	bx	lr
    21e8:	41005000 	.word	0x41005000

000021ec <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    21ec:	2380      	movs	r3, #128	; 0x80
    21ee:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    21f0:	4b01      	ldr	r3, [pc, #4]	; (21f8 <_usb_d_dev_set_address+0xc>)
    21f2:	7298      	strb	r0, [r3, #10]
}
    21f4:	4770      	bx	lr
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	41005000 	.word	0x41005000

000021fc <_usb_d_dev_ep_init>:
{
    21fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    21fe:	240f      	movs	r4, #15
    2200:	4004      	ands	r4, r0
    2202:	b243      	sxtb	r3, r0
    2204:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2206:	2c00      	cmp	r4, #0
    2208:	d054      	beq.n	22b4 <_usb_d_dev_ep_init+0xb8>
    220a:	0025      	movs	r5, r4
    220c:	2b00      	cmp	r3, #0
    220e:	db07      	blt.n	2220 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2210:	2303      	movs	r3, #3
    2212:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2214:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    2216:	2c02      	cmp	r4, #2
    2218:	d950      	bls.n	22bc <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    221a:	2012      	movs	r0, #18
    221c:	4240      	negs	r0, r0
    221e:	e025      	b.n	226c <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2220:	1ca5      	adds	r5, r4, #2
    2222:	e7f5      	b.n	2210 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2224:	4663      	mov	r3, ip
    2226:	2b00      	cmp	r3, #0
    2228:	db21      	blt.n	226e <_usb_d_dev_ep_init+0x72>
    222a:	007b      	lsls	r3, r7, #1
    222c:	19db      	adds	r3, r3, r7
    222e:	009b      	lsls	r3, r3, #2
    2230:	4c3b      	ldr	r4, [pc, #236]	; (2320 <_usb_d_dev_ep_init+0x124>)
    2232:	591b      	ldr	r3, [r3, r4]
    2234:	2b00      	cmp	r3, #0
    2236:	d166      	bne.n	2306 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2238:	007b      	lsls	r3, r7, #1
    223a:	19df      	adds	r7, r3, r7
    223c:	00bf      	lsls	r7, r7, #2
    223e:	4b38      	ldr	r3, [pc, #224]	; (2320 <_usb_d_dev_ep_init+0x124>)
    2240:	58ff      	ldr	r7, [r7, r3]
    2242:	4b38      	ldr	r3, [pc, #224]	; (2324 <_usb_d_dev_ep_init+0x128>)
    2244:	00ae      	lsls	r6, r5, #2
    2246:	1974      	adds	r4, r6, r5
    2248:	00a4      	lsls	r4, r4, #2
    224a:	191c      	adds	r4, r3, r4
    224c:	3480      	adds	r4, #128	; 0x80
    224e:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    2250:	3360      	adds	r3, #96	; 0x60
    2252:	1974      	adds	r4, r6, r5
    2254:	00a4      	lsls	r4, r4, #2
    2256:	191c      	adds	r4, r3, r4
    2258:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    225a:	3427      	adds	r4, #39	; 0x27
    225c:	3101      	adds	r1, #1
    225e:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    2260:	1975      	adds	r5, r6, r5
    2262:	00ad      	lsls	r5, r5, #2
    2264:	195b      	adds	r3, r3, r5
    2266:	3326      	adds	r3, #38	; 0x26
    2268:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    226a:	2000      	movs	r0, #0
}
    226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    226e:	007b      	lsls	r3, r7, #1
    2270:	19db      	adds	r3, r3, r7
    2272:	009b      	lsls	r3, r3, #2
    2274:	4c2a      	ldr	r4, [pc, #168]	; (2320 <_usb_d_dev_ep_init+0x124>)
    2276:	18e3      	adds	r3, r4, r3
    2278:	685b      	ldr	r3, [r3, #4]
    227a:	2b00      	cmp	r3, #0
    227c:	d106      	bne.n	228c <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    227e:	007b      	lsls	r3, r7, #1
    2280:	19df      	adds	r7, r3, r7
    2282:	00bf      	lsls	r7, r7, #2
    2284:	4b26      	ldr	r3, [pc, #152]	; (2320 <_usb_d_dev_ep_init+0x124>)
    2286:	19df      	adds	r7, r3, r7
    2288:	687f      	ldr	r7, [r7, #4]
    228a:	e7da      	b.n	2242 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    228c:	007b      	lsls	r3, r7, #1
    228e:	19db      	adds	r3, r3, r7
    2290:	009b      	lsls	r3, r3, #2
    2292:	4c23      	ldr	r4, [pc, #140]	; (2320 <_usb_d_dev_ep_init+0x124>)
    2294:	18e3      	adds	r3, r4, r3
    2296:	895b      	ldrh	r3, [r3, #10]
    2298:	4293      	cmp	r3, r2
    229a:	daf0      	bge.n	227e <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    229c:	2013      	movs	r0, #19
    229e:	4240      	negs	r0, r0
    22a0:	e7e4      	b.n	226c <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    22a2:	2014      	movs	r0, #20
    22a4:	4240      	negs	r0, r0
    22a6:	e7e1      	b.n	226c <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    22a8:	2014      	movs	r0, #20
    22aa:	4240      	negs	r0, r0
    22ac:	e7de      	b.n	226c <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    22ae:	2013      	movs	r0, #19
    22b0:	4240      	negs	r0, r0
    22b2:	e7db      	b.n	226c <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    22b4:	2303      	movs	r3, #3
    22b6:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    22b8:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    22ba:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    22bc:	00ab      	lsls	r3, r5, #2
    22be:	195b      	adds	r3, r3, r5
    22c0:	009e      	lsls	r6, r3, #2
    22c2:	4b18      	ldr	r3, [pc, #96]	; (2324 <_usb_d_dev_ep_init+0x128>)
    22c4:	199b      	adds	r3, r3, r6
    22c6:	3386      	adds	r3, #134	; 0x86
    22c8:	781b      	ldrb	r3, [r3, #0]
    22ca:	2bff      	cmp	r3, #255	; 0xff
    22cc:	d1e9      	bne.n	22a2 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    22ce:	2900      	cmp	r1, #0
    22d0:	d1a8      	bne.n	2224 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    22d2:	2c00      	cmp	r4, #0
    22d4:	d004      	beq.n	22e0 <_usb_d_dev_ep_init+0xe4>
    22d6:	4663      	mov	r3, ip
    22d8:	2b00      	cmp	r3, #0
    22da:	db01      	blt.n	22e0 <_usb_d_dev_ep_init+0xe4>
    22dc:	3402      	adds	r4, #2
    22de:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    22e0:	00a3      	lsls	r3, r4, #2
    22e2:	191b      	adds	r3, r3, r4
    22e4:	009b      	lsls	r3, r3, #2
    22e6:	4c0f      	ldr	r4, [pc, #60]	; (2324 <_usb_d_dev_ep_init+0x128>)
    22e8:	18e4      	adds	r4, r4, r3
    22ea:	3486      	adds	r4, #134	; 0x86
    22ec:	7823      	ldrb	r3, [r4, #0]
    22ee:	2bff      	cmp	r3, #255	; 0xff
    22f0:	d1da      	bne.n	22a8 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    22f2:	007b      	lsls	r3, r7, #1
    22f4:	19db      	adds	r3, r3, r7
    22f6:	009b      	lsls	r3, r3, #2
    22f8:	4c09      	ldr	r4, [pc, #36]	; (2320 <_usb_d_dev_ep_init+0x124>)
    22fa:	591b      	ldr	r3, [r3, r4]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d0d6      	beq.n	22ae <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2300:	4663      	mov	r3, ip
    2302:	2b00      	cmp	r3, #0
    2304:	dbb3      	blt.n	226e <_usb_d_dev_ep_init+0x72>
    2306:	007b      	lsls	r3, r7, #1
    2308:	19db      	adds	r3, r3, r7
    230a:	009b      	lsls	r3, r3, #2
    230c:	4c04      	ldr	r4, [pc, #16]	; (2320 <_usb_d_dev_ep_init+0x124>)
    230e:	18e3      	adds	r3, r4, r3
    2310:	891b      	ldrh	r3, [r3, #8]
    2312:	4293      	cmp	r3, r2
    2314:	db00      	blt.n	2318 <_usb_d_dev_ep_init+0x11c>
    2316:	e78f      	b.n	2238 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    2318:	2013      	movs	r0, #19
    231a:	4240      	negs	r0, r0
    231c:	e7a6      	b.n	226c <_usb_d_dev_ep_init+0x70>
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	000047bc 	.word	0x000047bc
    2324:	20000198 	.word	0x20000198

00002328 <_usb_d_dev_ep_deinit>:
{
    2328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    232a:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    232c:	240f      	movs	r4, #15
    232e:	4004      	ands	r4, r0
    2330:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2332:	2c00      	cmp	r4, #0
    2334:	d010      	beq.n	2358 <_usb_d_dev_ep_deinit+0x30>
    2336:	0020      	movs	r0, r4
    2338:	2f00      	cmp	r7, #0
    233a:	db02      	blt.n	2342 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    233c:	2c02      	cmp	r4, #2
    233e:	d902      	bls.n	2346 <_usb_d_dev_ep_deinit+0x1e>
}
    2340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2342:	1ca0      	adds	r0, r4, #2
    2344:	e7fa      	b.n	233c <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    2346:	0006      	movs	r6, r0
    2348:	3001      	adds	r0, #1
    234a:	0083      	lsls	r3, r0, #2
    234c:	1818      	adds	r0, r3, r0
    234e:	0080      	lsls	r0, r0, #2
    2350:	4b25      	ldr	r3, [pc, #148]	; (23e8 <_usb_d_dev_ep_deinit+0xc0>)
    2352:	3360      	adds	r3, #96	; 0x60
    2354:	1818      	adds	r0, r3, r0
    2356:	e002      	b.n	235e <_usb_d_dev_ep_deinit+0x36>
    2358:	4823      	ldr	r0, [pc, #140]	; (23e8 <_usb_d_dev_ep_deinit+0xc0>)
    235a:	3074      	adds	r0, #116	; 0x74
    235c:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    235e:	00b3      	lsls	r3, r6, #2
    2360:	199b      	adds	r3, r3, r6
    2362:	009a      	lsls	r2, r3, #2
    2364:	4b20      	ldr	r3, [pc, #128]	; (23e8 <_usb_d_dev_ep_deinit+0xc0>)
    2366:	189b      	adds	r3, r3, r2
    2368:	3386      	adds	r3, #134	; 0x86
    236a:	781b      	ldrb	r3, [r3, #0]
    236c:	2bff      	cmp	r3, #255	; 0xff
    236e:	d0e7      	beq.n	2340 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2370:	0ff9      	lsrs	r1, r7, #31
    2372:	2203      	movs	r2, #3
    2374:	4b1d      	ldr	r3, [pc, #116]	; (23ec <_usb_d_dev_ep_deinit+0xc4>)
    2376:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2378:	00b3      	lsls	r3, r6, #2
    237a:	199b      	adds	r3, r3, r6
    237c:	009a      	lsls	r2, r3, #2
    237e:	4b1a      	ldr	r3, [pc, #104]	; (23e8 <_usb_d_dev_ep_deinit+0xc0>)
    2380:	189b      	adds	r3, r3, r2
    2382:	3380      	adds	r3, #128	; 0x80
    2384:	79da      	ldrb	r2, [r3, #7]
    2386:	2307      	movs	r3, #7
    2388:	4013      	ands	r3, r2
    238a:	2b01      	cmp	r3, #1
    238c:	d01b      	beq.n	23c6 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    238e:	2f00      	cmp	r7, #0
    2390:	db1f      	blt.n	23d2 <_usb_d_dev_ep_deinit+0xaa>
    2392:	016d      	lsls	r5, r5, #5
    2394:	4b16      	ldr	r3, [pc, #88]	; (23f0 <_usb_d_dev_ep_deinit+0xc8>)
    2396:	469c      	mov	ip, r3
    2398:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    239a:	2280      	movs	r2, #128	; 0x80
    239c:	0052      	lsls	r2, r2, #1
    239e:	5cab      	ldrb	r3, [r5, r2]
    23a0:	2107      	movs	r1, #7
    23a2:	438b      	bics	r3, r1
    23a4:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    23a6:	4b10      	ldr	r3, [pc, #64]	; (23e8 <_usb_d_dev_ep_deinit+0xc0>)
    23a8:	3360      	adds	r3, #96	; 0x60
    23aa:	00b1      	lsls	r1, r6, #2
    23ac:	198a      	adds	r2, r1, r6
    23ae:	0092      	lsls	r2, r2, #2
    23b0:	189a      	adds	r2, r3, r2
    23b2:	3227      	adds	r2, #39	; 0x27
    23b4:	2000      	movs	r0, #0
    23b6:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    23b8:	198e      	adds	r6, r1, r6
    23ba:	00b6      	lsls	r6, r6, #2
    23bc:	199b      	adds	r3, r3, r6
    23be:	3326      	adds	r3, #38	; 0x26
    23c0:	22ff      	movs	r2, #255	; 0xff
    23c2:	701a      	strb	r2, [r3, #0]
    23c4:	e7bc      	b.n	2340 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    23c6:	3508      	adds	r5, #8
    23c8:	016d      	lsls	r5, r5, #5
    23ca:	2200      	movs	r2, #0
    23cc:	4b08      	ldr	r3, [pc, #32]	; (23f0 <_usb_d_dev_ep_deinit+0xc8>)
    23ce:	54ea      	strb	r2, [r5, r3]
    23d0:	e7e9      	b.n	23a6 <_usb_d_dev_ep_deinit+0x7e>
    23d2:	0164      	lsls	r4, r4, #5
    23d4:	4b06      	ldr	r3, [pc, #24]	; (23f0 <_usb_d_dev_ep_deinit+0xc8>)
    23d6:	469c      	mov	ip, r3
    23d8:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    23da:	2280      	movs	r2, #128	; 0x80
    23dc:	0052      	lsls	r2, r2, #1
    23de:	5ca3      	ldrb	r3, [r4, r2]
    23e0:	2170      	movs	r1, #112	; 0x70
    23e2:	438b      	bics	r3, r1
    23e4:	54a3      	strb	r3, [r4, r2]
    23e6:	e7de      	b.n	23a6 <_usb_d_dev_ep_deinit+0x7e>
    23e8:	20000198 	.word	0x20000198
    23ec:	00001b25 	.word	0x00001b25
    23f0:	41005000 	.word	0x41005000

000023f4 <_usb_d_dev_ep_enable>:
{
    23f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23f6:	46c6      	mov	lr, r8
    23f8:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    23fa:	220f      	movs	r2, #15
    23fc:	4002      	ands	r2, r0
    23fe:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2400:	2a00      	cmp	r2, #0
    2402:	d100      	bne.n	2406 <_usb_d_dev_ep_enable+0x12>
    2404:	e092      	b.n	252c <_usb_d_dev_ep_enable+0x138>
    2406:	0013      	movs	r3, r2
    2408:	2800      	cmp	r0, #0
    240a:	db0b      	blt.n	2424 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    240c:	0011      	movs	r1, r2
    240e:	3208      	adds	r2, #8
    2410:	0152      	lsls	r2, r2, #5
    2412:	4caa      	ldr	r4, [pc, #680]	; (26bc <_usb_d_dev_ep_enable+0x2c8>)
    2414:	5d15      	ldrb	r5, [r2, r4]
    2416:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2418:	2902      	cmp	r1, #2
    241a:	d800      	bhi.n	241e <_usb_d_dev_ep_enable+0x2a>
    241c:	e08d      	b.n	253a <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    241e:	2012      	movs	r0, #18
    2420:	4240      	negs	r0, r0
    2422:	e0e5      	b.n	25f0 <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2424:	1c93      	adds	r3, r2, #2
    2426:	e7f1      	b.n	240c <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2428:	3276      	adds	r2, #118	; 0x76
    242a:	422a      	tst	r2, r5
    242c:	d175      	bne.n	251a <_usb_d_dev_ep_enable+0x126>
    242e:	4aa3      	ldr	r2, [pc, #652]	; (26bc <_usb_d_dev_ep_enable+0x2c8>)
    2430:	4690      	mov	r8, r2
    2432:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2434:	2011      	movs	r0, #17
    2436:	2280      	movs	r2, #128	; 0x80
    2438:	0052      	lsls	r2, r2, #1
    243a:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    243c:	009a      	lsls	r2, r3, #2
    243e:	18d2      	adds	r2, r2, r3
    2440:	0095      	lsls	r5, r2, #2
    2442:	4a9f      	ldr	r2, [pc, #636]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    2444:	3260      	adds	r2, #96	; 0x60
    2446:	1952      	adds	r2, r2, r5
    2448:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    244a:	0395      	lsls	r5, r2, #14
    244c:	489d      	ldr	r0, [pc, #628]	; (26c4 <_usb_d_dev_ep_enable+0x2d0>)
    244e:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2450:	2080      	movs	r0, #128	; 0x80
    2452:	0080      	lsls	r0, r0, #2
    2454:	4282      	cmp	r2, r0
    2456:	d900      	bls.n	245a <_usb_d_dev_ep_enable+0x66>
    2458:	e0cd      	b.n	25f6 <_usb_d_dev_ep_enable+0x202>
    245a:	3801      	subs	r0, #1
    245c:	38ff      	subs	r0, #255	; 0xff
    245e:	4282      	cmp	r2, r0
    2460:	d900      	bls.n	2464 <_usb_d_dev_ep_enable+0x70>
    2462:	e113      	b.n	268c <_usb_d_dev_ep_enable+0x298>
    2464:	2a80      	cmp	r2, #128	; 0x80
    2466:	d900      	bls.n	246a <_usb_d_dev_ep_enable+0x76>
    2468:	e100      	b.n	266c <_usb_d_dev_ep_enable+0x278>
    246a:	2a40      	cmp	r2, #64	; 0x40
    246c:	d900      	bls.n	2470 <_usb_d_dev_ep_enable+0x7c>
    246e:	e115      	b.n	269c <_usb_d_dev_ep_enable+0x2a8>
    2470:	2a20      	cmp	r2, #32
    2472:	d900      	bls.n	2476 <_usb_d_dev_ep_enable+0x82>
    2474:	e102      	b.n	267c <_usb_d_dev_ep_enable+0x288>
    2476:	2a10      	cmp	r2, #16
    2478:	d900      	bls.n	247c <_usb_d_dev_ep_enable+0x88>
    247a:	e117      	b.n	26ac <_usb_d_dev_ep_enable+0x2b8>
    247c:	38f8      	subs	r0, #248	; 0xf8
    247e:	4290      	cmp	r0, r2
    2480:	4180      	sbcs	r0, r0
    2482:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2484:	0706      	lsls	r6, r0, #28
    2486:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2488:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    248a:	0495      	lsls	r5, r2, #18
    248c:	0cad      	lsrs	r5, r5, #18
    248e:	e0b9      	b.n	2604 <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2490:	2270      	movs	r2, #112	; 0x70
    2492:	422a      	tst	r2, r5
    2494:	d144      	bne.n	2520 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2496:	488a      	ldr	r0, [pc, #552]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    2498:	009e      	lsls	r6, r3, #2
    249a:	18f2      	adds	r2, r6, r3
    249c:	0092      	lsls	r2, r2, #2
    249e:	1882      	adds	r2, r0, r2
    24a0:	3280      	adds	r2, #128	; 0x80
    24a2:	79d2      	ldrb	r2, [r2, #7]
    24a4:	0752      	lsls	r2, r2, #29
    24a6:	0e52      	lsrs	r2, r2, #25
    24a8:	4315      	orrs	r5, r2
    24aa:	4a84      	ldr	r2, [pc, #528]	; (26bc <_usb_d_dev_ep_enable+0x2c8>)
    24ac:	4694      	mov	ip, r2
    24ae:	4464      	add	r4, ip
    24b0:	2280      	movs	r2, #128	; 0x80
    24b2:	0052      	lsls	r2, r2, #1
    24b4:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    24b6:	3060      	adds	r0, #96	; 0x60
    24b8:	18f6      	adds	r6, r6, r3
    24ba:	00b6      	lsls	r6, r6, #2
    24bc:	1980      	adds	r0, r0, r6
    24be:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    24c0:	0485      	lsls	r5, r0, #18
    24c2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    24c4:	3201      	adds	r2, #1
    24c6:	32ff      	adds	r2, #255	; 0xff
    24c8:	2307      	movs	r3, #7
    24ca:	4290      	cmp	r0, r2
    24cc:	d814      	bhi.n	24f8 <_usb_d_dev_ep_enable+0x104>
    24ce:	3a01      	subs	r2, #1
    24d0:	3aff      	subs	r2, #255	; 0xff
    24d2:	3b01      	subs	r3, #1
    24d4:	4290      	cmp	r0, r2
    24d6:	d80f      	bhi.n	24f8 <_usb_d_dev_ep_enable+0x104>
    24d8:	3b01      	subs	r3, #1
    24da:	2880      	cmp	r0, #128	; 0x80
    24dc:	d80c      	bhi.n	24f8 <_usb_d_dev_ep_enable+0x104>
    24de:	3b01      	subs	r3, #1
    24e0:	2840      	cmp	r0, #64	; 0x40
    24e2:	d809      	bhi.n	24f8 <_usb_d_dev_ep_enable+0x104>
    24e4:	3b01      	subs	r3, #1
    24e6:	2820      	cmp	r0, #32
    24e8:	d806      	bhi.n	24f8 <_usb_d_dev_ep_enable+0x104>
    24ea:	3b01      	subs	r3, #1
    24ec:	2810      	cmp	r0, #16
    24ee:	d803      	bhi.n	24f8 <_usb_d_dev_ep_enable+0x104>
    24f0:	3af8      	subs	r2, #248	; 0xf8
    24f2:	4282      	cmp	r2, r0
    24f4:	4192      	sbcs	r2, r2
    24f6:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    24f8:	071b      	lsls	r3, r3, #28
    24fa:	432b      	orrs	r3, r5
    24fc:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    24fe:	2280      	movs	r2, #128	; 0x80
    2500:	2382      	movs	r3, #130	; 0x82
    2502:	005b      	lsls	r3, r3, #1
    2504:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    2506:	0149      	lsls	r1, r1, #5
    2508:	4b6d      	ldr	r3, [pc, #436]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    250a:	1859      	adds	r1, r3, r1
    250c:	2300      	movs	r3, #0
    250e:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2510:	2000      	movs	r0, #0
    2512:	e06d      	b.n	25f0 <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    2514:	2012      	movs	r0, #18
    2516:	4240      	negs	r0, r0
    2518:	e06a      	b.n	25f0 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    251a:	2014      	movs	r0, #20
    251c:	4240      	negs	r0, r0
    251e:	e067      	b.n	25f0 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    2520:	2014      	movs	r0, #20
    2522:	4240      	negs	r0, r0
    2524:	e064      	b.n	25f0 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    2526:	2014      	movs	r0, #20
    2528:	4240      	negs	r0, r0
    252a:	e061      	b.n	25f0 <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    252c:	2380      	movs	r3, #128	; 0x80
    252e:	005b      	lsls	r3, r3, #1
    2530:	4a62      	ldr	r2, [pc, #392]	; (26bc <_usb_d_dev_ep_enable+0x2c8>)
    2532:	5cd5      	ldrb	r5, [r2, r3]
    2534:	b2ed      	uxtb	r5, r5
    2536:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    2538:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    253a:	009a      	lsls	r2, r3, #2
    253c:	18d2      	adds	r2, r2, r3
    253e:	0094      	lsls	r4, r2, #2
    2540:	4a5f      	ldr	r2, [pc, #380]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    2542:	1912      	adds	r2, r2, r4
    2544:	3286      	adds	r2, #134	; 0x86
    2546:	7812      	ldrb	r2, [r2, #0]
    2548:	4694      	mov	ip, r2
    254a:	2aff      	cmp	r2, #255	; 0xff
    254c:	d0e2      	beq.n	2514 <_usb_d_dev_ep_enable+0x120>
    254e:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2550:	4a5b      	ldr	r2, [pc, #364]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    2552:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2554:	009e      	lsls	r6, r3, #2
    2556:	18f6      	adds	r6, r6, r3
    2558:	00b6      	lsls	r6, r6, #2
    255a:	1992      	adds	r2, r2, r6
    255c:	3280      	adds	r2, #128	; 0x80
    255e:	79d6      	ldrb	r6, [r2, #7]
    2560:	2207      	movs	r2, #7
    2562:	4032      	ands	r2, r6
    2564:	2a01      	cmp	r2, #1
    2566:	d100      	bne.n	256a <_usb_d_dev_ep_enable+0x176>
    2568:	e75e      	b.n	2428 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    256a:	2800      	cmp	r0, #0
    256c:	db90      	blt.n	2490 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    256e:	076a      	lsls	r2, r5, #29
    2570:	d1d9      	bne.n	2526 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2572:	4853      	ldr	r0, [pc, #332]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    2574:	009e      	lsls	r6, r3, #2
    2576:	18f2      	adds	r2, r6, r3
    2578:	0092      	lsls	r2, r2, #2
    257a:	1882      	adds	r2, r0, r2
    257c:	3280      	adds	r2, #128	; 0x80
    257e:	79d2      	ldrb	r2, [r2, #7]
    2580:	0752      	lsls	r2, r2, #29
    2582:	0f52      	lsrs	r2, r2, #29
    2584:	4315      	orrs	r5, r2
    2586:	4a4d      	ldr	r2, [pc, #308]	; (26bc <_usb_d_dev_ep_enable+0x2c8>)
    2588:	4694      	mov	ip, r2
    258a:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    258c:	2280      	movs	r2, #128	; 0x80
    258e:	0052      	lsls	r2, r2, #1
    2590:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2592:	3060      	adds	r0, #96	; 0x60
    2594:	18f6      	adds	r6, r6, r3
    2596:	00b6      	lsls	r6, r6, #2
    2598:	1980      	adds	r0, r0, r6
    259a:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    259c:	03ab      	lsls	r3, r5, #14
    259e:	4849      	ldr	r0, [pc, #292]	; (26c4 <_usb_d_dev_ep_enable+0x2d0>)
    25a0:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25a2:	3201      	adds	r2, #1
    25a4:	32ff      	adds	r2, #255	; 0xff
    25a6:	2307      	movs	r3, #7
    25a8:	4295      	cmp	r5, r2
    25aa:	d814      	bhi.n	25d6 <_usb_d_dev_ep_enable+0x1e2>
    25ac:	3a01      	subs	r2, #1
    25ae:	3aff      	subs	r2, #255	; 0xff
    25b0:	3b01      	subs	r3, #1
    25b2:	4295      	cmp	r5, r2
    25b4:	d80f      	bhi.n	25d6 <_usb_d_dev_ep_enable+0x1e2>
    25b6:	3b01      	subs	r3, #1
    25b8:	2d80      	cmp	r5, #128	; 0x80
    25ba:	d80c      	bhi.n	25d6 <_usb_d_dev_ep_enable+0x1e2>
    25bc:	3b01      	subs	r3, #1
    25be:	2d40      	cmp	r5, #64	; 0x40
    25c0:	d809      	bhi.n	25d6 <_usb_d_dev_ep_enable+0x1e2>
    25c2:	3b01      	subs	r3, #1
    25c4:	2d20      	cmp	r5, #32
    25c6:	d806      	bhi.n	25d6 <_usb_d_dev_ep_enable+0x1e2>
    25c8:	3b01      	subs	r3, #1
    25ca:	2d10      	cmp	r5, #16
    25cc:	d803      	bhi.n	25d6 <_usb_d_dev_ep_enable+0x1e2>
    25ce:	3af8      	subs	r2, #248	; 0xf8
    25d0:	42aa      	cmp	r2, r5
    25d2:	4192      	sbcs	r2, r2
    25d4:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25d6:	071b      	lsls	r3, r3, #28
    25d8:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25da:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    25dc:	2240      	movs	r2, #64	; 0x40
    25de:	2306      	movs	r3, #6
    25e0:	33ff      	adds	r3, #255	; 0xff
    25e2:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    25e4:	0149      	lsls	r1, r1, #5
    25e6:	4b36      	ldr	r3, [pc, #216]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    25e8:	1859      	adds	r1, r3, r1
    25ea:	2300      	movs	r3, #0
    25ec:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    25ee:	2000      	movs	r0, #0
}
    25f0:	bc04      	pop	{r2}
    25f2:	4690      	mov	r8, r2
    25f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25f6:	20e0      	movs	r0, #224	; 0xe0
    25f8:	05c0      	lsls	r0, r0, #23
    25fa:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25fc:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25fe:	0495      	lsls	r5, r2, #18
    2600:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2602:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2604:	0700      	lsls	r0, r0, #28
    2606:	4328      	orrs	r0, r5
    2608:	6178      	str	r0, [r7, #20]
    260a:	2506      	movs	r5, #6
    260c:	35ff      	adds	r5, #255	; 0xff
    260e:	2640      	movs	r6, #64	; 0x40
    2610:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2612:	2782      	movs	r7, #130	; 0x82
    2614:	007f      	lsls	r7, r7, #1
    2616:	2080      	movs	r0, #128	; 0x80
    2618:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    261a:	4829      	ldr	r0, [pc, #164]	; (26c0 <_usb_d_dev_ep_enable+0x2cc>)
    261c:	0149      	lsls	r1, r1, #5
    261e:	1841      	adds	r1, r0, r1
    2620:	2400      	movs	r4, #0
    2622:	728c      	strb	r4, [r1, #10]
    2624:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2626:	340f      	adds	r4, #15
    2628:	4661      	mov	r1, ip
    262a:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    262c:	0099      	lsls	r1, r3, #2
    262e:	18c9      	adds	r1, r1, r3
    2630:	0089      	lsls	r1, r1, #2
    2632:	1841      	adds	r1, r0, r1
    2634:	3180      	adds	r1, #128	; 0x80
    2636:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    2638:	0163      	lsls	r3, r4, #5
    263a:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    263c:	18c0      	adds	r0, r0, r3
    263e:	6841      	ldr	r1, [r0, #4]
    2640:	0492      	lsls	r2, r2, #18
    2642:	0914      	lsrs	r4, r2, #4
    2644:	4a20      	ldr	r2, [pc, #128]	; (26c8 <_usb_d_dev_ep_enable+0x2d4>)
    2646:	400a      	ands	r2, r1
    2648:	4322      	orrs	r2, r4
    264a:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    264c:	6842      	ldr	r2, [r0, #4]
    264e:	0b92      	lsrs	r2, r2, #14
    2650:	0392      	lsls	r2, r2, #14
    2652:	6042      	str	r2, [r0, #4]
    2654:	4a19      	ldr	r2, [pc, #100]	; (26bc <_usb_d_dev_ep_enable+0x2c8>)
    2656:	189a      	adds	r2, r3, r2
    2658:	21b0      	movs	r1, #176	; 0xb0
    265a:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    265c:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    265e:	4a1b      	ldr	r2, [pc, #108]	; (26cc <_usb_d_dev_ep_enable+0x2d8>)
    2660:	4694      	mov	ip, r2
    2662:	4463      	add	r3, ip
    2664:	2210      	movs	r2, #16
    2666:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    2668:	2000      	movs	r0, #0
    266a:	e7c1      	b.n	25f0 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    266c:	20a0      	movs	r0, #160	; 0xa0
    266e:	05c0      	lsls	r0, r0, #23
    2670:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2672:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2674:	0495      	lsls	r5, r2, #18
    2676:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2678:	2005      	movs	r0, #5
    267a:	e7c3      	b.n	2604 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    267c:	20c0      	movs	r0, #192	; 0xc0
    267e:	0580      	lsls	r0, r0, #22
    2680:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2682:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2684:	0495      	lsls	r5, r2, #18
    2686:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2688:	2003      	movs	r0, #3
    268a:	e7bb      	b.n	2604 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    268c:	20c0      	movs	r0, #192	; 0xc0
    268e:	05c0      	lsls	r0, r0, #23
    2690:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2692:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2694:	0495      	lsls	r5, r2, #18
    2696:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2698:	2006      	movs	r0, #6
    269a:	e7b3      	b.n	2604 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    269c:	2080      	movs	r0, #128	; 0x80
    269e:	05c0      	lsls	r0, r0, #23
    26a0:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    26a2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    26a4:	0495      	lsls	r5, r2, #18
    26a6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    26a8:	2004      	movs	r0, #4
    26aa:	e7ab      	b.n	2604 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    26ac:	2080      	movs	r0, #128	; 0x80
    26ae:	0580      	lsls	r0, r0, #22
    26b0:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    26b2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    26b4:	0495      	lsls	r5, r2, #18
    26b6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    26b8:	2002      	movs	r0, #2
    26ba:	e7a3      	b.n	2604 <_usb_d_dev_ep_enable+0x210>
    26bc:	41005000 	.word	0x41005000
    26c0:	20000198 	.word	0x20000198
    26c4:	0fffc000 	.word	0x0fffc000
    26c8:	f0003fff 	.word	0xf0003fff
    26cc:	41005109 	.word	0x41005109

000026d0 <_usb_d_dev_ep_stall>:
{
    26d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    26d2:	230f      	movs	r3, #15
    26d4:	4003      	ands	r3, r0
    26d6:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    26d8:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    26da:	2b00      	cmp	r3, #0
    26dc:	d009      	beq.n	26f2 <_usb_d_dev_ep_stall+0x22>
    26de:	001a      	movs	r2, r3
    26e0:	2800      	cmp	r0, #0
    26e2:	db04      	blt.n	26ee <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    26e4:	2b02      	cmp	r3, #2
    26e6:	d905      	bls.n	26f4 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    26e8:	2012      	movs	r0, #18
    26ea:	4240      	negs	r0, r0
    26ec:	e019      	b.n	2722 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    26ee:	1c9a      	adds	r2, r3, #2
    26f0:	e7f8      	b.n	26e4 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    26f2:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    26f4:	2901      	cmp	r1, #1
    26f6:	d015      	beq.n	2724 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    26f8:	2900      	cmp	r1, #0
    26fa:	d036      	beq.n	276a <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    26fc:	0093      	lsls	r3, r2, #2
    26fe:	189b      	adds	r3, r3, r2
    2700:	009b      	lsls	r3, r3, #2
    2702:	4a47      	ldr	r2, [pc, #284]	; (2820 <_usb_d_dev_ep_stall+0x150>)
    2704:	18d2      	adds	r2, r2, r3
    2706:	3286      	adds	r2, #134	; 0x86
    2708:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    270a:	230f      	movs	r3, #15
    270c:	4013      	ands	r3, r2
    270e:	015b      	lsls	r3, r3, #5
    2710:	4a44      	ldr	r2, [pc, #272]	; (2824 <_usb_d_dev_ep_stall+0x154>)
    2712:	4694      	mov	ip, r2
    2714:	4463      	add	r3, ip
    2716:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2718:	2310      	movs	r3, #16
    271a:	40a3      	lsls	r3, r4
    271c:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    271e:	1e43      	subs	r3, r0, #1
    2720:	4198      	sbcs	r0, r3
}
    2722:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2724:	2510      	movs	r5, #16
    2726:	40a5      	lsls	r5, r4
    2728:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    272a:	493d      	ldr	r1, [pc, #244]	; (2820 <_usb_d_dev_ep_stall+0x150>)
    272c:	0090      	lsls	r0, r2, #2
    272e:	1883      	adds	r3, r0, r2
    2730:	009b      	lsls	r3, r3, #2
    2732:	18cb      	adds	r3, r1, r3
    2734:	3386      	adds	r3, #134	; 0x86
    2736:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2738:	230f      	movs	r3, #15
    273a:	4033      	ands	r3, r6
    273c:	015e      	lsls	r6, r3, #5
    273e:	4f39      	ldr	r7, [pc, #228]	; (2824 <_usb_d_dev_ep_stall+0x154>)
    2740:	46bc      	mov	ip, r7
    2742:	4466      	add	r6, ip
    2744:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2746:	2520      	movs	r5, #32
    2748:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    274a:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    274c:	015b      	lsls	r3, r3, #5
    274e:	4d36      	ldr	r5, [pc, #216]	; (2828 <_usb_d_dev_ep_stall+0x158>)
    2750:	46ac      	mov	ip, r5
    2752:	4463      	add	r3, ip
    2754:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    2756:	1882      	adds	r2, r0, r2
    2758:	0092      	lsls	r2, r2, #2
    275a:	188a      	adds	r2, r1, r2
    275c:	3280      	adds	r2, #128	; 0x80
    275e:	79d3      	ldrb	r3, [r2, #7]
    2760:	2108      	movs	r1, #8
    2762:	430b      	orrs	r3, r1
    2764:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2766:	2000      	movs	r0, #0
    2768:	e7db      	b.n	2722 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    276a:	0093      	lsls	r3, r2, #2
    276c:	189b      	adds	r3, r3, r2
    276e:	0099      	lsls	r1, r3, #2
    2770:	4b2b      	ldr	r3, [pc, #172]	; (2820 <_usb_d_dev_ep_stall+0x150>)
    2772:	185b      	adds	r3, r3, r1
    2774:	3386      	adds	r3, #134	; 0x86
    2776:	781b      	ldrb	r3, [r3, #0]
    2778:	210f      	movs	r1, #15
    277a:	400b      	ands	r3, r1
    277c:	015d      	lsls	r5, r3, #5
    277e:	492b      	ldr	r1, [pc, #172]	; (282c <_usb_d_dev_ep_stall+0x15c>)
    2780:	468c      	mov	ip, r1
    2782:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2784:	2183      	movs	r1, #131	; 0x83
    2786:	0049      	lsls	r1, r1, #1
    2788:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    278a:	39f6      	subs	r1, #246	; 0xf6
    278c:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    278e:	2000      	movs	r0, #0
	if (!is_stalled) {
    2790:	420e      	tst	r6, r1
    2792:	d0c6      	beq.n	2722 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2794:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2796:	3005      	adds	r0, #5
    2798:	30ff      	adds	r0, #255	; 0xff
    279a:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    279c:	2120      	movs	r1, #32
    279e:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    27a0:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    27a2:	015b      	lsls	r3, r3, #5
    27a4:	4e22      	ldr	r6, [pc, #136]	; (2830 <_usb_d_dev_ep_stall+0x160>)
    27a6:	46b4      	mov	ip, r6
    27a8:	4463      	add	r3, ip
    27aa:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    27ac:	2308      	movs	r3, #8
    27ae:	33ff      	adds	r3, #255	; 0xff
    27b0:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    27b2:	420b      	tst	r3, r1
    27b4:	d009      	beq.n	27ca <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    27b6:	2308      	movs	r3, #8
    27b8:	33ff      	adds	r3, #255	; 0xff
    27ba:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    27bc:	3b07      	subs	r3, #7
    27be:	3bff      	subs	r3, #255	; 0xff
    27c0:	40a3      	lsls	r3, r4
    27c2:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    27c4:	2182      	movs	r1, #130	; 0x82
    27c6:	0049      	lsls	r1, r1, #1
    27c8:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    27ca:	0093      	lsls	r3, r2, #2
    27cc:	189b      	adds	r3, r3, r2
    27ce:	0099      	lsls	r1, r3, #2
    27d0:	4b13      	ldr	r3, [pc, #76]	; (2820 <_usb_d_dev_ep_stall+0x150>)
    27d2:	185b      	adds	r3, r3, r1
    27d4:	3380      	adds	r3, #128	; 0x80
    27d6:	79d9      	ldrb	r1, [r3, #7]
    27d8:	2307      	movs	r3, #7
    27da:	400b      	ands	r3, r1
    27dc:	2b01      	cmp	r3, #1
    27de:	d00b      	beq.n	27f8 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    27e0:	0093      	lsls	r3, r2, #2
    27e2:	189a      	adds	r2, r3, r2
    27e4:	0092      	lsls	r2, r2, #2
    27e6:	4b0e      	ldr	r3, [pc, #56]	; (2820 <_usb_d_dev_ep_stall+0x150>)
    27e8:	189b      	adds	r3, r3, r2
    27ea:	3380      	adds	r3, #128	; 0x80
    27ec:	79da      	ldrb	r2, [r3, #7]
    27ee:	2108      	movs	r1, #8
    27f0:	438a      	bics	r2, r1
    27f2:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    27f4:	2000      	movs	r0, #0
    27f6:	e794      	b.n	2722 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    27f8:	3306      	adds	r3, #6
    27fa:	33ff      	adds	r3, #255	; 0xff
    27fc:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    27fe:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2800:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2802:	4219      	tst	r1, r3
    2804:	d000      	beq.n	2808 <_usb_d_dev_ep_stall+0x138>
    2806:	e78c      	b.n	2722 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2808:	0093      	lsls	r3, r2, #2
    280a:	189a      	adds	r2, r3, r2
    280c:	0092      	lsls	r2, r2, #2
    280e:	4b04      	ldr	r3, [pc, #16]	; (2820 <_usb_d_dev_ep_stall+0x150>)
    2810:	189b      	adds	r3, r3, r2
    2812:	3380      	adds	r3, #128	; 0x80
    2814:	79da      	ldrb	r2, [r3, #7]
    2816:	2108      	movs	r1, #8
    2818:	438a      	bics	r2, r1
    281a:	71da      	strb	r2, [r3, #7]
    281c:	e781      	b.n	2722 <_usb_d_dev_ep_stall+0x52>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	20000198 	.word	0x20000198
    2824:	41005100 	.word	0x41005100
    2828:	41005109 	.word	0x41005109
    282c:	41005000 	.word	0x41005000
    2830:	41005108 	.word	0x41005108

00002834 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2834:	b570      	push	{r4, r5, r6, lr}
    2836:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2838:	230f      	movs	r3, #15
    283a:	4018      	ands	r0, r3
    283c:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    283e:	4b16      	ldr	r3, [pc, #88]	; (2898 <_usb_d_dev_ep_read_req+0x64>)
    2840:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    2842:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2844:	685b      	ldr	r3, [r3, #4]
    2846:	049b      	lsls	r3, r3, #18
    2848:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    284a:	2802      	cmp	r0, #2
    284c:	d81a      	bhi.n	2884 <_usb_d_dev_ep_read_req+0x50>
    284e:	2d00      	cmp	r5, #0
    2850:	d01b      	beq.n	288a <_usb_d_dev_ep_read_req+0x56>
    2852:	4b12      	ldr	r3, [pc, #72]	; (289c <_usb_d_dev_ep_read_req+0x68>)
    2854:	469c      	mov	ip, r3
    2856:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2858:	2380      	movs	r3, #128	; 0x80
    285a:	005b      	lsls	r3, r3, #1
    285c:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    285e:	2b11      	cmp	r3, #17
    2860:	d116      	bne.n	2890 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2862:	2308      	movs	r3, #8
    2864:	33ff      	adds	r3, #255	; 0xff
    2866:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    2868:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    286a:	06db      	lsls	r3, r3, #27
    286c:	d400      	bmi.n	2870 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    286e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    2870:	2208      	movs	r2, #8
    2872:	0028      	movs	r0, r5
    2874:	4b0a      	ldr	r3, [pc, #40]	; (28a0 <_usb_d_dev_ep_read_req+0x6c>)
    2876:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2878:	2210      	movs	r2, #16
    287a:	2308      	movs	r3, #8
    287c:	33ff      	adds	r3, #255	; 0xff
    287e:	54e2      	strb	r2, [r4, r3]
	return bytes;
    2880:	0030      	movs	r0, r6
    2882:	e7f4      	b.n	286e <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    2884:	2012      	movs	r0, #18
    2886:	4240      	negs	r0, r0
    2888:	e7f1      	b.n	286e <_usb_d_dev_ep_read_req+0x3a>
    288a:	2012      	movs	r0, #18
    288c:	4240      	negs	r0, r0
    288e:	e7ee      	b.n	286e <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    2890:	2013      	movs	r0, #19
    2892:	4240      	negs	r0, r0
    2894:	e7eb      	b.n	286e <_usb_d_dev_ep_read_req+0x3a>
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	20000198 	.word	0x20000198
    289c:	41005000 	.word	0x41005000
    28a0:	00003da5 	.word	0x00003da5

000028a4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    28a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28a6:	46de      	mov	lr, fp
    28a8:	4657      	mov	r7, sl
    28aa:	464e      	mov	r6, r9
    28ac:	4645      	mov	r5, r8
    28ae:	b5e0      	push	{r5, r6, r7, lr}
    28b0:	b085      	sub	sp, #20
    28b2:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    28b4:	7a06      	ldrb	r6, [r0, #8]
    28b6:	230f      	movs	r3, #15
    28b8:	4033      	ands	r3, r6
    28ba:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    28bc:	2b00      	cmp	r3, #0
    28be:	d100      	bne.n	28c2 <_usb_d_dev_ep_trans+0x1e>
    28c0:	e0d3      	b.n	2a6a <_usb_d_dev_ep_trans+0x1c6>
    28c2:	0018      	movs	r0, r3
    28c4:	2e00      	cmp	r6, #0
    28c6:	db39      	blt.n	293c <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    28c8:	0004      	movs	r4, r0
    28ca:	4a73      	ldr	r2, [pc, #460]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    28cc:	3260      	adds	r2, #96	; 0x60
    28ce:	1c41      	adds	r1, r0, #1
    28d0:	008d      	lsls	r5, r1, #2
    28d2:	186d      	adds	r5, r5, r1
    28d4:	00ad      	lsls	r5, r5, #2
    28d6:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    28d8:	0081      	lsls	r1, r0, #2
    28da:	1809      	adds	r1, r1, r0
    28dc:	0089      	lsls	r1, r1, #2
    28de:	1852      	adds	r2, r2, r1
    28e0:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    28e2:	4a6e      	ldr	r2, [pc, #440]	; (2a9c <_usb_d_dev_ep_trans+0x1f8>)
    28e4:	4291      	cmp	r1, r2
    28e6:	d02b      	beq.n	2940 <_usb_d_dev_ep_trans+0x9c>
    28e8:	1e4f      	subs	r7, r1, #1
    28ea:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    28ec:	4642      	mov	r2, r8
    28ee:	6852      	ldr	r2, [r2, #4]
    28f0:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    28f2:	2b02      	cmp	r3, #2
    28f4:	d900      	bls.n	28f8 <_usb_d_dev_ep_trans+0x54>
    28f6:	e0a4      	b.n	2a42 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    28f8:	4643      	mov	r3, r8
    28fa:	681b      	ldr	r3, [r3, #0]
    28fc:	4868      	ldr	r0, [pc, #416]	; (2aa0 <_usb_d_dev_ep_trans+0x1fc>)
    28fe:	4283      	cmp	r3, r0
    2900:	d920      	bls.n	2944 <_usb_d_dev_ep_trans+0xa0>
    2902:	1898      	adds	r0, r3, r2
    2904:	9001      	str	r0, [sp, #4]
    2906:	4867      	ldr	r0, [pc, #412]	; (2aa4 <_usb_d_dev_ep_trans+0x200>)
    2908:	4684      	mov	ip, r0
    290a:	9801      	ldr	r0, [sp, #4]
    290c:	4560      	cmp	r0, ip
    290e:	d819      	bhi.n	2944 <_usb_d_dev_ep_trans+0xa0>
    2910:	079b      	lsls	r3, r3, #30
    2912:	d117      	bne.n	2944 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    2914:	2e00      	cmp	r6, #0
    2916:	db32      	blt.n	297e <_usb_d_dev_ep_trans+0xda>
    2918:	4291      	cmp	r1, r2
    291a:	d900      	bls.n	291e <_usb_d_dev_ep_trans+0x7a>
    291c:	e0af      	b.n	2a7e <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    291e:	2f00      	cmp	r7, #0
    2920:	d030      	beq.n	2984 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    2922:	00a3      	lsls	r3, r4, #2
    2924:	191b      	adds	r3, r3, r4
    2926:	009a      	lsls	r2, r3, #2
    2928:	4b5b      	ldr	r3, [pc, #364]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    292a:	189b      	adds	r3, r3, r2
    292c:	3380      	adds	r3, #128	; 0x80
    292e:	681b      	ldr	r3, [r3, #0]
    2930:	2b00      	cmp	r3, #0
    2932:	d100      	bne.n	2936 <_usb_d_dev_ep_trans+0x92>
    2934:	e08b      	b.n	2a4e <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    2936:	2300      	movs	r3, #0
    2938:	4699      	mov	r9, r3
    293a:	e00f      	b.n	295c <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    293c:	1c98      	adds	r0, r3, #2
    293e:	e7c3      	b.n	28c8 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2940:	000f      	movs	r7, r1
    2942:	e7d3      	b.n	28ec <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    2944:	00a3      	lsls	r3, r4, #2
    2946:	191b      	adds	r3, r3, r4
    2948:	009a      	lsls	r2, r3, #2
    294a:	4b53      	ldr	r3, [pc, #332]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    294c:	189b      	adds	r3, r3, r2
    294e:	3380      	adds	r3, #128	; 0x80
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	2b00      	cmp	r3, #0
    2954:	d100      	bne.n	2958 <_usb_d_dev_ep_trans+0xb4>
    2956:	e077      	b.n	2a48 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    2958:	2301      	movs	r3, #1
    295a:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    295c:	00a3      	lsls	r3, r4, #2
    295e:	191b      	adds	r3, r3, r4
    2960:	009a      	lsls	r2, r3, #2
    2962:	4b4d      	ldr	r3, [pc, #308]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    2964:	189b      	adds	r3, r3, r2
    2966:	3380      	adds	r3, #128	; 0x80
    2968:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    296a:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    296c:	071b      	lsls	r3, r3, #28
    296e:	d50c      	bpl.n	298a <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2970:	b005      	add	sp, #20
    2972:	bc3c      	pop	{r2, r3, r4, r5}
    2974:	4690      	mov	r8, r2
    2976:	4699      	mov	r9, r3
    2978:	46a2      	mov	sl, r4
    297a:	46ab      	mov	fp, r5
    297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    297e:	2300      	movs	r3, #0
    2980:	4699      	mov	r9, r3
    2982:	e7eb      	b.n	295c <_usb_d_dev_ep_trans+0xb8>
    2984:	2300      	movs	r3, #0
    2986:	4699      	mov	r9, r3
    2988:	e7e8      	b.n	295c <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    298a:	a803      	add	r0, sp, #12
    298c:	4b46      	ldr	r3, [pc, #280]	; (2aa8 <_usb_d_dev_ep_trans+0x204>)
    298e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2990:	00a3      	lsls	r3, r4, #2
    2992:	191b      	adds	r3, r3, r4
    2994:	009a      	lsls	r2, r3, #2
    2996:	4b40      	ldr	r3, [pc, #256]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    2998:	189b      	adds	r3, r3, r2
    299a:	3380      	adds	r3, #128	; 0x80
    299c:	79db      	ldrb	r3, [r3, #7]
    299e:	065b      	lsls	r3, r3, #25
    29a0:	d444      	bmi.n	2a2c <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    29a2:	00a3      	lsls	r3, r4, #2
    29a4:	191b      	adds	r3, r3, r4
    29a6:	009b      	lsls	r3, r3, #2
    29a8:	4a3b      	ldr	r2, [pc, #236]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    29aa:	4693      	mov	fp, r2
    29ac:	449b      	add	fp, r3
    29ae:	2380      	movs	r3, #128	; 0x80
    29b0:	445b      	add	r3, fp
    29b2:	469a      	mov	sl, r3
    29b4:	79db      	ldrb	r3, [r3, #7]
    29b6:	2240      	movs	r2, #64	; 0x40
    29b8:	4313      	orrs	r3, r2
    29ba:	4652      	mov	r2, sl
    29bc:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    29be:	a803      	add	r0, sp, #12
    29c0:	4b3a      	ldr	r3, [pc, #232]	; (2aac <_usb_d_dev_ep_trans+0x208>)
    29c2:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    29c4:	465b      	mov	r3, fp
    29c6:	4642      	mov	r2, r8
    29c8:	6812      	ldr	r2, [r2, #0]
    29ca:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    29cc:	4642      	mov	r2, r8
    29ce:	6852      	ldr	r2, [r2, #4]
    29d0:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    29d2:	2300      	movs	r3, #0
    29d4:	465a      	mov	r2, fp
    29d6:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    29d8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    29da:	01d2      	lsls	r2, r2, #7
    29dc:	4653      	mov	r3, sl
    29de:	79d9      	ldrb	r1, [r3, #7]
    29e0:	237f      	movs	r3, #127	; 0x7f
    29e2:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    29e4:	4649      	mov	r1, r9
    29e6:	0149      	lsls	r1, r1, #5
    29e8:	4313      	orrs	r3, r2
    29ea:	2220      	movs	r2, #32
    29ec:	4393      	bics	r3, r2
    29ee:	430b      	orrs	r3, r1
    29f0:	4652      	mov	r2, sl
    29f2:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    29f4:	4643      	mov	r3, r8
    29f6:	7a5b      	ldrb	r3, [r3, #9]
    29f8:	2200      	movs	r2, #0
    29fa:	2b00      	cmp	r3, #0
    29fc:	d002      	beq.n	2a04 <_usb_d_dev_ep_trans+0x160>
    29fe:	427a      	negs	r2, r7
    2a00:	417a      	adcs	r2, r7
    2a02:	b2d2      	uxtb	r2, r2
    2a04:	00a3      	lsls	r3, r4, #2
    2a06:	191c      	adds	r4, r3, r4
    2a08:	00a4      	lsls	r4, r4, #2
    2a0a:	4b23      	ldr	r3, [pc, #140]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    2a0c:	191b      	adds	r3, r3, r4
    2a0e:	3380      	adds	r3, #128	; 0x80
    2a10:	0112      	lsls	r2, r2, #4
    2a12:	79df      	ldrb	r7, [r3, #7]
    2a14:	2110      	movs	r1, #16
    2a16:	438f      	bics	r7, r1
    2a18:	4317      	orrs	r7, r2
    2a1a:	71df      	strb	r7, [r3, #7]
	if (dir) {
    2a1c:	2e00      	cmp	r6, #0
    2a1e:	db0a      	blt.n	2a36 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2a20:	2100      	movs	r1, #0
    2a22:	0028      	movs	r0, r5
    2a24:	4b22      	ldr	r3, [pc, #136]	; (2ab0 <_usb_d_dev_ep_trans+0x20c>)
    2a26:	4798      	blx	r3
	return ERR_NONE;
    2a28:	2000      	movs	r0, #0
    2a2a:	e7a1      	b.n	2970 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    2a2c:	a803      	add	r0, sp, #12
    2a2e:	4b1f      	ldr	r3, [pc, #124]	; (2aac <_usb_d_dev_ep_trans+0x208>)
    2a30:	4798      	blx	r3
		return USB_BUSY;
    2a32:	2001      	movs	r0, #1
    2a34:	e79c      	b.n	2970 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    2a36:	2100      	movs	r1, #0
    2a38:	0028      	movs	r0, r5
    2a3a:	4b1e      	ldr	r3, [pc, #120]	; (2ab4 <_usb_d_dev_ep_trans+0x210>)
    2a3c:	4798      	blx	r3
	return ERR_NONE;
    2a3e:	2000      	movs	r0, #0
    2a40:	e796      	b.n	2970 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    2a42:	2012      	movs	r0, #18
    2a44:	4240      	negs	r0, r0
    2a46:	e793      	b.n	2970 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2a48:	2013      	movs	r0, #19
    2a4a:	4240      	negs	r0, r0
    2a4c:	e790      	b.n	2970 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    2a4e:	2012      	movs	r0, #18
    2a50:	4240      	negs	r0, r0
    2a52:	e78d      	b.n	2970 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2a54:	2013      	movs	r0, #19
    2a56:	4240      	negs	r0, r0
    2a58:	e78a      	b.n	2970 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    2a5a:	4643      	mov	r3, r8
    2a5c:	685a      	ldr	r2, [r3, #4]
    2a5e:	0597      	lsls	r7, r2, #22
    2a60:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    2a62:	4d0d      	ldr	r5, [pc, #52]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    2a64:	3574      	adds	r5, #116	; 0x74
    2a66:	2400      	movs	r4, #0
    2a68:	e746      	b.n	28f8 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a6a:	4a0b      	ldr	r2, [pc, #44]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    2a6c:	3260      	adds	r2, #96	; 0x60
    2a6e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2a70:	4a0a      	ldr	r2, [pc, #40]	; (2a9c <_usb_d_dev_ep_trans+0x1f8>)
    2a72:	4291      	cmp	r1, r2
    2a74:	d0f1      	beq.n	2a5a <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    2a76:	4d08      	ldr	r5, [pc, #32]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    2a78:	3574      	adds	r5, #116	; 0x74
    2a7a:	2400      	movs	r4, #0
    2a7c:	e734      	b.n	28e8 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2a7e:	00a3      	lsls	r3, r4, #2
    2a80:	191b      	adds	r3, r3, r4
    2a82:	009a      	lsls	r2, r3, #2
    2a84:	4b04      	ldr	r3, [pc, #16]	; (2a98 <_usb_d_dev_ep_trans+0x1f4>)
    2a86:	189b      	adds	r3, r3, r2
    2a88:	3380      	adds	r3, #128	; 0x80
    2a8a:	681b      	ldr	r3, [r3, #0]
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d0e1      	beq.n	2a54 <_usb_d_dev_ep_trans+0x1b0>
    2a90:	2301      	movs	r3, #1
    2a92:	4699      	mov	r9, r3
    2a94:	e762      	b.n	295c <_usb_d_dev_ep_trans+0xb8>
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	20000198 	.word	0x20000198
    2a9c:	000003ff 	.word	0x000003ff
    2aa0:	1fffffff 	.word	0x1fffffff
    2aa4:	20007fff 	.word	0x20007fff
    2aa8:	00000709 	.word	0x00000709
    2aac:	00000717 	.word	0x00000717
    2ab0:	00001e7d 	.word	0x00001e7d
    2ab4:	00001cd5 	.word	0x00001cd5

00002ab8 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2ab8:	1e0b      	subs	r3, r1, #0
    2aba:	d006      	beq.n	2aca <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2abc:	2801      	cmp	r0, #1
    2abe:	d006      	beq.n	2ace <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d101      	bne.n	2ac8 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2ac4:	4a03      	ldr	r2, [pc, #12]	; (2ad4 <_usb_d_dev_register_callback+0x1c>)
    2ac6:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    2ac8:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2aca:	4b03      	ldr	r3, [pc, #12]	; (2ad8 <_usb_d_dev_register_callback+0x20>)
    2acc:	e7f6      	b.n	2abc <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2ace:	4a01      	ldr	r2, [pc, #4]	; (2ad4 <_usb_d_dev_register_callback+0x1c>)
    2ad0:	6653      	str	r3, [r2, #100]	; 0x64
    2ad2:	e7f9      	b.n	2ac8 <_usb_d_dev_register_callback+0x10>
    2ad4:	20000198 	.word	0x20000198
    2ad8:	00001a3d 	.word	0x00001a3d

00002adc <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2adc:	1e0b      	subs	r3, r1, #0
    2ade:	d008      	beq.n	2af2 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2ae0:	2800      	cmp	r0, #0
    2ae2:	d008      	beq.n	2af6 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2ae4:	2801      	cmp	r0, #1
    2ae6:	d009      	beq.n	2afc <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2ae8:	2802      	cmp	r0, #2
    2aea:	d106      	bne.n	2afa <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2aec:	4a05      	ldr	r2, [pc, #20]	; (2b04 <_usb_d_dev_register_ep_callback+0x28>)
    2aee:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    2af0:	e003      	b.n	2afa <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2af2:	4b05      	ldr	r3, [pc, #20]	; (2b08 <_usb_d_dev_register_ep_callback+0x2c>)
    2af4:	e7f4      	b.n	2ae0 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2af6:	4a03      	ldr	r2, [pc, #12]	; (2b04 <_usb_d_dev_register_ep_callback+0x28>)
    2af8:	6693      	str	r3, [r2, #104]	; 0x68
}
    2afa:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2afc:	4a01      	ldr	r2, [pc, #4]	; (2b04 <_usb_d_dev_register_ep_callback+0x28>)
    2afe:	66d3      	str	r3, [r2, #108]	; 0x6c
    2b00:	e7fb      	b.n	2afa <_usb_d_dev_register_ep_callback+0x1e>
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	20000198 	.word	0x20000198
    2b08:	00001a3d 	.word	0x00001a3d

00002b0c <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2b0e:	4b82      	ldr	r3, [pc, #520]	; (2d18 <USB_Handler+0x20c>)
    2b10:	8c1e      	ldrh	r6, [r3, #32]
    2b12:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2b14:	2e00      	cmp	r6, #0
    2b16:	d003      	beq.n	2b20 <USB_Handler+0x14>
    2b18:	4c80      	ldr	r4, [pc, #512]	; (2d1c <USB_Handler+0x210>)
    2b1a:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    2b1c:	2500      	movs	r5, #0
    2b1e:	e0b9      	b.n	2c94 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2b20:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2b22:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2b24:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2b26:	075a      	lsls	r2, r3, #29
    2b28:	d417      	bmi.n	2b5a <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2b2a:	059a      	lsls	r2, r3, #22
    2b2c:	d41c      	bmi.n	2b68 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2b2e:	061a      	lsls	r2, r3, #24
    2b30:	d43e      	bmi.n	2bb0 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2b32:	2270      	movs	r2, #112	; 0x70
    2b34:	421a      	tst	r2, r3
    2b36:	d144      	bne.n	2bc2 <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2b38:	071a      	lsls	r2, r3, #28
    2b3a:	d45e      	bmi.n	2bfa <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2b3c:	07db      	lsls	r3, r3, #31
    2b3e:	d5eb      	bpl.n	2b18 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2b40:	4b75      	ldr	r3, [pc, #468]	; (2d18 <USB_Handler+0x20c>)
    2b42:	4a77      	ldr	r2, [pc, #476]	; (2d20 <USB_Handler+0x214>)
    2b44:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2b46:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2b48:	3a92      	subs	r2, #146	; 0x92
    2b4a:	3aff      	subs	r2, #255	; 0xff
    2b4c:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2b4e:	4b73      	ldr	r3, [pc, #460]	; (2d1c <USB_Handler+0x210>)
    2b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2b52:	2100      	movs	r1, #0
    2b54:	2004      	movs	r0, #4
    2b56:	4798      	blx	r3
    2b58:	e005      	b.n	2b66 <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2b5a:	2204      	movs	r2, #4
    2b5c:	4b6e      	ldr	r3, [pc, #440]	; (2d18 <USB_Handler+0x20c>)
    2b5e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2b60:	4b6e      	ldr	r3, [pc, #440]	; (2d1c <USB_Handler+0x210>)
    2b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2b64:	4798      	blx	r3

	_usb_d_dev_handler();
}
    2b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b68:	4b6b      	ldr	r3, [pc, #428]	; (2d18 <USB_Handler+0x20c>)
    2b6a:	4a6d      	ldr	r2, [pc, #436]	; (2d20 <USB_Handler+0x214>)
    2b6c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2b6e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2b70:	3a92      	subs	r2, #146	; 0x92
    2b72:	3aff      	subs	r2, #255	; 0xff
    2b74:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2b76:	4b69      	ldr	r3, [pc, #420]	; (2d1c <USB_Handler+0x210>)
    2b78:	891b      	ldrh	r3, [r3, #8]
    2b7a:	071b      	lsls	r3, r3, #28
    2b7c:	0f1b      	lsrs	r3, r3, #28
    2b7e:	2b03      	cmp	r3, #3
    2b80:	d00c      	beq.n	2b9c <USB_Handler+0x90>
    2b82:	4b66      	ldr	r3, [pc, #408]	; (2d1c <USB_Handler+0x210>)
    2b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2b86:	071b      	lsls	r3, r3, #28
    2b88:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    2b8a:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2b8c:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2b8e:	2b03      	cmp	r3, #3
    2b90:	d005      	beq.n	2b9e <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2b92:	4b62      	ldr	r3, [pc, #392]	; (2d1c <USB_Handler+0x210>)
    2b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2b96:	2003      	movs	r0, #3
    2b98:	4798      	blx	r3
    2b9a:	e7e4      	b.n	2b66 <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2b9c:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2b9e:	0152      	lsls	r2, r2, #5
    2ba0:	4b5e      	ldr	r3, [pc, #376]	; (2d1c <USB_Handler+0x210>)
    2ba2:	189b      	adds	r3, r3, r2
    2ba4:	8919      	ldrh	r1, [r3, #8]
    2ba6:	0449      	lsls	r1, r1, #17
    2ba8:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    2baa:	2200      	movs	r2, #0
    2bac:	811a      	strh	r2, [r3, #8]
    2bae:	e7f0      	b.n	2b92 <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2bb0:	2280      	movs	r2, #128	; 0x80
    2bb2:	4b59      	ldr	r3, [pc, #356]	; (2d18 <USB_Handler+0x20c>)
    2bb4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2bb6:	4b59      	ldr	r3, [pc, #356]	; (2d1c <USB_Handler+0x210>)
    2bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2bba:	2100      	movs	r1, #0
    2bbc:	2005      	movs	r0, #5
    2bbe:	4798      	blx	r3
    2bc0:	e7d1      	b.n	2b66 <USB_Handler+0x5a>
    2bc2:	4b55      	ldr	r3, [pc, #340]	; (2d18 <USB_Handler+0x20c>)
    2bc4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2bc6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2bc8:	4a55      	ldr	r2, [pc, #340]	; (2d20 <USB_Handler+0x214>)
    2bca:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2bcc:	4b55      	ldr	r3, [pc, #340]	; (2d24 <USB_Handler+0x218>)
    2bce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2bd0:	069b      	lsls	r3, r3, #26
    2bd2:	d40c      	bmi.n	2bee <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2bd4:	4953      	ldr	r1, [pc, #332]	; (2d24 <USB_Handler+0x218>)
	tmp &= mask;
    2bd6:	3a32      	subs	r2, #50	; 0x32
    2bd8:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2bda:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2bdc:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2bde:	2bd0      	cmp	r3, #208	; 0xd0
    2be0:	d1fb      	bne.n	2bda <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2be2:	4b4e      	ldr	r3, [pc, #312]	; (2d1c <USB_Handler+0x210>)
    2be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2be6:	2100      	movs	r1, #0
    2be8:	2002      	movs	r0, #2
    2bea:	4798      	blx	r3
    2bec:	e7bb      	b.n	2b66 <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2bee:	494d      	ldr	r1, [pc, #308]	; (2d24 <USB_Handler+0x218>)
	tmp &= mask;
    2bf0:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2bf2:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    2bf4:	421a      	tst	r2, r3
    2bf6:	d0fc      	beq.n	2bf2 <USB_Handler+0xe6>
    2bf8:	e7f3      	b.n	2be2 <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2bfa:	4b47      	ldr	r3, [pc, #284]	; (2d18 <USB_Handler+0x20c>)
    2bfc:	2100      	movs	r1, #0
    2bfe:	2280      	movs	r2, #128	; 0x80
    2c00:	0052      	lsls	r2, r2, #1
    2c02:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2c04:	3af8      	subs	r2, #248	; 0xf8
    2c06:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2c08:	3268      	adds	r2, #104	; 0x68
    2c0a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2c0c:	4a44      	ldr	r2, [pc, #272]	; (2d20 <USB_Handler+0x214>)
    2c0e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2c10:	4b45      	ldr	r3, [pc, #276]	; (2d28 <USB_Handler+0x21c>)
    2c12:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2c14:	4b41      	ldr	r3, [pc, #260]	; (2d1c <USB_Handler+0x210>)
    2c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2c18:	2100      	movs	r1, #0
    2c1a:	2001      	movs	r0, #1
    2c1c:	4798      	blx	r3
    2c1e:	e7a2      	b.n	2b66 <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2c20:	06cb      	lsls	r3, r1, #27
    2c22:	d407      	bmi.n	2c34 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2c24:	064b      	lsls	r3, r1, #25
    2c26:	d408      	bmi.n	2c3a <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2c28:	068b      	lsls	r3, r1, #26
    2c2a:	d52e      	bpl.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2c2c:	2100      	movs	r1, #0
    2c2e:	4b3f      	ldr	r3, [pc, #252]	; (2d2c <USB_Handler+0x220>)
    2c30:	4798      	blx	r3
    2c32:	e02a      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    2c34:	4b3e      	ldr	r3, [pc, #248]	; (2d30 <USB_Handler+0x224>)
    2c36:	4798      	blx	r3
    2c38:	e027      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2c3a:	2101      	movs	r1, #1
    2c3c:	4b3b      	ldr	r3, [pc, #236]	; (2d2c <USB_Handler+0x220>)
    2c3e:	4798      	blx	r3
    2c40:	e023      	b.n	2c8a <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2c42:	064b      	lsls	r3, r1, #25
    2c44:	d40e      	bmi.n	2c64 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2c46:	070b      	lsls	r3, r1, #28
    2c48:	d410      	bmi.n	2c6c <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2c4a:	078b      	lsls	r3, r1, #30
    2c4c:	d412      	bmi.n	2c74 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2c4e:	2307      	movs	r3, #7
    2c50:	401a      	ands	r2, r3
    2c52:	2a01      	cmp	r2, #1
    2c54:	d119      	bne.n	2c8a <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2c56:	074b      	lsls	r3, r1, #29
    2c58:	d410      	bmi.n	2c7c <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2c5a:	06cb      	lsls	r3, r1, #27
    2c5c:	d515      	bpl.n	2c8a <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2c5e:	4b34      	ldr	r3, [pc, #208]	; (2d30 <USB_Handler+0x224>)
    2c60:	4798      	blx	r3
    2c62:	e012      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2c64:	2101      	movs	r1, #1
    2c66:	4b31      	ldr	r3, [pc, #196]	; (2d2c <USB_Handler+0x220>)
    2c68:	4798      	blx	r3
    2c6a:	e00e      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    2c6c:	2101      	movs	r1, #1
    2c6e:	4b31      	ldr	r3, [pc, #196]	; (2d34 <USB_Handler+0x228>)
    2c70:	4798      	blx	r3
    2c72:	e00a      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    2c74:	2101      	movs	r1, #1
    2c76:	4b30      	ldr	r3, [pc, #192]	; (2d38 <USB_Handler+0x22c>)
    2c78:	4798      	blx	r3
    2c7a:	e006      	b.n	2c8a <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    2c7c:	2100      	movs	r1, #0
    2c7e:	4b2d      	ldr	r3, [pc, #180]	; (2d34 <USB_Handler+0x228>)
    2c80:	4798      	blx	r3
    2c82:	e002      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2c84:	2100      	movs	r1, #0
    2c86:	4b29      	ldr	r3, [pc, #164]	; (2d2c <USB_Handler+0x220>)
    2c88:	4798      	blx	r3
    2c8a:	3501      	adds	r5, #1
    2c8c:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2c8e:	2d09      	cmp	r5, #9
    2c90:	d100      	bne.n	2c94 <USB_Handler+0x188>
    2c92:	e768      	b.n	2b66 <USB_Handler+0x5a>
    2c94:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    2c96:	7ca1      	ldrb	r1, [r4, #18]
    2c98:	29ff      	cmp	r1, #255	; 0xff
    2c9a:	d0f6      	beq.n	2c8a <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    2c9c:	230f      	movs	r3, #15
    2c9e:	400b      	ands	r3, r1
    2ca0:	2101      	movs	r1, #1
    2ca2:	4099      	lsls	r1, r3
    2ca4:	420e      	tst	r6, r1
    2ca6:	d0f0      	beq.n	2c8a <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2ca8:	0159      	lsls	r1, r3, #5
    2caa:	4f24      	ldr	r7, [pc, #144]	; (2d3c <USB_Handler+0x230>)
    2cac:	46bc      	mov	ip, r7
    2cae:	4461      	add	r1, ip
    2cb0:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2cb2:	015b      	lsls	r3, r3, #5
    2cb4:	4f22      	ldr	r7, [pc, #136]	; (2d40 <USB_Handler+0x234>)
    2cb6:	46bc      	mov	ip, r7
    2cb8:	4463      	add	r3, ip
    2cba:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2cbc:	4019      	ands	r1, r3
	if (flags) {
    2cbe:	d0e4      	beq.n	2c8a <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2cc0:	00ab      	lsls	r3, r5, #2
    2cc2:	195a      	adds	r2, r3, r5
    2cc4:	0092      	lsls	r2, r2, #2
    2cc6:	4b15      	ldr	r3, [pc, #84]	; (2d1c <USB_Handler+0x210>)
    2cc8:	469c      	mov	ip, r3
    2cca:	4462      	add	r2, ip
    2ccc:	3270      	adds	r2, #112	; 0x70
    2cce:	7dd2      	ldrb	r2, [r2, #23]
    2cd0:	2347      	movs	r3, #71	; 0x47
    2cd2:	4013      	ands	r3, r2
    2cd4:	2b01      	cmp	r3, #1
    2cd6:	d0a3      	beq.n	2c20 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2cd8:	b253      	sxtb	r3, r2
    2cda:	2b00      	cmp	r3, #0
    2cdc:	dbb1      	blt.n	2c42 <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2cde:	068b      	lsls	r3, r1, #26
    2ce0:	d4d0      	bmi.n	2c84 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2ce2:	074b      	lsls	r3, r1, #29
    2ce4:	d40c      	bmi.n	2d00 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2ce6:	07cb      	lsls	r3, r1, #31
    2ce8:	d40e      	bmi.n	2d08 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2cea:	2307      	movs	r3, #7
    2cec:	401a      	ands	r2, r3
    2cee:	2a01      	cmp	r2, #1
    2cf0:	d1cb      	bne.n	2c8a <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2cf2:	070b      	lsls	r3, r1, #28
    2cf4:	d40c      	bmi.n	2d10 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2cf6:	06cb      	lsls	r3, r1, #27
    2cf8:	d5c7      	bpl.n	2c8a <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2cfa:	4b0d      	ldr	r3, [pc, #52]	; (2d30 <USB_Handler+0x224>)
    2cfc:	4798      	blx	r3
    2cfe:	e7c4      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    2d00:	2100      	movs	r1, #0
    2d02:	4b0c      	ldr	r3, [pc, #48]	; (2d34 <USB_Handler+0x228>)
    2d04:	4798      	blx	r3
    2d06:	e7c0      	b.n	2c8a <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    2d08:	2101      	movs	r1, #1
    2d0a:	4b0e      	ldr	r3, [pc, #56]	; (2d44 <USB_Handler+0x238>)
    2d0c:	4798      	blx	r3
    2d0e:	e7bc      	b.n	2c8a <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    2d10:	2101      	movs	r1, #1
    2d12:	4b08      	ldr	r3, [pc, #32]	; (2d34 <USB_Handler+0x228>)
    2d14:	4798      	blx	r3
    2d16:	e7b8      	b.n	2c8a <USB_Handler+0x17e>
    2d18:	41005000 	.word	0x41005000
    2d1c:	20000198 	.word	0x20000198
    2d20:	00000201 	.word	0x00000201
    2d24:	40000800 	.word	0x40000800
    2d28:	00001c91 	.word	0x00001c91
    2d2c:	00001acd 	.word	0x00001acd
    2d30:	00001a41 	.word	0x00001a41
    2d34:	00001b91 	.word	0x00001b91
    2d38:	00001cd5 	.word	0x00001cd5
    2d3c:	41005100 	.word	0x41005100
    2d40:	41005109 	.word	0x41005109
    2d44:	00001e7d 	.word	0x00001e7d

00002d48 <main>:
#include <atmel_start.h>
#include <stdio.h>

int main(void)
{
    2d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4a:	b09f      	sub	sp, #124	; 0x7c
	//set flash wait state. 1 is needed for 48Mhz @ 3.3V operation.
	//See Datasheet Table 37-42 page 891
	NVMCTRL->CTRLB.bit.RWS = 1;
    2d4c:	4a43      	ldr	r2, [pc, #268]	; (2e5c <main+0x114>)
    2d4e:	6853      	ldr	r3, [r2, #4]
    2d50:	211e      	movs	r1, #30
    2d52:	438b      	bics	r3, r1
    2d54:	2502      	movs	r5, #2
    2d56:	432b      	orrs	r3, r5
    2d58:	6053      	str	r3, [r2, #4]
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2d5a:	4b41      	ldr	r3, [pc, #260]	; (2e60 <main+0x118>)
    2d5c:	4798      	blx	r3

	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&USART_0, &io);
    2d5e:	4c41      	ldr	r4, [pc, #260]	; (2e64 <main+0x11c>)
    2d60:	a91d      	add	r1, sp, #116	; 0x74
    2d62:	0020      	movs	r0, r4
    2d64:	4b40      	ldr	r3, [pc, #256]	; (2e68 <main+0x120>)
    2d66:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    2d68:	0020      	movs	r0, r4
    2d6a:	4b40      	ldr	r3, [pc, #256]	; (2e6c <main+0x124>)
    2d6c:	4798      	blx	r3

	uint8_t adc_result_message[4];
	// start character
	adc_result_message[0] = 127;
    2d6e:	ab1c      	add	r3, sp, #112	; 0x70
    2d70:	227f      	movs	r2, #127	; 0x7f
    2d72:	701a      	strb	r2, [r3, #0]
	// stop character
	adc_result_message[3] = 255;
    2d74:	3280      	adds	r2, #128	; 0x80
    2d76:	70da      	strb	r2, [r3, #3]


	// following Adafruit Metro M0 pinout/labels
	uint8_t selectADC[] = {0,2,3,4};
    2d78:	ab1b      	add	r3, sp, #108	; 0x6c
    2d7a:	2400      	movs	r4, #0
    2d7c:	701c      	strb	r4, [r3, #0]
    2d7e:	705d      	strb	r5, [r3, #1]
    2d80:	2103      	movs	r1, #3
    2d82:	7099      	strb	r1, [r3, #2]
    2d84:	3afb      	subs	r2, #251	; 0xfb
    2d86:	70da      	strb	r2, [r3, #3]
	uint8_t muxposADC[] = {ADC_INPUTCTRL_MUXPOS_PIN0,ADC_INPUTCTRL_MUXPOS_PIN2,ADC_INPUTCTRL_MUXPOS_PIN3,ADC_INPUTCTRL_MUXPOS_PIN4};
    2d88:	ab1a      	add	r3, sp, #104	; 0x68
    2d8a:	701c      	strb	r4, [r3, #0]
    2d8c:	705d      	strb	r5, [r3, #1]
    2d8e:	7099      	strb	r1, [r3, #2]
    2d90:	70da      	strb	r2, [r3, #3]
	//default channel
	uint8_t currentADC = selectADC[0];

	adc_sync_enable_channel(&ADC_0, 0);
    2d92:	4f37      	ldr	r7, [pc, #220]	; (2e70 <main+0x128>)
    2d94:	2100      	movs	r1, #0
    2d96:	0038      	movs	r0, r7
    2d98:	4e36      	ldr	r6, [pc, #216]	; (2e74 <main+0x12c>)
    2d9a:	47b0      	blx	r6
	adc_sync_enable_channel(&ADC_0, 1);
    2d9c:	2101      	movs	r1, #1
    2d9e:	0038      	movs	r0, r7
    2da0:	47b0      	blx	r6
	adc_sync_enable_channel(&ADC_0, 2);
    2da2:	2102      	movs	r1, #2
    2da4:	0038      	movs	r0, r7
    2da6:	47b0      	blx	r6
	adc_sync_enable_channel(&ADC_0, 3);
    2da8:	2103      	movs	r1, #3
    2daa:	0038      	movs	r0, r7
    2dac:	47b0      	blx	r6

	ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    2dae:	4b32      	ldr	r3, [pc, #200]	; (2e78 <main+0x130>)
    2db0:	709c      	strb	r4, [r3, #2]

	ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
    2db2:	705d      	strb	r5, [r3, #1]
	ADC->CTRLB.reg = ADC_CTRLB_RESSEL_12BIT;
    2db4:	809c      	strh	r4, [r3, #4]

	ADC->INPUTCTRL.reg = ADC_INPUTCTRL_GAIN_DIV2 |
    2db6:	4a31      	ldr	r2, [pc, #196]	; (2e7c <main+0x134>)
    2db8:	611a      	str	r2, [r3, #16]
	ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_PIN0;

	char strDbg[100];
	while (1) {
		if(usart_sync_is_rx_not_empty(&USART_0)){
    2dba:	4d2a      	ldr	r5, [pc, #168]	; (2e64 <main+0x11c>)
    2dbc:	4e30      	ldr	r6, [pc, #192]	; (2e80 <main+0x138>)
    2dbe:	e021      	b.n	2e04 <main+0xbc>
										ADC_INPUTCTRL_MUXNEG_GND |
										muxposADC[buf[0]];
				}
			}
		}
		uint8_t adcResult[2] = {0};
    2dc0:	2300      	movs	r3, #0
    2dc2:	466a      	mov	r2, sp
    2dc4:	8013      	strh	r3, [r2, #0]
		adc_sync_read_channel(&ADC_0, currentADC, adcResult, 2);
    2dc6:	3302      	adds	r3, #2
    2dc8:	0021      	movs	r1, r4
    2dca:	4829      	ldr	r0, [pc, #164]	; (2e70 <main+0x128>)
    2dcc:	4f2d      	ldr	r7, [pc, #180]	; (2e84 <main+0x13c>)
    2dce:	47b8      	blx	r7
		sprintf(strDbg, "ADC result %d,%d\n\r", adcResult[0], adcResult[1]);
    2dd0:	466b      	mov	r3, sp
    2dd2:	785b      	ldrb	r3, [r3, #1]
    2dd4:	466a      	mov	r2, sp
    2dd6:	7812      	ldrb	r2, [r2, #0]
    2dd8:	492b      	ldr	r1, [pc, #172]	; (2e88 <main+0x140>)
    2dda:	a801      	add	r0, sp, #4
    2ddc:	4f2b      	ldr	r7, [pc, #172]	; (2e8c <main+0x144>)
    2dde:	47b8      	blx	r7
		cdcdf_acm_write(strDbg, 100);
    2de0:	2164      	movs	r1, #100	; 0x64
    2de2:	a801      	add	r0, sp, #4
    2de4:	4b2a      	ldr	r3, [pc, #168]	; (2e90 <main+0x148>)
    2de6:	4798      	blx	r3
		adc_result_message[1] = adcResult[0];
    2de8:	a91c      	add	r1, sp, #112	; 0x70
    2dea:	466b      	mov	r3, sp
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	704b      	strb	r3, [r1, #1]
		adc_result_message[2] = adcResult[1];
    2df0:	466b      	mov	r3, sp
    2df2:	785b      	ldrb	r3, [r3, #1]
    2df4:	708b      	strb	r3, [r1, #2]
		io_write(io, adc_result_message, 4);
    2df6:	2204      	movs	r2, #4
    2df8:	981d      	ldr	r0, [sp, #116]	; 0x74
    2dfa:	4b26      	ldr	r3, [pc, #152]	; (2e94 <main+0x14c>)
    2dfc:	4798      	blx	r3
		delay_ms(50);
    2dfe:	2032      	movs	r0, #50	; 0x32
    2e00:	4b25      	ldr	r3, [pc, #148]	; (2e98 <main+0x150>)
    2e02:	4798      	blx	r3
		if(usart_sync_is_rx_not_empty(&USART_0)){
    2e04:	0028      	movs	r0, r5
    2e06:	47b0      	blx	r6
    2e08:	2800      	cmp	r0, #0
    2e0a:	d0d9      	beq.n	2dc0 <main+0x78>
			io_read(io,buf,1);
    2e0c:	2201      	movs	r2, #1
    2e0e:	4669      	mov	r1, sp
    2e10:	981d      	ldr	r0, [sp, #116]	; 0x74
    2e12:	4b22      	ldr	r3, [pc, #136]	; (2e9c <main+0x154>)
    2e14:	4798      	blx	r3
			if(buf[0] == 127){
    2e16:	466b      	mov	r3, sp
    2e18:	781b      	ldrb	r3, [r3, #0]
    2e1a:	2b7f      	cmp	r3, #127	; 0x7f
    2e1c:	d1d0      	bne.n	2dc0 <main+0x78>
				io_read(io,buf,2);
    2e1e:	2202      	movs	r2, #2
    2e20:	4669      	mov	r1, sp
    2e22:	981d      	ldr	r0, [sp, #116]	; 0x74
    2e24:	4b1d      	ldr	r3, [pc, #116]	; (2e9c <main+0x154>)
    2e26:	4798      	blx	r3
				if (buf[1] == 255){
    2e28:	466b      	mov	r3, sp
    2e2a:	785b      	ldrb	r3, [r3, #1]
    2e2c:	2bff      	cmp	r3, #255	; 0xff
    2e2e:	d1c7      	bne.n	2dc0 <main+0x78>
					sprintf(strDbg, "Selecting ADC chan %d\n\r", selectADC[buf[0]]);
    2e30:	ac1b      	add	r4, sp, #108	; 0x6c
    2e32:	466b      	mov	r3, sp
    2e34:	781b      	ldrb	r3, [r3, #0]
    2e36:	5ce2      	ldrb	r2, [r4, r3]
    2e38:	4919      	ldr	r1, [pc, #100]	; (2ea0 <main+0x158>)
    2e3a:	a801      	add	r0, sp, #4
    2e3c:	4b13      	ldr	r3, [pc, #76]	; (2e8c <main+0x144>)
    2e3e:	4798      	blx	r3
					cdcdf_acm_write(strDbg, 100);
    2e40:	2164      	movs	r1, #100	; 0x64
    2e42:	a801      	add	r0, sp, #4
    2e44:	4b12      	ldr	r3, [pc, #72]	; (2e90 <main+0x148>)
    2e46:	4798      	blx	r3
					currentADC = selectADC[buf[0]];
    2e48:	466b      	mov	r3, sp
    2e4a:	781b      	ldrb	r3, [r3, #0]
    2e4c:	5ce4      	ldrb	r4, [r4, r3]
										muxposADC[buf[0]];
    2e4e:	aa1a      	add	r2, sp, #104	; 0x68
    2e50:	5cd2      	ldrb	r2, [r2, r3]
										ADC_INPUTCTRL_MUXNEG_GND |
    2e52:	4b0a      	ldr	r3, [pc, #40]	; (2e7c <main+0x134>)
    2e54:	4313      	orrs	r3, r2
					ADC->INPUTCTRL.reg = ADC_INPUTCTRL_GAIN_DIV2 |
    2e56:	4a08      	ldr	r2, [pc, #32]	; (2e78 <main+0x130>)
    2e58:	6113      	str	r3, [r2, #16]
    2e5a:	e7b1      	b.n	2dc0 <main+0x78>
    2e5c:	41004000 	.word	0x41004000
    2e60:	00000115 	.word	0x00000115
    2e64:	20000470 	.word	0x20000470
    2e68:	00000b59 	.word	0x00000b59
    2e6c:	00000b2d 	.word	0x00000b2d
    2e70:	2000046c 	.word	0x2000046c
    2e74:	0000061d 	.word	0x0000061d
    2e78:	42004000 	.word	0x42004000
    2e7c:	0f001800 	.word	0x0f001800
    2e80:	00000b85 	.word	0x00000b85
    2e84:	00000649 	.word	0x00000649
    2e88:	000047f8 	.word	0x000047f8
    2e8c:	00003dc9 	.word	0x00003dc9
    2e90:	00003181 	.word	0x00003181
    2e94:	000007f5 	.word	0x000007f5
    2e98:	0000076d 	.word	0x0000076d
    2e9c:	00000829 	.word	0x00000829
    2ea0:	000047e0 	.word	0x000047e0

00002ea4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ea6:	b083      	sub	sp, #12
    2ea8:	0006      	movs	r6, r0
    2eaa:	000c      	movs	r4, r1
    2eac:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2eae:	780a      	ldrb	r2, [r1, #0]
    2eb0:	0653      	lsls	r3, r2, #25
    2eb2:	0f9b      	lsrs	r3, r3, #30
    2eb4:	2b01      	cmp	r3, #1
    2eb6:	d000      	beq.n	2eba <cdcdf_acm_req+0x16>
    2eb8:	e06c      	b.n	2f94 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2eba:	7909      	ldrb	r1, [r1, #4]
    2ebc:	7963      	ldrb	r3, [r4, #5]
    2ebe:	021b      	lsls	r3, r3, #8
    2ec0:	430b      	orrs	r3, r1
    2ec2:	493b      	ldr	r1, [pc, #236]	; (2fb0 <cdcdf_acm_req+0x10c>)
    2ec4:	7809      	ldrb	r1, [r1, #0]
    2ec6:	4299      	cmp	r1, r3
    2ec8:	d003      	beq.n	2ed2 <cdcdf_acm_req+0x2e>
    2eca:	4939      	ldr	r1, [pc, #228]	; (2fb0 <cdcdf_acm_req+0x10c>)
    2ecc:	7849      	ldrb	r1, [r1, #1]
    2ece:	4299      	cmp	r1, r3
    2ed0:	d163      	bne.n	2f9a <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2ed2:	b252      	sxtb	r2, r2
    2ed4:	2a00      	cmp	r2, #0
    2ed6:	db0e      	blt.n	2ef6 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2ed8:	79a7      	ldrb	r7, [r4, #6]
    2eda:	79e3      	ldrb	r3, [r4, #7]
    2edc:	021b      	lsls	r3, r3, #8
    2ede:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2ee0:	4b34      	ldr	r3, [pc, #208]	; (2fb4 <cdcdf_acm_req+0x110>)
    2ee2:	4798      	blx	r3
	switch (req->bRequest) {
    2ee4:	7863      	ldrb	r3, [r4, #1]
    2ee6:	2b20      	cmp	r3, #32
    2ee8:	d018      	beq.n	2f1c <cdcdf_acm_req+0x78>
    2eea:	2b22      	cmp	r3, #34	; 0x22
    2eec:	d03c      	beq.n	2f68 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2eee:	200d      	movs	r0, #13
    2ef0:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2ef2:	b003      	add	sp, #12
    2ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2ef6:	2d01      	cmp	r5, #1
    2ef8:	d052      	beq.n	2fa0 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2efa:	7863      	ldrb	r3, [r4, #1]
    2efc:	2b21      	cmp	r3, #33	; 0x21
    2efe:	d151      	bne.n	2fa4 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2f00:	79a2      	ldrb	r2, [r4, #6]
    2f02:	79e3      	ldrb	r3, [r4, #7]
    2f04:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2f06:	4313      	orrs	r3, r2
    2f08:	2b07      	cmp	r3, #7
    2f0a:	d14e      	bne.n	2faa <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2f0c:	2300      	movs	r3, #0
    2f0e:	2207      	movs	r2, #7
    2f10:	4927      	ldr	r1, [pc, #156]	; (2fb0 <cdcdf_acm_req+0x10c>)
    2f12:	3108      	adds	r1, #8
    2f14:	0030      	movs	r0, r6
    2f16:	4c28      	ldr	r4, [pc, #160]	; (2fb8 <cdcdf_acm_req+0x114>)
    2f18:	47a0      	blx	r4
    2f1a:	e7ea      	b.n	2ef2 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2f1c:	2f07      	cmp	r7, #7
    2f1e:	d134      	bne.n	2f8a <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2f20:	2d00      	cmp	r5, #0
    2f22:	d01a      	beq.n	2f5a <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2f24:	2207      	movs	r2, #7
    2f26:	0001      	movs	r1, r0
    2f28:	4668      	mov	r0, sp
    2f2a:	4b24      	ldr	r3, [pc, #144]	; (2fbc <cdcdf_acm_req+0x118>)
    2f2c:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2f2e:	4b20      	ldr	r3, [pc, #128]	; (2fb0 <cdcdf_acm_req+0x10c>)
    2f30:	691b      	ldr	r3, [r3, #16]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d005      	beq.n	2f42 <cdcdf_acm_req+0x9e>
    2f36:	4668      	mov	r0, sp
    2f38:	4798      	blx	r3
    2f3a:	0003      	movs	r3, r0
			return ERR_NONE;
    2f3c:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d0d7      	beq.n	2ef2 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    2f42:	4a1b      	ldr	r2, [pc, #108]	; (2fb0 <cdcdf_acm_req+0x10c>)
    2f44:	0013      	movs	r3, r2
    2f46:	9900      	ldr	r1, [sp, #0]
    2f48:	6091      	str	r1, [r2, #8]
    2f4a:	466a      	mov	r2, sp
    2f4c:	8892      	ldrh	r2, [r2, #4]
    2f4e:	819a      	strh	r2, [r3, #12]
    2f50:	466a      	mov	r2, sp
    2f52:	7992      	ldrb	r2, [r2, #6]
    2f54:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2f56:	2000      	movs	r0, #0
    2f58:	e7cb      	b.n	2ef2 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2f5a:	2300      	movs	r3, #0
    2f5c:	2207      	movs	r2, #7
    2f5e:	0001      	movs	r1, r0
    2f60:	0030      	movs	r0, r6
    2f62:	4c15      	ldr	r4, [pc, #84]	; (2fb8 <cdcdf_acm_req+0x114>)
    2f64:	47a0      	blx	r4
    2f66:	e7c4      	b.n	2ef2 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2f68:	2300      	movs	r3, #0
    2f6a:	2200      	movs	r2, #0
    2f6c:	2100      	movs	r1, #0
    2f6e:	2000      	movs	r0, #0
    2f70:	4d11      	ldr	r5, [pc, #68]	; (2fb8 <cdcdf_acm_req+0x114>)
    2f72:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2f74:	4b0e      	ldr	r3, [pc, #56]	; (2fb0 <cdcdf_acm_req+0x10c>)
    2f76:	695b      	ldr	r3, [r3, #20]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d009      	beq.n	2f90 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2f7c:	78a2      	ldrb	r2, [r4, #2]
    2f7e:	78e0      	ldrb	r0, [r4, #3]
    2f80:	0200      	lsls	r0, r0, #8
    2f82:	4310      	orrs	r0, r2
    2f84:	4798      	blx	r3
		return ERR_NONE;
    2f86:	2000      	movs	r0, #0
    2f88:	e7b3      	b.n	2ef2 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2f8a:	2001      	movs	r0, #1
    2f8c:	4240      	negs	r0, r0
    2f8e:	e7b0      	b.n	2ef2 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2f90:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2f92:	e7ae      	b.n	2ef2 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2f94:	200a      	movs	r0, #10
    2f96:	4240      	negs	r0, r0
    2f98:	e7ab      	b.n	2ef2 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2f9a:	200a      	movs	r0, #10
    2f9c:	4240      	negs	r0, r0
    2f9e:	e7a8      	b.n	2ef2 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2fa0:	2000      	movs	r0, #0
    2fa2:	e7a6      	b.n	2ef2 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    2fa4:	200d      	movs	r0, #13
    2fa6:	4240      	negs	r0, r0
    2fa8:	e7a3      	b.n	2ef2 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2faa:	2001      	movs	r0, #1
    2fac:	4240      	negs	r0, r0
    2fae:	e7a0      	b.n	2ef2 <cdcdf_acm_req+0x4e>
    2fb0:	20000380 	.word	0x20000380
    2fb4:	000038a1 	.word	0x000038a1
    2fb8:	00003351 	.word	0x00003351
    2fbc:	00003da5 	.word	0x00003da5

00002fc0 <cdcdf_acm_ctrl>:
{
    2fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fc2:	46de      	mov	lr, fp
    2fc4:	4657      	mov	r7, sl
    2fc6:	464e      	mov	r6, r9
    2fc8:	4645      	mov	r5, r8
    2fca:	b5e0      	push	{r5, r6, r7, lr}
    2fcc:	b083      	sub	sp, #12
    2fce:	0016      	movs	r6, r2
	switch (ctrl) {
    2fd0:	2901      	cmp	r1, #1
    2fd2:	d068      	beq.n	30a6 <cdcdf_acm_ctrl+0xe6>
    2fd4:	2900      	cmp	r1, #0
    2fd6:	d00b      	beq.n	2ff0 <cdcdf_acm_ctrl+0x30>
    2fd8:	2902      	cmp	r1, #2
    2fda:	d100      	bne.n	2fde <cdcdf_acm_ctrl+0x1e>
    2fdc:	e093      	b.n	3106 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2fde:	200d      	movs	r0, #13
    2fe0:	4240      	negs	r0, r0
}
    2fe2:	b003      	add	sp, #12
    2fe4:	bc3c      	pop	{r2, r3, r4, r5}
    2fe6:	4690      	mov	r8, r2
    2fe8:	4699      	mov	r9, r3
    2fea:	46a2      	mov	sl, r4
    2fec:	46ab      	mov	fp, r5
    2fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2ff0:	6883      	ldr	r3, [r0, #8]
    2ff2:	4698      	mov	r8, r3
	ifc = desc->sod;
    2ff4:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2ff6:	2800      	cmp	r0, #0
    2ff8:	d100      	bne.n	2ffc <cdcdf_acm_ctrl+0x3c>
    2ffa:	e087      	b.n	310c <cdcdf_acm_ctrl+0x14c>
    2ffc:	9301      	str	r3, [sp, #4]
    2ffe:	2301      	movs	r3, #1
    3000:	4443      	add	r3, r8
    3002:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3004:	4f47      	ldr	r7, [pc, #284]	; (3124 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    3006:	4b48      	ldr	r3, [pc, #288]	; (3128 <cdcdf_acm_ctrl+0x168>)
    3008:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    300a:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    300c:	7943      	ldrb	r3, [r0, #5]
    300e:	2108      	movs	r1, #8
    3010:	438b      	bics	r3, r1
    3012:	2b02      	cmp	r3, #2
    3014:	d002      	beq.n	301c <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    3016:	200a      	movs	r0, #10
    3018:	4240      	negs	r0, r0
    301a:	e7e2      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
    301c:	9901      	ldr	r1, [sp, #4]
    301e:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3020:	780b      	ldrb	r3, [r1, #0]
    3022:	429a      	cmp	r2, r3
    3024:	d075      	beq.n	3112 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3026:	2bff      	cmp	r3, #255	; 0xff
    3028:	d176      	bne.n	3118 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    302a:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    302c:	2205      	movs	r2, #5
    302e:	6871      	ldr	r1, [r6, #4]
    3030:	4b3e      	ldr	r3, [pc, #248]	; (312c <cdcdf_acm_ctrl+0x16c>)
    3032:	4798      	blx	r3
    3034:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    3036:	d11e      	bne.n	3076 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3038:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    303a:	7803      	ldrb	r3, [r0, #0]
    303c:	18c0      	adds	r0, r0, r3
    303e:	2204      	movs	r2, #4
    3040:	6871      	ldr	r1, [r6, #4]
    3042:	4b3a      	ldr	r3, [pc, #232]	; (312c <cdcdf_acm_ctrl+0x16c>)
    3044:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3046:	9b01      	ldr	r3, [sp, #4]
    3048:	455b      	cmp	r3, fp
    304a:	d027      	beq.n	309c <cdcdf_acm_ctrl+0xdc>
    304c:	9b01      	ldr	r3, [sp, #4]
    304e:	3301      	adds	r3, #1
    3050:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    3052:	2800      	cmp	r0, #0
    3054:	d1d9      	bne.n	300a <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    3056:	200a      	movs	r0, #10
    3058:	4240      	negs	r0, r0
    305a:	e7c2      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    305c:	4653      	mov	r3, sl
    305e:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    3060:	0028      	movs	r0, r5
    3062:	4b31      	ldr	r3, [pc, #196]	; (3128 <cdcdf_acm_ctrl+0x168>)
    3064:	4798      	blx	r3
			desc->sod = ep;
    3066:	6034      	str	r4, [r6, #0]
    3068:	7820      	ldrb	r0, [r4, #0]
    306a:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    306c:	6871      	ldr	r1, [r6, #4]
    306e:	4b30      	ldr	r3, [pc, #192]	; (3130 <cdcdf_acm_ctrl+0x170>)
    3070:	4798      	blx	r3
    3072:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    3074:	d0e0      	beq.n	3038 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    3076:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    3078:	7963      	ldrb	r3, [r4, #5]
    307a:	021b      	lsls	r3, r3, #8
    307c:	7922      	ldrb	r2, [r4, #4]
    307e:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3080:	b292      	uxth	r2, r2
    3082:	78e1      	ldrb	r1, [r4, #3]
    3084:	0028      	movs	r0, r5
    3086:	47b8      	blx	r7
    3088:	2800      	cmp	r0, #0
    308a:	d148      	bne.n	311e <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    308c:	b26b      	sxtb	r3, r5
    308e:	2b00      	cmp	r3, #0
    3090:	dbe4      	blt.n	305c <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3092:	4643      	mov	r3, r8
    3094:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3096:	0028      	movs	r0, r5
    3098:	47c8      	blx	r9
    309a:	e7e4      	b.n	3066 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    309c:	2201      	movs	r2, #1
    309e:	4b25      	ldr	r3, [pc, #148]	; (3134 <cdcdf_acm_ctrl+0x174>)
    30a0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    30a2:	2000      	movs	r0, #0
    30a4:	e79d      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    30a6:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    30a8:	2a00      	cmp	r2, #0
    30aa:	d008      	beq.n	30be <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    30ac:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    30ae:	795b      	ldrb	r3, [r3, #5]
    30b0:	2208      	movs	r2, #8
    30b2:	4393      	bics	r3, r2
    30b4:	2b02      	cmp	r3, #2
    30b6:	d002      	beq.n	30be <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    30b8:	200a      	movs	r0, #10
    30ba:	4240      	negs	r0, r0
    30bc:	e791      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    30be:	7823      	ldrb	r3, [r4, #0]
    30c0:	2bff      	cmp	r3, #255	; 0xff
    30c2:	d008      	beq.n	30d6 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    30c4:	23ff      	movs	r3, #255	; 0xff
    30c6:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    30c8:	78a0      	ldrb	r0, [r4, #2]
    30ca:	28ff      	cmp	r0, #255	; 0xff
    30cc:	d003      	beq.n	30d6 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    30ce:	4b1a      	ldr	r3, [pc, #104]	; (3138 <cdcdf_acm_ctrl+0x178>)
    30d0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    30d2:	23ff      	movs	r3, #255	; 0xff
    30d4:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    30d6:	7863      	ldrb	r3, [r4, #1]
    30d8:	2bff      	cmp	r3, #255	; 0xff
    30da:	d008      	beq.n	30ee <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    30dc:	23ff      	movs	r3, #255	; 0xff
    30de:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    30e0:	78e0      	ldrb	r0, [r4, #3]
    30e2:	28ff      	cmp	r0, #255	; 0xff
    30e4:	d003      	beq.n	30ee <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    30e6:	4b14      	ldr	r3, [pc, #80]	; (3138 <cdcdf_acm_ctrl+0x178>)
    30e8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    30ea:	23ff      	movs	r3, #255	; 0xff
    30ec:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    30ee:	7920      	ldrb	r0, [r4, #4]
    30f0:	28ff      	cmp	r0, #255	; 0xff
    30f2:	d003      	beq.n	30fc <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    30f4:	4b10      	ldr	r3, [pc, #64]	; (3138 <cdcdf_acm_ctrl+0x178>)
    30f6:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    30f8:	23ff      	movs	r3, #255	; 0xff
    30fa:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    30fc:	2200      	movs	r2, #0
    30fe:	4b0d      	ldr	r3, [pc, #52]	; (3134 <cdcdf_acm_ctrl+0x174>)
    3100:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3102:	2000      	movs	r0, #0
    3104:	e76d      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    3106:	201b      	movs	r0, #27
    3108:	4240      	negs	r0, r0
    310a:	e76a      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    310c:	200a      	movs	r0, #10
    310e:	4240      	negs	r0, r0
    3110:	e767      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    3112:	2012      	movs	r0, #18
    3114:	4240      	negs	r0, r0
    3116:	e764      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    3118:	201c      	movs	r0, #28
    311a:	4240      	negs	r0, r0
    311c:	e761      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    311e:	2014      	movs	r0, #20
    3120:	4240      	negs	r0, r0
    3122:	e75e      	b.n	2fe2 <cdcdf_acm_ctrl+0x22>
    3124:	00000eb1 	.word	0x00000eb1
    3128:	00000f45 	.word	0x00000f45
    312c:	000038bd 	.word	0x000038bd
    3130:	000038f3 	.word	0x000038f3
    3134:	20000380 	.word	0x20000380
    3138:	00000f19 	.word	0x00000f19

0000313c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    313c:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    313e:	4b0a      	ldr	r3, [pc, #40]	; (3168 <cdcdf_acm_init+0x2c>)
    3140:	4798      	blx	r3
    3142:	2801      	cmp	r0, #1
    3144:	d80c      	bhi.n	3160 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3146:	4809      	ldr	r0, [pc, #36]	; (316c <cdcdf_acm_init+0x30>)
    3148:	4b09      	ldr	r3, [pc, #36]	; (3170 <cdcdf_acm_init+0x34>)
    314a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    314c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    314e:	3018      	adds	r0, #24
    3150:	4b08      	ldr	r3, [pc, #32]	; (3174 <cdcdf_acm_init+0x38>)
    3152:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3154:	4908      	ldr	r1, [pc, #32]	; (3178 <cdcdf_acm_init+0x3c>)
    3156:	2001      	movs	r0, #1
    3158:	4b08      	ldr	r3, [pc, #32]	; (317c <cdcdf_acm_init+0x40>)
    315a:	4798      	blx	r3
	return ERR_NONE;
    315c:	2000      	movs	r0, #0
}
    315e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3160:	2011      	movs	r0, #17
    3162:	4240      	negs	r0, r0
    3164:	e7fb      	b.n	315e <cdcdf_acm_init+0x22>
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	000038ad 	.word	0x000038ad
    316c:	20000380 	.word	0x20000380
    3170:	00002fc1 	.word	0x00002fc1
    3174:	00003845 	.word	0x00003845
    3178:	20000014 	.word	0x20000014
    317c:	000037ad 	.word	0x000037ad

00003180 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    3180:	b510      	push	{r4, lr}
    3182:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    3184:	4b07      	ldr	r3, [pc, #28]	; (31a4 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    3186:	795b      	ldrb	r3, [r3, #5]
    3188:	2b00      	cmp	r3, #0
    318a:	d007      	beq.n	319c <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    318c:	4b05      	ldr	r3, [pc, #20]	; (31a4 <cdcdf_acm_write+0x24>)
    318e:	78d8      	ldrb	r0, [r3, #3]
    3190:	2301      	movs	r3, #1
    3192:	000a      	movs	r2, r1
    3194:	0021      	movs	r1, r4
    3196:	4c04      	ldr	r4, [pc, #16]	; (31a8 <cdcdf_acm_write+0x28>)
    3198:	47a0      	blx	r4
}
    319a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    319c:	2011      	movs	r0, #17
    319e:	4240      	negs	r0, r0
    31a0:	e7fb      	b.n	319a <cdcdf_acm_write+0x1a>
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	20000380 	.word	0x20000380
    31a8:	00003351 	.word	0x00003351

000031ac <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    31ac:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    31ae:	4b06      	ldr	r3, [pc, #24]	; (31c8 <usbdc_unconfig+0x1c>)
    31b0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    31b2:	2c00      	cmp	r4, #0
    31b4:	d007      	beq.n	31c6 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    31b6:	2200      	movs	r2, #0
    31b8:	2101      	movs	r1, #1
    31ba:	0020      	movs	r0, r4
    31bc:	6863      	ldr	r3, [r4, #4]
    31be:	4798      	blx	r3
		func = func->next;
    31c0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    31c2:	2c00      	cmp	r4, #0
    31c4:	d1f7      	bne.n	31b6 <usbdc_unconfig+0xa>
	}
}
    31c6:	bd10      	pop	{r4, pc}
    31c8:	200003a4 	.word	0x200003a4

000031cc <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    31cc:	b570      	push	{r4, r5, r6, lr}
    31ce:	0006      	movs	r6, r0
    31d0:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    31d2:	4b07      	ldr	r3, [pc, #28]	; (31f0 <usbdc_change_notify+0x24>)
    31d4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    31d6:	2c00      	cmp	r4, #0
    31d8:	d103      	bne.n	31e2 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    31da:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    31dc:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    31de:	2c00      	cmp	r4, #0
    31e0:	d0fb      	beq.n	31da <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    31e2:	6863      	ldr	r3, [r4, #4]
    31e4:	2b00      	cmp	r3, #0
    31e6:	d0f9      	beq.n	31dc <usbdc_change_notify+0x10>
			cg->cb(change, value);
    31e8:	0029      	movs	r1, r5
    31ea:	0030      	movs	r0, r6
    31ec:	4798      	blx	r3
    31ee:	e7f5      	b.n	31dc <usbdc_change_notify+0x10>
    31f0:	200003a4 	.word	0x200003a4

000031f4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    31f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31f6:	0007      	movs	r7, r0
    31f8:	000e      	movs	r6, r1
    31fa:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    31fc:	4b0d      	ldr	r3, [pc, #52]	; (3234 <usbdc_request_handler+0x40>)
    31fe:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3200:	2c00      	cmp	r4, #0
    3202:	d104      	bne.n	320e <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3204:	2000      	movs	r0, #0
    3206:	e011      	b.n	322c <usbdc_request_handler+0x38>
		h = h->next;
    3208:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    320a:	2c00      	cmp	r4, #0
    320c:	d00d      	beq.n	322a <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    320e:	6863      	ldr	r3, [r4, #4]
    3210:	2b00      	cmp	r3, #0
    3212:	d0f9      	beq.n	3208 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    3214:	002a      	movs	r2, r5
    3216:	0031      	movs	r1, r6
    3218:	0038      	movs	r0, r7
    321a:	4798      	blx	r3
			if (0 == rc) {
    321c:	2800      	cmp	r0, #0
    321e:	d006      	beq.n	322e <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    3220:	300a      	adds	r0, #10
    3222:	d0f1      	beq.n	3208 <usbdc_request_handler+0x14>
				return -1;
    3224:	2001      	movs	r0, #1
    3226:	4240      	negs	r0, r0
    3228:	e000      	b.n	322c <usbdc_request_handler+0x38>
	return false;
    322a:	2000      	movs	r0, #0
}
    322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    322e:	2001      	movs	r0, #1
    3230:	e7fc      	b.n	322c <usbdc_request_handler+0x38>
    3232:	46c0      	nop			; (mov r8, r8)
    3234:	200003a4 	.word	0x200003a4

00003238 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3238:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    323a:	4b06      	ldr	r3, [pc, #24]	; (3254 <usbd_sof_cb+0x1c>)
    323c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    323e:	2c00      	cmp	r4, #0
    3240:	d103      	bne.n	324a <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    3242:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3244:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3246:	2c00      	cmp	r4, #0
    3248:	d0fb      	beq.n	3242 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    324a:	6863      	ldr	r3, [r4, #4]
    324c:	2b00      	cmp	r3, #0
    324e:	d0f9      	beq.n	3244 <usbd_sof_cb+0xc>
			sof->cb();
    3250:	4798      	blx	r3
    3252:	e7f7      	b.n	3244 <usbd_sof_cb+0xc>
    3254:	200003a4 	.word	0x200003a4

00003258 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3258:	b510      	push	{r4, lr}
    325a:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    325c:	2900      	cmp	r1, #0
    325e:	d003      	beq.n	3268 <usbdc_cb_ctl_done+0x10>
    3260:	2901      	cmp	r1, #1
    3262:	d029      	beq.n	32b8 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3264:	2000      	movs	r0, #0
    3266:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3268:	7813      	ldrb	r3, [r2, #0]
    326a:	2b00      	cmp	r3, #0
    326c:	d1fa      	bne.n	3264 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    326e:	7853      	ldrb	r3, [r2, #1]
    3270:	2b05      	cmp	r3, #5
    3272:	d011      	beq.n	3298 <usbdc_cb_ctl_done+0x40>
    3274:	2b09      	cmp	r3, #9
    3276:	d1f5      	bne.n	3264 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    3278:	7892      	ldrb	r2, [r2, #2]
    327a:	4b12      	ldr	r3, [pc, #72]	; (32c4 <usbdc_cb_ctl_done+0x6c>)
    327c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    327e:	78a3      	ldrb	r3, [r4, #2]
    3280:	78e1      	ldrb	r1, [r4, #3]
    3282:	0209      	lsls	r1, r1, #8
    3284:	4319      	orrs	r1, r3
    3286:	1e4b      	subs	r3, r1, #1
    3288:	4199      	sbcs	r1, r3
    328a:	3103      	adds	r1, #3
    328c:	4b0d      	ldr	r3, [pc, #52]	; (32c4 <usbdc_cb_ctl_done+0x6c>)
    328e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3290:	2001      	movs	r0, #1
    3292:	4b0d      	ldr	r3, [pc, #52]	; (32c8 <usbdc_cb_ctl_done+0x70>)
    3294:	4798      	blx	r3
    3296:	e7e5      	b.n	3264 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    3298:	7890      	ldrb	r0, [r2, #2]
    329a:	4b0c      	ldr	r3, [pc, #48]	; (32cc <usbdc_cb_ctl_done+0x74>)
    329c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    329e:	78a3      	ldrb	r3, [r4, #2]
    32a0:	78e1      	ldrb	r1, [r4, #3]
    32a2:	0209      	lsls	r1, r1, #8
    32a4:	4319      	orrs	r1, r3
    32a6:	1e4b      	subs	r3, r1, #1
    32a8:	4199      	sbcs	r1, r3
    32aa:	3102      	adds	r1, #2
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <usbdc_cb_ctl_done+0x6c>)
    32ae:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    32b0:	2001      	movs	r0, #1
    32b2:	4b05      	ldr	r3, [pc, #20]	; (32c8 <usbdc_cb_ctl_done+0x70>)
    32b4:	4798      	blx	r3
    32b6:	e7d5      	b.n	3264 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    32b8:	2201      	movs	r2, #1
    32ba:	0021      	movs	r1, r4
    32bc:	2000      	movs	r0, #0
    32be:	4b04      	ldr	r3, [pc, #16]	; (32d0 <usbdc_cb_ctl_done+0x78>)
    32c0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    32c2:	e7cf      	b.n	3264 <usbdc_cb_ctl_done+0xc>
    32c4:	200003a4 	.word	0x200003a4
    32c8:	000031cd 	.word	0x000031cd
    32cc:	00000ea5 	.word	0x00000ea5
    32d0:	000031f5 	.word	0x000031f5

000032d4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    32d4:	b510      	push	{r4, lr}
	usbdc_unconfig();
    32d6:	4b0d      	ldr	r3, [pc, #52]	; (330c <usbdc_reset+0x38>)
    32d8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    32da:	4c0d      	ldr	r4, [pc, #52]	; (3310 <usbdc_reset+0x3c>)
    32dc:	2302      	movs	r3, #2
    32de:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    32e0:	2300      	movs	r3, #0
    32e2:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    32e4:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    32e6:	2000      	movs	r0, #0
    32e8:	4b0a      	ldr	r3, [pc, #40]	; (3314 <usbdc_reset+0x40>)
    32ea:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    32ec:	7f20      	ldrb	r0, [r4, #28]
    32ee:	4b0a      	ldr	r3, [pc, #40]	; (3318 <usbdc_reset+0x44>)
    32f0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    32f2:	4a0a      	ldr	r2, [pc, #40]	; (331c <usbdc_reset+0x48>)
    32f4:	2100      	movs	r1, #0
    32f6:	2000      	movs	r0, #0
    32f8:	4c09      	ldr	r4, [pc, #36]	; (3320 <usbdc_reset+0x4c>)
    32fa:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    32fc:	4a09      	ldr	r2, [pc, #36]	; (3324 <usbdc_reset+0x50>)
    32fe:	2102      	movs	r1, #2
    3300:	2000      	movs	r0, #0
    3302:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3304:	2000      	movs	r0, #0
    3306:	4b08      	ldr	r3, [pc, #32]	; (3328 <usbdc_reset+0x54>)
    3308:	4798      	blx	r3
}
    330a:	bd10      	pop	{r4, pc}
    330c:	000031ad 	.word	0x000031ad
    3310:	200003a4 	.word	0x200003a4
    3314:	00000f19 	.word	0x00000f19
    3318:	00000f05 	.word	0x00000f05
    331c:	0000336d 	.word	0x0000336d
    3320:	00001121 	.word	0x00001121
    3324:	00003259 	.word	0x00003259
    3328:	00000f45 	.word	0x00000f45

0000332c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    332c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    332e:	2800      	cmp	r0, #0
    3330:	d002      	beq.n	3338 <usbd_event_cb+0xc>
    3332:	2801      	cmp	r0, #1
    3334:	d004      	beq.n	3340 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    3336:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3338:	2000      	movs	r0, #0
    333a:	4b03      	ldr	r3, [pc, #12]	; (3348 <usbd_event_cb+0x1c>)
    333c:	4798      	blx	r3
		break;
    333e:	e7fa      	b.n	3336 <usbd_event_cb+0xa>
		usbdc_reset();
    3340:	4b02      	ldr	r3, [pc, #8]	; (334c <usbd_event_cb+0x20>)
    3342:	4798      	blx	r3
}
    3344:	e7f7      	b.n	3336 <usbd_event_cb+0xa>
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	000031cd 	.word	0x000031cd
    334c:	000032d5 	.word	0x000032d5

00003350 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3350:	b510      	push	{r4, lr}
    3352:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3354:	ac01      	add	r4, sp, #4
    3356:	9101      	str	r1, [sp, #4]
    3358:	9202      	str	r2, [sp, #8]
    335a:	7220      	strb	r0, [r4, #8]
    335c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    335e:	0020      	movs	r0, r4
    3360:	4b01      	ldr	r3, [pc, #4]	; (3368 <usbdc_xfer+0x18>)
    3362:	4798      	blx	r3
}
    3364:	b004      	add	sp, #16
    3366:	bd10      	pop	{r4, pc}
    3368:	00000f91 	.word	0x00000f91

0000336c <usbdc_cb_ctl_req>:
{
    336c:	b5f0      	push	{r4, r5, r6, r7, lr}
    336e:	46c6      	mov	lr, r8
    3370:	b500      	push	{lr}
    3372:	b084      	sub	sp, #16
    3374:	0005      	movs	r5, r0
    3376:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3378:	2200      	movs	r2, #0
    337a:	4bb5      	ldr	r3, [pc, #724]	; (3650 <usbdc_cb_ctl_req+0x2e4>)
    337c:	4798      	blx	r3
    337e:	1c43      	adds	r3, r0, #1
    3380:	d00d      	beq.n	339e <usbdc_cb_ctl_req+0x32>
		return true;
    3382:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3384:	2801      	cmp	r0, #1
    3386:	d00b      	beq.n	33a0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3388:	7822      	ldrb	r2, [r4, #0]
    338a:	231f      	movs	r3, #31
    338c:	0011      	movs	r1, r2
    338e:	4399      	bics	r1, r3
    3390:	d00b      	beq.n	33aa <usbdc_cb_ctl_req+0x3e>
    3392:	b2cb      	uxtb	r3, r1
    3394:	2b80      	cmp	r3, #128	; 0x80
    3396:	d100      	bne.n	339a <usbdc_cb_ctl_req+0x2e>
    3398:	e0f8      	b.n	358c <usbdc_cb_ctl_req+0x220>
		return false;
    339a:	2300      	movs	r3, #0
    339c:	e000      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    339e:	2300      	movs	r3, #0
}
    33a0:	0018      	movs	r0, r3
    33a2:	b004      	add	sp, #16
    33a4:	bc04      	pop	{r2}
    33a6:	4690      	mov	r8, r2
    33a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    33aa:	7863      	ldrb	r3, [r4, #1]
    33ac:	2b0b      	cmp	r3, #11
    33ae:	d900      	bls.n	33b2 <usbdc_cb_ctl_req+0x46>
    33b0:	e1e4      	b.n	377c <usbdc_cb_ctl_req+0x410>
    33b2:	009b      	lsls	r3, r3, #2
    33b4:	49a7      	ldr	r1, [pc, #668]	; (3654 <usbdc_cb_ctl_req+0x2e8>)
    33b6:	58cb      	ldr	r3, [r1, r3]
    33b8:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    33ba:	2301      	movs	r3, #1
    33bc:	2200      	movs	r2, #0
    33be:	2100      	movs	r1, #0
    33c0:	0028      	movs	r0, r5
    33c2:	4ca5      	ldr	r4, [pc, #660]	; (3658 <usbdc_cb_ctl_req+0x2ec>)
    33c4:	47a0      	blx	r4
    33c6:	4243      	negs	r3, r0
    33c8:	4143      	adcs	r3, r0
    33ca:	b2db      	uxtb	r3, r3
    33cc:	e7e8      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    33ce:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    33d0:	2a00      	cmp	r2, #0
    33d2:	d01a      	beq.n	340a <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    33d4:	4ba1      	ldr	r3, [pc, #644]	; (365c <usbdc_cb_ctl_req+0x2f0>)
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	6859      	ldr	r1, [r3, #4]
    33da:	6818      	ldr	r0, [r3, #0]
    33dc:	4ba0      	ldr	r3, [pc, #640]	; (3660 <usbdc_cb_ctl_req+0x2f4>)
    33de:	4798      	blx	r3
	if (NULL == cfg_desc) {
    33e0:	2800      	cmp	r0, #0
    33e2:	d100      	bne.n	33e6 <usbdc_cb_ctl_req+0x7a>
    33e4:	e1d4      	b.n	3790 <usbdc_cb_ctl_req+0x424>
    33e6:	78c3      	ldrb	r3, [r0, #3]
    33e8:	021b      	lsls	r3, r3, #8
    33ea:	7881      	ldrb	r1, [r0, #2]
    33ec:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    33ee:	b289      	uxth	r1, r1
    33f0:	1841      	adds	r1, r0, r1
    33f2:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    33f4:	2204      	movs	r2, #4
    33f6:	4b9b      	ldr	r3, [pc, #620]	; (3664 <usbdc_cb_ctl_req+0x2f8>)
    33f8:	4798      	blx	r3
    33fa:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    33fc:	2800      	cmp	r0, #0
    33fe:	d006      	beq.n	340e <usbdc_cb_ctl_req+0xa2>
    3400:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3402:	4f96      	ldr	r7, [pc, #600]	; (365c <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3404:	4b97      	ldr	r3, [pc, #604]	; (3664 <usbdc_cb_ctl_req+0x2f8>)
    3406:	4698      	mov	r8, r3
    3408:	e01a      	b.n	3440 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    340a:	4b97      	ldr	r3, [pc, #604]	; (3668 <usbdc_cb_ctl_req+0x2fc>)
    340c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    340e:	2301      	movs	r3, #1
    3410:	2200      	movs	r2, #0
    3412:	2100      	movs	r1, #0
    3414:	0028      	movs	r0, r5
    3416:	4c90      	ldr	r4, [pc, #576]	; (3658 <usbdc_cb_ctl_req+0x2ec>)
    3418:	47a0      	blx	r4
    341a:	4243      	negs	r3, r0
    341c:	4143      	adcs	r3, r0
    341e:	b2db      	uxtb	r3, r3
    3420:	e7be      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    3422:	0034      	movs	r4, r6
    3424:	e000      	b.n	3428 <usbdc_cb_ctl_req+0xbc>
    3426:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    3428:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    342a:	7803      	ldrb	r3, [r0, #0]
    342c:	18c0      	adds	r0, r0, r3
    342e:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3430:	9b03      	ldr	r3, [sp, #12]
    3432:	9301      	str	r3, [sp, #4]
    3434:	2204      	movs	r2, #4
    3436:	0019      	movs	r1, r3
    3438:	47c0      	blx	r8
    343a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    343c:	2800      	cmp	r0, #0
    343e:	d0e6      	beq.n	340e <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3440:	7886      	ldrb	r6, [r0, #2]
    3442:	42a6      	cmp	r6, r4
    3444:	d0f0      	beq.n	3428 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3446:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    3448:	2c00      	cmp	r4, #0
    344a:	d0ea      	beq.n	3422 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    344c:	aa02      	add	r2, sp, #8
    344e:	2100      	movs	r1, #0
    3450:	0020      	movs	r0, r4
    3452:	6863      	ldr	r3, [r4, #4]
    3454:	4798      	blx	r3
    3456:	2800      	cmp	r0, #0
    3458:	d0e5      	beq.n	3426 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    345a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    345c:	2c00      	cmp	r4, #0
    345e:	d1f5      	bne.n	344c <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    3460:	0034      	movs	r4, r6
    3462:	e7e1      	b.n	3428 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3464:	231f      	movs	r3, #31
    3466:	401a      	ands	r2, r3
		return false;
    3468:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    346a:	2a02      	cmp	r2, #2
    346c:	d198      	bne.n	33a0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    346e:	79a3      	ldrb	r3, [r4, #6]
    3470:	79e2      	ldrb	r2, [r4, #7]
    3472:	0212      	lsls	r2, r2, #8
    3474:	431a      	orrs	r2, r3
			return false;
    3476:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3478:	2a00      	cmp	r2, #0
    347a:	d000      	beq.n	347e <usbdc_cb_ctl_req+0x112>
    347c:	e790      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    347e:	7920      	ldrb	r0, [r4, #4]
    3480:	2100      	movs	r1, #0
    3482:	4b7a      	ldr	r3, [pc, #488]	; (366c <usbdc_cb_ctl_req+0x300>)
    3484:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3486:	2301      	movs	r3, #1
    3488:	2200      	movs	r2, #0
    348a:	2100      	movs	r1, #0
    348c:	0028      	movs	r0, r5
    348e:	4c72      	ldr	r4, [pc, #456]	; (3658 <usbdc_cb_ctl_req+0x2ec>)
    3490:	47a0      	blx	r4
		return true;
    3492:	2301      	movs	r3, #1
    3494:	e784      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3496:	231f      	movs	r3, #31
    3498:	401a      	ands	r2, r3
		return false;
    349a:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    349c:	2a02      	cmp	r2, #2
    349e:	d000      	beq.n	34a2 <usbdc_cb_ctl_req+0x136>
    34a0:	e77e      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    34a2:	79a3      	ldrb	r3, [r4, #6]
    34a4:	79e2      	ldrb	r2, [r4, #7]
    34a6:	0212      	lsls	r2, r2, #8
    34a8:	431a      	orrs	r2, r3
			return false;
    34aa:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    34ac:	2a00      	cmp	r2, #0
    34ae:	d000      	beq.n	34b2 <usbdc_cb_ctl_req+0x146>
    34b0:	e776      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    34b2:	7920      	ldrb	r0, [r4, #4]
    34b4:	2101      	movs	r1, #1
    34b6:	4b6d      	ldr	r3, [pc, #436]	; (366c <usbdc_cb_ctl_req+0x300>)
    34b8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    34ba:	2301      	movs	r3, #1
    34bc:	2200      	movs	r2, #0
    34be:	2100      	movs	r1, #0
    34c0:	0028      	movs	r0, r5
    34c2:	4c65      	ldr	r4, [pc, #404]	; (3658 <usbdc_cb_ctl_req+0x2ec>)
    34c4:	47a0      	blx	r4
		return true;
    34c6:	2301      	movs	r3, #1
    34c8:	e76a      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    34ca:	78a3      	ldrb	r3, [r4, #2]
    34cc:	78e5      	ldrb	r5, [r4, #3]
    34ce:	022d      	lsls	r5, r5, #8
    34d0:	431d      	orrs	r5, r3
    34d2:	7923      	ldrb	r3, [r4, #4]
    34d4:	7964      	ldrb	r4, [r4, #5]
    34d6:	0224      	lsls	r4, r4, #8
    34d8:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    34da:	4a60      	ldr	r2, [pc, #384]	; (365c <usbdc_cb_ctl_req+0x2f0>)
    34dc:	6813      	ldr	r3, [r2, #0]
    34de:	7ed2      	ldrb	r2, [r2, #27]
    34e0:	6859      	ldr	r1, [r3, #4]
    34e2:	6818      	ldr	r0, [r3, #0]
    34e4:	4b5e      	ldr	r3, [pc, #376]	; (3660 <usbdc_cb_ctl_req+0x2f4>)
    34e6:	4798      	blx	r3
	if (NULL == ifc) {
    34e8:	2800      	cmp	r0, #0
    34ea:	d047      	beq.n	357c <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    34ec:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    34ee:	78c3      	ldrb	r3, [r0, #3]
    34f0:	021b      	lsls	r3, r3, #8
    34f2:	7881      	ldrb	r1, [r0, #2]
    34f4:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    34f6:	b289      	uxth	r1, r1
    34f8:	1841      	adds	r1, r0, r1
    34fa:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    34fc:	2204      	movs	r2, #4
    34fe:	4b59      	ldr	r3, [pc, #356]	; (3664 <usbdc_cb_ctl_req+0x2f8>)
    3500:	4798      	blx	r3
    3502:	2800      	cmp	r0, #0
    3504:	d03c      	beq.n	3580 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3506:	4e57      	ldr	r6, [pc, #348]	; (3664 <usbdc_cb_ctl_req+0x2f8>)
    3508:	e008      	b.n	351c <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    350a:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    350c:	7803      	ldrb	r3, [r0, #0]
    350e:	18c0      	adds	r0, r0, r3
    3510:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3512:	2204      	movs	r2, #4
    3514:	9903      	ldr	r1, [sp, #12]
    3516:	47b0      	blx	r6
		if (NULL == ifc) {
    3518:	2800      	cmp	r0, #0
    351a:	d033      	beq.n	3584 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    351c:	7883      	ldrb	r3, [r0, #2]
    351e:	42a3      	cmp	r3, r4
    3520:	d1f3      	bne.n	350a <usbdc_cb_ctl_req+0x19e>
    3522:	78c3      	ldrb	r3, [r0, #3]
    3524:	42ab      	cmp	r3, r5
    3526:	d1f0      	bne.n	350a <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    3528:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    352a:	4b4c      	ldr	r3, [pc, #304]	; (365c <usbdc_cb_ctl_req+0x2f0>)
    352c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    352e:	2e00      	cmp	r6, #0
    3530:	d02a      	beq.n	3588 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3532:	aa02      	add	r2, sp, #8
    3534:	2101      	movs	r1, #1
    3536:	0030      	movs	r0, r6
    3538:	6873      	ldr	r3, [r6, #4]
    353a:	4798      	blx	r3
    353c:	2800      	cmp	r0, #0
    353e:	d004      	beq.n	354a <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    3540:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    3542:	2e00      	cmp	r6, #0
    3544:	d1f5      	bne.n	3532 <usbdc_cb_ctl_req+0x1c6>
	return false;
    3546:	2300      	movs	r3, #0
    3548:	e72a      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    354a:	6873      	ldr	r3, [r6, #4]
    354c:	aa02      	add	r2, sp, #8
    354e:	2100      	movs	r1, #0
    3550:	0030      	movs	r0, r6
    3552:	4798      	blx	r3
			return false;
    3554:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3556:	2800      	cmp	r0, #0
    3558:	d000      	beq.n	355c <usbdc_cb_ctl_req+0x1f0>
    355a:	e721      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    355c:	2d00      	cmp	r5, #0
    355e:	d005      	beq.n	356c <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3560:	493e      	ldr	r1, [pc, #248]	; (365c <usbdc_cb_ctl_req+0x2f0>)
    3562:	2201      	movs	r2, #1
    3564:	40a2      	lsls	r2, r4
    3566:	7f4b      	ldrb	r3, [r1, #29]
    3568:	4313      	orrs	r3, r2
    356a:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    356c:	2300      	movs	r3, #0
    356e:	2200      	movs	r2, #0
    3570:	2100      	movs	r1, #0
    3572:	2000      	movs	r0, #0
    3574:	4c38      	ldr	r4, [pc, #224]	; (3658 <usbdc_cb_ctl_req+0x2ec>)
    3576:	47a0      	blx	r4
			return true;
    3578:	2301      	movs	r3, #1
    357a:	e711      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    357c:	2300      	movs	r3, #0
    357e:	e70f      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    3580:	2300      	movs	r3, #0
    3582:	e70d      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
			return false;
    3584:	2300      	movs	r3, #0
    3586:	e70b      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
	return false;
    3588:	2300      	movs	r3, #0
    358a:	e709      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    358c:	7863      	ldrb	r3, [r4, #1]
    358e:	2b06      	cmp	r3, #6
    3590:	d033      	beq.n	35fa <usbdc_cb_ctl_req+0x28e>
    3592:	b2d9      	uxtb	r1, r3
    3594:	2906      	cmp	r1, #6
    3596:	d922      	bls.n	35de <usbdc_cb_ctl_req+0x272>
    3598:	2b08      	cmp	r3, #8
    359a:	d100      	bne.n	359e <usbdc_cb_ctl_req+0x232>
    359c:	e0af      	b.n	36fe <usbdc_cb_ctl_req+0x392>
    359e:	2b0a      	cmp	r3, #10
    35a0:	d000      	beq.n	35a4 <usbdc_cb_ctl_req+0x238>
    35a2:	e0ed      	b.n	3780 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    35a4:	4b2d      	ldr	r3, [pc, #180]	; (365c <usbdc_cb_ctl_req+0x2f0>)
    35a6:	7f5a      	ldrb	r2, [r3, #29]
    35a8:	7921      	ldrb	r1, [r4, #4]
    35aa:	7963      	ldrb	r3, [r4, #5]
    35ac:	021b      	lsls	r3, r3, #8
    35ae:	430b      	orrs	r3, r1
    35b0:	411a      	asrs	r2, r3
    35b2:	07d3      	lsls	r3, r2, #31
    35b4:	d400      	bmi.n	35b8 <usbdc_cb_ctl_req+0x24c>
    35b6:	e0ca      	b.n	374e <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    35b8:	4b28      	ldr	r3, [pc, #160]	; (365c <usbdc_cb_ctl_req+0x2f0>)
    35ba:	691d      	ldr	r5, [r3, #16]
	return false;
    35bc:	2300      	movs	r3, #0
	while (NULL != func) {
    35be:	2d00      	cmp	r5, #0
    35c0:	d100      	bne.n	35c4 <usbdc_cb_ctl_req+0x258>
    35c2:	e6ed      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    35c4:	0022      	movs	r2, r4
    35c6:	2102      	movs	r1, #2
    35c8:	0028      	movs	r0, r5
    35ca:	686b      	ldr	r3, [r5, #4]
    35cc:	4798      	blx	r3
    35ce:	2800      	cmp	r0, #0
    35d0:	db00      	blt.n	35d4 <usbdc_cb_ctl_req+0x268>
    35d2:	e0c8      	b.n	3766 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    35d4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    35d6:	2d00      	cmp	r5, #0
    35d8:	d1f4      	bne.n	35c4 <usbdc_cb_ctl_req+0x258>
	return false;
    35da:	2300      	movs	r3, #0
    35dc:	e6e0      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    35de:	2b00      	cmp	r3, #0
    35e0:	d000      	beq.n	35e4 <usbdc_cb_ctl_req+0x278>
    35e2:	e0cd      	b.n	3780 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    35e4:	231f      	movs	r3, #31
    35e6:	401a      	ands	r2, r3
    35e8:	b2d3      	uxtb	r3, r2
    35ea:	2b01      	cmp	r3, #1
    35ec:	d800      	bhi.n	35f0 <usbdc_cb_ctl_req+0x284>
    35ee:	e092      	b.n	3716 <usbdc_cb_ctl_req+0x3aa>
    35f0:	2a02      	cmp	r2, #2
    35f2:	d100      	bne.n	35f6 <usbdc_cb_ctl_req+0x28a>
    35f4:	e09f      	b.n	3736 <usbdc_cb_ctl_req+0x3ca>
		return false;
    35f6:	2300      	movs	r3, #0
    35f8:	e6d2      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    35fa:	78a3      	ldrb	r3, [r4, #2]
    35fc:	78e2      	ldrb	r2, [r4, #3]
    35fe:	0212      	lsls	r2, r2, #8
    3600:	431a      	orrs	r2, r3
    3602:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3604:	2b02      	cmp	r3, #2
    3606:	d033      	beq.n	3670 <usbdc_cb_ctl_req+0x304>
    3608:	2b03      	cmp	r3, #3
    360a:	d056      	beq.n	36ba <usbdc_cb_ctl_req+0x34e>
    360c:	2b01      	cmp	r3, #1
    360e:	d001      	beq.n	3614 <usbdc_cb_ctl_req+0x2a8>
	return false;
    3610:	2300      	movs	r3, #0
    3612:	e6c5      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3614:	79a2      	ldrb	r2, [r4, #6]
    3616:	79e3      	ldrb	r3, [r4, #7]
    3618:	021b      	lsls	r3, r3, #8
    361a:	4313      	orrs	r3, r2
    361c:	1c1a      	adds	r2, r3, #0
    361e:	2b12      	cmp	r3, #18
    3620:	d900      	bls.n	3624 <usbdc_cb_ctl_req+0x2b8>
    3622:	2212      	movs	r2, #18
    3624:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3626:	4b0d      	ldr	r3, [pc, #52]	; (365c <usbdc_cb_ctl_req+0x2f0>)
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	6859      	ldr	r1, [r3, #4]
    362c:	6818      	ldr	r0, [r3, #0]
    362e:	2201      	movs	r2, #1
    3630:	4b0c      	ldr	r3, [pc, #48]	; (3664 <usbdc_cb_ctl_req+0x2f8>)
    3632:	4798      	blx	r3
	if (!dev_desc) {
    3634:	2800      	cmp	r0, #0
    3636:	d100      	bne.n	363a <usbdc_cb_ctl_req+0x2ce>
    3638:	e0a4      	b.n	3784 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    363a:	2300      	movs	r3, #0
    363c:	0022      	movs	r2, r4
    363e:	0001      	movs	r1, r0
    3640:	0028      	movs	r0, r5
    3642:	4c05      	ldr	r4, [pc, #20]	; (3658 <usbdc_cb_ctl_req+0x2ec>)
    3644:	47a0      	blx	r4
    3646:	4243      	negs	r3, r0
    3648:	4143      	adcs	r3, r0
    364a:	b2db      	uxtb	r3, r3
    364c:	e6a8      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	000031f5 	.word	0x000031f5
    3654:	0000480c 	.word	0x0000480c
    3658:	00003351 	.word	0x00003351
    365c:	200003a4 	.word	0x200003a4
    3660:	00003939 	.word	0x00003939
    3664:	000038bd 	.word	0x000038bd
    3668:	000031ad 	.word	0x000031ad
    366c:	000010b9 	.word	0x000010b9
	uint16_t length   = req->wLength;
    3670:	79a3      	ldrb	r3, [r4, #6]
    3672:	79e6      	ldrb	r6, [r4, #7]
    3674:	0236      	lsls	r6, r6, #8
    3676:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3678:	4b46      	ldr	r3, [pc, #280]	; (3794 <usbdc_cb_ctl_req+0x428>)
    367a:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    367c:	681b      	ldr	r3, [r3, #0]
    367e:	3201      	adds	r2, #1
    3680:	b2d2      	uxtb	r2, r2
    3682:	6859      	ldr	r1, [r3, #4]
    3684:	6818      	ldr	r0, [r3, #0]
    3686:	4b44      	ldr	r3, [pc, #272]	; (3798 <usbdc_cb_ctl_req+0x42c>)
    3688:	4798      	blx	r3
    368a:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    368c:	d07c      	beq.n	3788 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    368e:	78c3      	ldrb	r3, [r0, #3]
    3690:	021b      	lsls	r3, r3, #8
    3692:	7884      	ldrb	r4, [r0, #2]
    3694:	18e4      	adds	r4, r4, r3
    3696:	b2a4      	uxth	r4, r4
		need_zlp = false;
    3698:	2300      	movs	r3, #0
	if (length <= total_len) {
    369a:	42a6      	cmp	r6, r4
    369c:	d905      	bls.n	36aa <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    369e:	3f01      	subs	r7, #1
    36a0:	403e      	ands	r6, r7
    36a2:	4273      	negs	r3, r6
    36a4:	4173      	adcs	r3, r6
    36a6:	b2db      	uxtb	r3, r3
		length = total_len;
    36a8:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    36aa:	0032      	movs	r2, r6
    36ac:	0028      	movs	r0, r5
    36ae:	4c3b      	ldr	r4, [pc, #236]	; (379c <usbdc_cb_ctl_req+0x430>)
    36b0:	47a0      	blx	r4
    36b2:	4243      	negs	r3, r0
    36b4:	4143      	adcs	r3, r0
    36b6:	b2db      	uxtb	r3, r3
    36b8:	e672      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    36ba:	79a3      	ldrb	r3, [r4, #6]
    36bc:	79e1      	ldrb	r1, [r4, #7]
    36be:	0209      	lsls	r1, r1, #8
    36c0:	4319      	orrs	r1, r3
    36c2:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36c4:	4b33      	ldr	r3, [pc, #204]	; (3794 <usbdc_cb_ctl_req+0x428>)
    36c6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    36c8:	681b      	ldr	r3, [r3, #0]
    36ca:	b2d2      	uxtb	r2, r2
    36cc:	6859      	ldr	r1, [r3, #4]
    36ce:	6818      	ldr	r0, [r3, #0]
    36d0:	4b33      	ldr	r3, [pc, #204]	; (37a0 <usbdc_cb_ctl_req+0x434>)
    36d2:	4798      	blx	r3
    36d4:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    36d6:	d059      	beq.n	378c <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    36d8:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    36da:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    36dc:	4294      	cmp	r4, r2
    36de:	d906      	bls.n	36ee <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36e0:	1e73      	subs	r3, r6, #1
    36e2:	4023      	ands	r3, r4
    36e4:	0018      	movs	r0, r3
    36e6:	4243      	negs	r3, r0
    36e8:	4143      	adcs	r3, r0
    36ea:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    36ec:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    36ee:	0022      	movs	r2, r4
    36f0:	0028      	movs	r0, r5
    36f2:	4c2a      	ldr	r4, [pc, #168]	; (379c <usbdc_cb_ctl_req+0x430>)
    36f4:	47a0      	blx	r4
    36f6:	4243      	negs	r3, r0
    36f8:	4143      	adcs	r3, r0
    36fa:	b2db      	uxtb	r3, r3
    36fc:	e650      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    36fe:	4b25      	ldr	r3, [pc, #148]	; (3794 <usbdc_cb_ctl_req+0x428>)
    3700:	7eda      	ldrb	r2, [r3, #27]
    3702:	6959      	ldr	r1, [r3, #20]
    3704:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3706:	6959      	ldr	r1, [r3, #20]
    3708:	2300      	movs	r3, #0
    370a:	2201      	movs	r2, #1
    370c:	0028      	movs	r0, r5
    370e:	4c23      	ldr	r4, [pc, #140]	; (379c <usbdc_cb_ctl_req+0x430>)
    3710:	47a0      	blx	r4
		return true;
    3712:	2301      	movs	r3, #1
    3714:	e644      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		st = 0;
    3716:	2300      	movs	r3, #0
    3718:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    371a:	4c1e      	ldr	r4, [pc, #120]	; (3794 <usbdc_cb_ctl_req+0x428>)
    371c:	2202      	movs	r2, #2
    371e:	a902      	add	r1, sp, #8
    3720:	6960      	ldr	r0, [r4, #20]
    3722:	4b20      	ldr	r3, [pc, #128]	; (37a4 <usbdc_cb_ctl_req+0x438>)
    3724:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3726:	6961      	ldr	r1, [r4, #20]
    3728:	2300      	movs	r3, #0
    372a:	2202      	movs	r2, #2
    372c:	0028      	movs	r0, r5
    372e:	4c1b      	ldr	r4, [pc, #108]	; (379c <usbdc_cb_ctl_req+0x430>)
    3730:	47a0      	blx	r4
	return true;
    3732:	2301      	movs	r3, #1
    3734:	e634      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3736:	7920      	ldrb	r0, [r4, #4]
    3738:	2102      	movs	r1, #2
    373a:	4b1b      	ldr	r3, [pc, #108]	; (37a8 <usbdc_cb_ctl_req+0x43c>)
    373c:	4798      	blx	r3
		if (st < 0) {
    373e:	2800      	cmp	r0, #0
    3740:	db03      	blt.n	374a <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    3742:	2301      	movs	r3, #1
    3744:	4018      	ands	r0, r3
    3746:	9002      	str	r0, [sp, #8]
    3748:	e7e7      	b.n	371a <usbdc_cb_ctl_req+0x3ae>
			return false;
    374a:	2300      	movs	r3, #0
    374c:	e628      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    374e:	4b11      	ldr	r3, [pc, #68]	; (3794 <usbdc_cb_ctl_req+0x428>)
    3750:	2200      	movs	r2, #0
    3752:	6959      	ldr	r1, [r3, #20]
    3754:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3756:	6959      	ldr	r1, [r3, #20]
    3758:	2300      	movs	r3, #0
    375a:	3201      	adds	r2, #1
    375c:	2000      	movs	r0, #0
    375e:	4c0f      	ldr	r4, [pc, #60]	; (379c <usbdc_cb_ctl_req+0x430>)
    3760:	47a0      	blx	r4
		return true;
    3762:	2301      	movs	r3, #1
    3764:	e61c      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3766:	4b0b      	ldr	r3, [pc, #44]	; (3794 <usbdc_cb_ctl_req+0x428>)
    3768:	695a      	ldr	r2, [r3, #20]
    376a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    376c:	6959      	ldr	r1, [r3, #20]
    376e:	2300      	movs	r3, #0
    3770:	2201      	movs	r2, #1
    3772:	2000      	movs	r0, #0
    3774:	4c09      	ldr	r4, [pc, #36]	; (379c <usbdc_cb_ctl_req+0x430>)
    3776:	47a0      	blx	r4
			return true;
    3778:	2301      	movs	r3, #1
    377a:	e611      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    377c:	2300      	movs	r3, #0
    377e:	e60f      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    3780:	2300      	movs	r3, #0
    3782:	e60d      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    3784:	2300      	movs	r3, #0
    3786:	e60b      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    3788:	2300      	movs	r3, #0
    378a:	e609      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
		return false;
    378c:	2300      	movs	r3, #0
    378e:	e607      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
			return false;
    3790:	2300      	movs	r3, #0
    3792:	e605      	b.n	33a0 <usbdc_cb_ctl_req+0x34>
    3794:	200003a4 	.word	0x200003a4
    3798:	00003939 	.word	0x00003939
    379c:	00003351 	.word	0x00003351
    37a0:	000039a1 	.word	0x000039a1
    37a4:	00003da5 	.word	0x00003da5
    37a8:	000010b9 	.word	0x000010b9

000037ac <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    37ac:	b510      	push	{r4, lr}
	switch (type) {
    37ae:	2801      	cmp	r0, #1
    37b0:	d009      	beq.n	37c6 <usbdc_register_handler+0x1a>
    37b2:	2800      	cmp	r0, #0
    37b4:	d002      	beq.n	37bc <usbdc_register_handler+0x10>
    37b6:	2802      	cmp	r0, #2
    37b8:	d00a      	beq.n	37d0 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    37ba:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    37bc:	4807      	ldr	r0, [pc, #28]	; (37dc <usbdc_register_handler+0x30>)
    37be:	3004      	adds	r0, #4
    37c0:	4b07      	ldr	r3, [pc, #28]	; (37e0 <usbdc_register_handler+0x34>)
    37c2:	4798      	blx	r3
		break;
    37c4:	e7f9      	b.n	37ba <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    37c6:	4805      	ldr	r0, [pc, #20]	; (37dc <usbdc_register_handler+0x30>)
    37c8:	3008      	adds	r0, #8
    37ca:	4b05      	ldr	r3, [pc, #20]	; (37e0 <usbdc_register_handler+0x34>)
    37cc:	4798      	blx	r3
		break;
    37ce:	e7f4      	b.n	37ba <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    37d0:	4802      	ldr	r0, [pc, #8]	; (37dc <usbdc_register_handler+0x30>)
    37d2:	300c      	adds	r0, #12
    37d4:	4b02      	ldr	r3, [pc, #8]	; (37e0 <usbdc_register_handler+0x34>)
    37d6:	4798      	blx	r3
}
    37d8:	e7ef      	b.n	37ba <usbdc_register_handler+0xe>
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	200003a4 	.word	0x200003a4
    37e0:	000011d1 	.word	0x000011d1

000037e4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    37e4:	b570      	push	{r4, r5, r6, lr}
    37e6:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    37e8:	1e43      	subs	r3, r0, #1
    37ea:	4198      	sbcs	r0, r3
    37ec:	b2c0      	uxtb	r0, r0
    37ee:	4a0c      	ldr	r2, [pc, #48]	; (3820 <usbdc_init+0x3c>)
    37f0:	490c      	ldr	r1, [pc, #48]	; (3824 <usbdc_init+0x40>)
    37f2:	4b0d      	ldr	r3, [pc, #52]	; (3828 <usbdc_init+0x44>)
    37f4:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    37f6:	4b0d      	ldr	r3, [pc, #52]	; (382c <usbdc_init+0x48>)
    37f8:	4798      	blx	r3
	if (rc < 0) {
    37fa:	2800      	cmp	r0, #0
    37fc:	db0e      	blt.n	381c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    37fe:	4d0c      	ldr	r5, [pc, #48]	; (3830 <usbdc_init+0x4c>)
    3800:	2220      	movs	r2, #32
    3802:	2100      	movs	r1, #0
    3804:	0028      	movs	r0, r5
    3806:	4b0b      	ldr	r3, [pc, #44]	; (3834 <usbdc_init+0x50>)
    3808:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    380a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    380c:	490a      	ldr	r1, [pc, #40]	; (3838 <usbdc_init+0x54>)
    380e:	2000      	movs	r0, #0
    3810:	4c0a      	ldr	r4, [pc, #40]	; (383c <usbdc_init+0x58>)
    3812:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3814:	490a      	ldr	r1, [pc, #40]	; (3840 <usbdc_init+0x5c>)
    3816:	2001      	movs	r0, #1
    3818:	47a0      	blx	r4

	return 0;
    381a:	2000      	movs	r0, #0
}
    381c:	bd70      	pop	{r4, r5, r6, pc}
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	00000355 	.word	0x00000355
    3824:	0000483c 	.word	0x0000483c
    3828:	00001171 	.word	0x00001171
    382c:	00000e1d 	.word	0x00000e1d
    3830:	200003a4 	.word	0x200003a4
    3834:	00003db7 	.word	0x00003db7
    3838:	00003239 	.word	0x00003239
    383c:	00000e81 	.word	0x00000e81
    3840:	0000332d 	.word	0x0000332d

00003844 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3844:	b510      	push	{r4, lr}
    3846:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3848:	4802      	ldr	r0, [pc, #8]	; (3854 <usbdc_register_function+0x10>)
    384a:	3010      	adds	r0, #16
    384c:	4b02      	ldr	r3, [pc, #8]	; (3858 <usbdc_register_function+0x14>)
    384e:	4798      	blx	r3
}
    3850:	bd10      	pop	{r4, pc}
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	200003a4 	.word	0x200003a4
    3858:	000011d1 	.word	0x000011d1

0000385c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    385c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    385e:	4b0b      	ldr	r3, [pc, #44]	; (388c <usbdc_start+0x30>)
    3860:	7e9b      	ldrb	r3, [r3, #26]
    3862:	2b00      	cmp	r3, #0
    3864:	d10c      	bne.n	3880 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    3866:	2800      	cmp	r0, #0
    3868:	d00d      	beq.n	3886 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    386a:	4b08      	ldr	r3, [pc, #32]	; (388c <usbdc_start+0x30>)
    386c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    386e:	6802      	ldr	r2, [r0, #0]
    3870:	79d2      	ldrb	r2, [r2, #7]
    3872:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3874:	2201      	movs	r2, #1
    3876:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3878:	4b05      	ldr	r3, [pc, #20]	; (3890 <usbdc_start+0x34>)
    387a:	4798      	blx	r3
	return ERR_NONE;
    387c:	2000      	movs	r0, #0
}
    387e:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3880:	2004      	movs	r0, #4
    3882:	4240      	negs	r0, r0
    3884:	e7fb      	b.n	387e <usbdc_start+0x22>
		return ERR_BAD_DATA;
    3886:	2009      	movs	r0, #9
    3888:	4240      	negs	r0, r0
    388a:	e7f8      	b.n	387e <usbdc_start+0x22>
    388c:	200003a4 	.word	0x200003a4
    3890:	00000e8d 	.word	0x00000e8d

00003894 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3894:	b510      	push	{r4, lr}
	usb_d_attach();
    3896:	4b01      	ldr	r3, [pc, #4]	; (389c <usbdc_attach+0x8>)
    3898:	4798      	blx	r3
}
    389a:	bd10      	pop	{r4, pc}
    389c:	00000e99 	.word	0x00000e99

000038a0 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    38a0:	4b01      	ldr	r3, [pc, #4]	; (38a8 <usbdc_get_ctrl_buffer+0x8>)
    38a2:	6958      	ldr	r0, [r3, #20]
}
    38a4:	4770      	bx	lr
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	200003a4 	.word	0x200003a4

000038ac <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    38ac:	4b02      	ldr	r3, [pc, #8]	; (38b8 <usbdc_get_state+0xc>)
    38ae:	7e98      	ldrb	r0, [r3, #26]
    38b0:	06c3      	lsls	r3, r0, #27
    38b2:	d500      	bpl.n	38b6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    38b4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    38b6:	4770      	bx	lr
    38b8:	200003a4 	.word	0x200003a4

000038bc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    38bc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    38be:	4288      	cmp	r0, r1
    38c0:	d211      	bcs.n	38e6 <usb_find_desc+0x2a>
	return desc[0];
    38c2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38c4:	2b01      	cmp	r3, #1
    38c6:	d910      	bls.n	38ea <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    38c8:	7844      	ldrb	r4, [r0, #1]
    38ca:	4294      	cmp	r4, r2
    38cc:	d00a      	beq.n	38e4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    38ce:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    38d0:	4281      	cmp	r1, r0
    38d2:	d906      	bls.n	38e2 <usb_find_desc+0x26>
	return desc[0];
    38d4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38d6:	2b01      	cmp	r3, #1
    38d8:	d909      	bls.n	38ee <usb_find_desc+0x32>
	return desc[1];
    38da:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    38dc:	4294      	cmp	r4, r2
    38de:	d1f6      	bne.n	38ce <usb_find_desc+0x12>
    38e0:	e000      	b.n	38e4 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    38e2:	2000      	movs	r0, #0
}
    38e4:	bd10      	pop	{r4, pc}
	return NULL;
    38e6:	2000      	movs	r0, #0
    38e8:	e7fc      	b.n	38e4 <usb_find_desc+0x28>
		_desc_len_check();
    38ea:	2000      	movs	r0, #0
    38ec:	e7fa      	b.n	38e4 <usb_find_desc+0x28>
    38ee:	2000      	movs	r0, #0
    38f0:	e7f8      	b.n	38e4 <usb_find_desc+0x28>

000038f2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    38f2:	4288      	cmp	r0, r1
    38f4:	d215      	bcs.n	3922 <usb_find_ep_desc+0x30>
	return desc[0];
    38f6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38f8:	2b01      	cmp	r3, #1
    38fa:	d914      	bls.n	3926 <usb_find_ep_desc+0x34>
	return desc[1];
    38fc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    38fe:	2a04      	cmp	r2, #4
    3900:	d013      	beq.n	392a <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3902:	2a05      	cmp	r2, #5
    3904:	d00c      	beq.n	3920 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    3906:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3908:	4281      	cmp	r1, r0
    390a:	d908      	bls.n	391e <usb_find_ep_desc+0x2c>
	return desc[0];
    390c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    390e:	2b01      	cmp	r3, #1
    3910:	d90d      	bls.n	392e <usb_find_ep_desc+0x3c>
	return desc[1];
    3912:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3914:	2a04      	cmp	r2, #4
    3916:	d00c      	beq.n	3932 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3918:	2a05      	cmp	r2, #5
    391a:	d1f4      	bne.n	3906 <usb_find_ep_desc+0x14>
    391c:	e000      	b.n	3920 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    391e:	2000      	movs	r0, #0
}
    3920:	4770      	bx	lr
	return NULL;
    3922:	2000      	movs	r0, #0
    3924:	e7fc      	b.n	3920 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3926:	2000      	movs	r0, #0
    3928:	e7fa      	b.n	3920 <usb_find_ep_desc+0x2e>
	return NULL;
    392a:	2000      	movs	r0, #0
    392c:	e7f8      	b.n	3920 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    392e:	2000      	movs	r0, #0
    3930:	e7f6      	b.n	3920 <usb_find_ep_desc+0x2e>
	return NULL;
    3932:	2000      	movs	r0, #0
    3934:	e7f4      	b.n	3920 <usb_find_ep_desc+0x2e>
	...

00003938 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3938:	b570      	push	{r4, r5, r6, lr}
    393a:	000c      	movs	r4, r1
    393c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    393e:	2202      	movs	r2, #2
    3940:	4b16      	ldr	r3, [pc, #88]	; (399c <usb_find_cfg_desc+0x64>)
    3942:	4798      	blx	r3
	if (!desc) {
    3944:	2800      	cmp	r0, #0
    3946:	d01d      	beq.n	3984 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3948:	4284      	cmp	r4, r0
    394a:	d91c      	bls.n	3986 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    394c:	7803      	ldrb	r3, [r0, #0]
    394e:	2b01      	cmp	r3, #1
    3950:	d91b      	bls.n	398a <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    3952:	7843      	ldrb	r3, [r0, #1]
    3954:	2b02      	cmp	r3, #2
    3956:	d11a      	bne.n	398e <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    3958:	7943      	ldrb	r3, [r0, #5]
    395a:	42ab      	cmp	r3, r5
    395c:	d012      	beq.n	3984 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    395e:	78c2      	ldrb	r2, [r0, #3]
    3960:	0212      	lsls	r2, r2, #8
    3962:	7883      	ldrb	r3, [r0, #2]
    3964:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3966:	b29b      	uxth	r3, r3
    3968:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    396a:	4284      	cmp	r4, r0
    396c:	d909      	bls.n	3982 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    396e:	7803      	ldrb	r3, [r0, #0]
    3970:	2b01      	cmp	r3, #1
    3972:	d90e      	bls.n	3992 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    3974:	7843      	ldrb	r3, [r0, #1]
    3976:	2b02      	cmp	r3, #2
    3978:	d10d      	bne.n	3996 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    397a:	7943      	ldrb	r3, [r0, #5]
    397c:	42ab      	cmp	r3, r5
    397e:	d1ee      	bne.n	395e <usb_find_cfg_desc+0x26>
    3980:	e000      	b.n	3984 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3982:	2000      	movs	r0, #0
}
    3984:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    3986:	2000      	movs	r0, #0
    3988:	e7fc      	b.n	3984 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    398a:	2000      	movs	r0, #0
    398c:	e7fa      	b.n	3984 <usb_find_cfg_desc+0x4c>
	return NULL;
    398e:	2000      	movs	r0, #0
    3990:	e7f8      	b.n	3984 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3992:	2000      	movs	r0, #0
    3994:	e7f6      	b.n	3984 <usb_find_cfg_desc+0x4c>
	return NULL;
    3996:	2000      	movs	r0, #0
    3998:	e7f4      	b.n	3984 <usb_find_cfg_desc+0x4c>
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	000038bd 	.word	0x000038bd

000039a0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    39a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a2:	000d      	movs	r5, r1
    39a4:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    39a6:	4288      	cmp	r0, r1
    39a8:	d212      	bcs.n	39d0 <usb_find_str_desc+0x30>
    39aa:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    39ac:	4e0a      	ldr	r6, [pc, #40]	; (39d8 <usb_find_str_desc+0x38>)
    39ae:	2203      	movs	r2, #3
    39b0:	0029      	movs	r1, r5
    39b2:	47b0      	blx	r6
		if (desc) {
    39b4:	2800      	cmp	r0, #0
    39b6:	d00e      	beq.n	39d6 <usb_find_str_desc+0x36>
	return desc[0];
    39b8:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    39ba:	2b01      	cmp	r3, #1
    39bc:	d90a      	bls.n	39d4 <usb_find_str_desc+0x34>
			if (i == str_index) {
    39be:	42a7      	cmp	r7, r4
    39c0:	d009      	beq.n	39d6 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    39c2:	3401      	adds	r4, #1
    39c4:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    39c6:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    39c8:	4285      	cmp	r5, r0
    39ca:	d8f0      	bhi.n	39ae <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    39cc:	2000      	movs	r0, #0
    39ce:	e002      	b.n	39d6 <usb_find_str_desc+0x36>
    39d0:	2000      	movs	r0, #0
    39d2:	e000      	b.n	39d6 <usb_find_str_desc+0x36>
			_desc_len_check();
    39d4:	2000      	movs	r0, #0
}
    39d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39d8:	000038bd 	.word	0x000038bd

000039dc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    39dc:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    39de:	4806      	ldr	r0, [pc, #24]	; (39f8 <cdc_device_acm_init+0x1c>)
    39e0:	3040      	adds	r0, #64	; 0x40
    39e2:	4b06      	ldr	r3, [pc, #24]	; (39fc <cdc_device_acm_init+0x20>)
    39e4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    39e6:	4b06      	ldr	r3, [pc, #24]	; (3a00 <cdc_device_acm_init+0x24>)
    39e8:	4798      	blx	r3

	usbdc_start(single_desc);
    39ea:	4806      	ldr	r0, [pc, #24]	; (3a04 <cdc_device_acm_init+0x28>)
    39ec:	4b06      	ldr	r3, [pc, #24]	; (3a08 <cdc_device_acm_init+0x2c>)
    39ee:	4798      	blx	r3
	usbdc_attach();
    39f0:	4b06      	ldr	r3, [pc, #24]	; (3a0c <cdc_device_acm_init+0x30>)
    39f2:	4798      	blx	r3
}
    39f4:	bd10      	pop	{r4, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	200003c4 	.word	0x200003c4
    39fc:	000037e5 	.word	0x000037e5
    3a00:	0000313d 	.word	0x0000313d
    3a04:	2000001c 	.word	0x2000001c
    3a08:	0000385d 	.word	0x0000385d
    3a0c:	00003895 	.word	0x00003895

00003a10 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3a10:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    3a12:	4b01      	ldr	r3, [pc, #4]	; (3a18 <usb_init+0x8>)
    3a14:	4798      	blx	r3
}
    3a16:	bd10      	pop	{r4, pc}
    3a18:	000039dd 	.word	0x000039dd

00003a1c <__udivsi3>:
    3a1c:	2200      	movs	r2, #0
    3a1e:	0843      	lsrs	r3, r0, #1
    3a20:	428b      	cmp	r3, r1
    3a22:	d374      	bcc.n	3b0e <__udivsi3+0xf2>
    3a24:	0903      	lsrs	r3, r0, #4
    3a26:	428b      	cmp	r3, r1
    3a28:	d35f      	bcc.n	3aea <__udivsi3+0xce>
    3a2a:	0a03      	lsrs	r3, r0, #8
    3a2c:	428b      	cmp	r3, r1
    3a2e:	d344      	bcc.n	3aba <__udivsi3+0x9e>
    3a30:	0b03      	lsrs	r3, r0, #12
    3a32:	428b      	cmp	r3, r1
    3a34:	d328      	bcc.n	3a88 <__udivsi3+0x6c>
    3a36:	0c03      	lsrs	r3, r0, #16
    3a38:	428b      	cmp	r3, r1
    3a3a:	d30d      	bcc.n	3a58 <__udivsi3+0x3c>
    3a3c:	22ff      	movs	r2, #255	; 0xff
    3a3e:	0209      	lsls	r1, r1, #8
    3a40:	ba12      	rev	r2, r2
    3a42:	0c03      	lsrs	r3, r0, #16
    3a44:	428b      	cmp	r3, r1
    3a46:	d302      	bcc.n	3a4e <__udivsi3+0x32>
    3a48:	1212      	asrs	r2, r2, #8
    3a4a:	0209      	lsls	r1, r1, #8
    3a4c:	d065      	beq.n	3b1a <__udivsi3+0xfe>
    3a4e:	0b03      	lsrs	r3, r0, #12
    3a50:	428b      	cmp	r3, r1
    3a52:	d319      	bcc.n	3a88 <__udivsi3+0x6c>
    3a54:	e000      	b.n	3a58 <__udivsi3+0x3c>
    3a56:	0a09      	lsrs	r1, r1, #8
    3a58:	0bc3      	lsrs	r3, r0, #15
    3a5a:	428b      	cmp	r3, r1
    3a5c:	d301      	bcc.n	3a62 <__udivsi3+0x46>
    3a5e:	03cb      	lsls	r3, r1, #15
    3a60:	1ac0      	subs	r0, r0, r3
    3a62:	4152      	adcs	r2, r2
    3a64:	0b83      	lsrs	r3, r0, #14
    3a66:	428b      	cmp	r3, r1
    3a68:	d301      	bcc.n	3a6e <__udivsi3+0x52>
    3a6a:	038b      	lsls	r3, r1, #14
    3a6c:	1ac0      	subs	r0, r0, r3
    3a6e:	4152      	adcs	r2, r2
    3a70:	0b43      	lsrs	r3, r0, #13
    3a72:	428b      	cmp	r3, r1
    3a74:	d301      	bcc.n	3a7a <__udivsi3+0x5e>
    3a76:	034b      	lsls	r3, r1, #13
    3a78:	1ac0      	subs	r0, r0, r3
    3a7a:	4152      	adcs	r2, r2
    3a7c:	0b03      	lsrs	r3, r0, #12
    3a7e:	428b      	cmp	r3, r1
    3a80:	d301      	bcc.n	3a86 <__udivsi3+0x6a>
    3a82:	030b      	lsls	r3, r1, #12
    3a84:	1ac0      	subs	r0, r0, r3
    3a86:	4152      	adcs	r2, r2
    3a88:	0ac3      	lsrs	r3, r0, #11
    3a8a:	428b      	cmp	r3, r1
    3a8c:	d301      	bcc.n	3a92 <__udivsi3+0x76>
    3a8e:	02cb      	lsls	r3, r1, #11
    3a90:	1ac0      	subs	r0, r0, r3
    3a92:	4152      	adcs	r2, r2
    3a94:	0a83      	lsrs	r3, r0, #10
    3a96:	428b      	cmp	r3, r1
    3a98:	d301      	bcc.n	3a9e <__udivsi3+0x82>
    3a9a:	028b      	lsls	r3, r1, #10
    3a9c:	1ac0      	subs	r0, r0, r3
    3a9e:	4152      	adcs	r2, r2
    3aa0:	0a43      	lsrs	r3, r0, #9
    3aa2:	428b      	cmp	r3, r1
    3aa4:	d301      	bcc.n	3aaa <__udivsi3+0x8e>
    3aa6:	024b      	lsls	r3, r1, #9
    3aa8:	1ac0      	subs	r0, r0, r3
    3aaa:	4152      	adcs	r2, r2
    3aac:	0a03      	lsrs	r3, r0, #8
    3aae:	428b      	cmp	r3, r1
    3ab0:	d301      	bcc.n	3ab6 <__udivsi3+0x9a>
    3ab2:	020b      	lsls	r3, r1, #8
    3ab4:	1ac0      	subs	r0, r0, r3
    3ab6:	4152      	adcs	r2, r2
    3ab8:	d2cd      	bcs.n	3a56 <__udivsi3+0x3a>
    3aba:	09c3      	lsrs	r3, r0, #7
    3abc:	428b      	cmp	r3, r1
    3abe:	d301      	bcc.n	3ac4 <__udivsi3+0xa8>
    3ac0:	01cb      	lsls	r3, r1, #7
    3ac2:	1ac0      	subs	r0, r0, r3
    3ac4:	4152      	adcs	r2, r2
    3ac6:	0983      	lsrs	r3, r0, #6
    3ac8:	428b      	cmp	r3, r1
    3aca:	d301      	bcc.n	3ad0 <__udivsi3+0xb4>
    3acc:	018b      	lsls	r3, r1, #6
    3ace:	1ac0      	subs	r0, r0, r3
    3ad0:	4152      	adcs	r2, r2
    3ad2:	0943      	lsrs	r3, r0, #5
    3ad4:	428b      	cmp	r3, r1
    3ad6:	d301      	bcc.n	3adc <__udivsi3+0xc0>
    3ad8:	014b      	lsls	r3, r1, #5
    3ada:	1ac0      	subs	r0, r0, r3
    3adc:	4152      	adcs	r2, r2
    3ade:	0903      	lsrs	r3, r0, #4
    3ae0:	428b      	cmp	r3, r1
    3ae2:	d301      	bcc.n	3ae8 <__udivsi3+0xcc>
    3ae4:	010b      	lsls	r3, r1, #4
    3ae6:	1ac0      	subs	r0, r0, r3
    3ae8:	4152      	adcs	r2, r2
    3aea:	08c3      	lsrs	r3, r0, #3
    3aec:	428b      	cmp	r3, r1
    3aee:	d301      	bcc.n	3af4 <__udivsi3+0xd8>
    3af0:	00cb      	lsls	r3, r1, #3
    3af2:	1ac0      	subs	r0, r0, r3
    3af4:	4152      	adcs	r2, r2
    3af6:	0883      	lsrs	r3, r0, #2
    3af8:	428b      	cmp	r3, r1
    3afa:	d301      	bcc.n	3b00 <__udivsi3+0xe4>
    3afc:	008b      	lsls	r3, r1, #2
    3afe:	1ac0      	subs	r0, r0, r3
    3b00:	4152      	adcs	r2, r2
    3b02:	0843      	lsrs	r3, r0, #1
    3b04:	428b      	cmp	r3, r1
    3b06:	d301      	bcc.n	3b0c <__udivsi3+0xf0>
    3b08:	004b      	lsls	r3, r1, #1
    3b0a:	1ac0      	subs	r0, r0, r3
    3b0c:	4152      	adcs	r2, r2
    3b0e:	1a41      	subs	r1, r0, r1
    3b10:	d200      	bcs.n	3b14 <__udivsi3+0xf8>
    3b12:	4601      	mov	r1, r0
    3b14:	4152      	adcs	r2, r2
    3b16:	4610      	mov	r0, r2
    3b18:	4770      	bx	lr
    3b1a:	e7ff      	b.n	3b1c <__udivsi3+0x100>
    3b1c:	b501      	push	{r0, lr}
    3b1e:	2000      	movs	r0, #0
    3b20:	f000 f8f0 	bl	3d04 <__aeabi_idiv0>
    3b24:	bd02      	pop	{r1, pc}
    3b26:	46c0      	nop			; (mov r8, r8)

00003b28 <__aeabi_uidivmod>:
    3b28:	2900      	cmp	r1, #0
    3b2a:	d0f7      	beq.n	3b1c <__udivsi3+0x100>
    3b2c:	e776      	b.n	3a1c <__udivsi3>
    3b2e:	4770      	bx	lr

00003b30 <__divsi3>:
    3b30:	4603      	mov	r3, r0
    3b32:	430b      	orrs	r3, r1
    3b34:	d47f      	bmi.n	3c36 <__divsi3+0x106>
    3b36:	2200      	movs	r2, #0
    3b38:	0843      	lsrs	r3, r0, #1
    3b3a:	428b      	cmp	r3, r1
    3b3c:	d374      	bcc.n	3c28 <__divsi3+0xf8>
    3b3e:	0903      	lsrs	r3, r0, #4
    3b40:	428b      	cmp	r3, r1
    3b42:	d35f      	bcc.n	3c04 <__divsi3+0xd4>
    3b44:	0a03      	lsrs	r3, r0, #8
    3b46:	428b      	cmp	r3, r1
    3b48:	d344      	bcc.n	3bd4 <__divsi3+0xa4>
    3b4a:	0b03      	lsrs	r3, r0, #12
    3b4c:	428b      	cmp	r3, r1
    3b4e:	d328      	bcc.n	3ba2 <__divsi3+0x72>
    3b50:	0c03      	lsrs	r3, r0, #16
    3b52:	428b      	cmp	r3, r1
    3b54:	d30d      	bcc.n	3b72 <__divsi3+0x42>
    3b56:	22ff      	movs	r2, #255	; 0xff
    3b58:	0209      	lsls	r1, r1, #8
    3b5a:	ba12      	rev	r2, r2
    3b5c:	0c03      	lsrs	r3, r0, #16
    3b5e:	428b      	cmp	r3, r1
    3b60:	d302      	bcc.n	3b68 <__divsi3+0x38>
    3b62:	1212      	asrs	r2, r2, #8
    3b64:	0209      	lsls	r1, r1, #8
    3b66:	d065      	beq.n	3c34 <__divsi3+0x104>
    3b68:	0b03      	lsrs	r3, r0, #12
    3b6a:	428b      	cmp	r3, r1
    3b6c:	d319      	bcc.n	3ba2 <__divsi3+0x72>
    3b6e:	e000      	b.n	3b72 <__divsi3+0x42>
    3b70:	0a09      	lsrs	r1, r1, #8
    3b72:	0bc3      	lsrs	r3, r0, #15
    3b74:	428b      	cmp	r3, r1
    3b76:	d301      	bcc.n	3b7c <__divsi3+0x4c>
    3b78:	03cb      	lsls	r3, r1, #15
    3b7a:	1ac0      	subs	r0, r0, r3
    3b7c:	4152      	adcs	r2, r2
    3b7e:	0b83      	lsrs	r3, r0, #14
    3b80:	428b      	cmp	r3, r1
    3b82:	d301      	bcc.n	3b88 <__divsi3+0x58>
    3b84:	038b      	lsls	r3, r1, #14
    3b86:	1ac0      	subs	r0, r0, r3
    3b88:	4152      	adcs	r2, r2
    3b8a:	0b43      	lsrs	r3, r0, #13
    3b8c:	428b      	cmp	r3, r1
    3b8e:	d301      	bcc.n	3b94 <__divsi3+0x64>
    3b90:	034b      	lsls	r3, r1, #13
    3b92:	1ac0      	subs	r0, r0, r3
    3b94:	4152      	adcs	r2, r2
    3b96:	0b03      	lsrs	r3, r0, #12
    3b98:	428b      	cmp	r3, r1
    3b9a:	d301      	bcc.n	3ba0 <__divsi3+0x70>
    3b9c:	030b      	lsls	r3, r1, #12
    3b9e:	1ac0      	subs	r0, r0, r3
    3ba0:	4152      	adcs	r2, r2
    3ba2:	0ac3      	lsrs	r3, r0, #11
    3ba4:	428b      	cmp	r3, r1
    3ba6:	d301      	bcc.n	3bac <__divsi3+0x7c>
    3ba8:	02cb      	lsls	r3, r1, #11
    3baa:	1ac0      	subs	r0, r0, r3
    3bac:	4152      	adcs	r2, r2
    3bae:	0a83      	lsrs	r3, r0, #10
    3bb0:	428b      	cmp	r3, r1
    3bb2:	d301      	bcc.n	3bb8 <__divsi3+0x88>
    3bb4:	028b      	lsls	r3, r1, #10
    3bb6:	1ac0      	subs	r0, r0, r3
    3bb8:	4152      	adcs	r2, r2
    3bba:	0a43      	lsrs	r3, r0, #9
    3bbc:	428b      	cmp	r3, r1
    3bbe:	d301      	bcc.n	3bc4 <__divsi3+0x94>
    3bc0:	024b      	lsls	r3, r1, #9
    3bc2:	1ac0      	subs	r0, r0, r3
    3bc4:	4152      	adcs	r2, r2
    3bc6:	0a03      	lsrs	r3, r0, #8
    3bc8:	428b      	cmp	r3, r1
    3bca:	d301      	bcc.n	3bd0 <__divsi3+0xa0>
    3bcc:	020b      	lsls	r3, r1, #8
    3bce:	1ac0      	subs	r0, r0, r3
    3bd0:	4152      	adcs	r2, r2
    3bd2:	d2cd      	bcs.n	3b70 <__divsi3+0x40>
    3bd4:	09c3      	lsrs	r3, r0, #7
    3bd6:	428b      	cmp	r3, r1
    3bd8:	d301      	bcc.n	3bde <__divsi3+0xae>
    3bda:	01cb      	lsls	r3, r1, #7
    3bdc:	1ac0      	subs	r0, r0, r3
    3bde:	4152      	adcs	r2, r2
    3be0:	0983      	lsrs	r3, r0, #6
    3be2:	428b      	cmp	r3, r1
    3be4:	d301      	bcc.n	3bea <__divsi3+0xba>
    3be6:	018b      	lsls	r3, r1, #6
    3be8:	1ac0      	subs	r0, r0, r3
    3bea:	4152      	adcs	r2, r2
    3bec:	0943      	lsrs	r3, r0, #5
    3bee:	428b      	cmp	r3, r1
    3bf0:	d301      	bcc.n	3bf6 <__divsi3+0xc6>
    3bf2:	014b      	lsls	r3, r1, #5
    3bf4:	1ac0      	subs	r0, r0, r3
    3bf6:	4152      	adcs	r2, r2
    3bf8:	0903      	lsrs	r3, r0, #4
    3bfa:	428b      	cmp	r3, r1
    3bfc:	d301      	bcc.n	3c02 <__divsi3+0xd2>
    3bfe:	010b      	lsls	r3, r1, #4
    3c00:	1ac0      	subs	r0, r0, r3
    3c02:	4152      	adcs	r2, r2
    3c04:	08c3      	lsrs	r3, r0, #3
    3c06:	428b      	cmp	r3, r1
    3c08:	d301      	bcc.n	3c0e <__divsi3+0xde>
    3c0a:	00cb      	lsls	r3, r1, #3
    3c0c:	1ac0      	subs	r0, r0, r3
    3c0e:	4152      	adcs	r2, r2
    3c10:	0883      	lsrs	r3, r0, #2
    3c12:	428b      	cmp	r3, r1
    3c14:	d301      	bcc.n	3c1a <__divsi3+0xea>
    3c16:	008b      	lsls	r3, r1, #2
    3c18:	1ac0      	subs	r0, r0, r3
    3c1a:	4152      	adcs	r2, r2
    3c1c:	0843      	lsrs	r3, r0, #1
    3c1e:	428b      	cmp	r3, r1
    3c20:	d301      	bcc.n	3c26 <__divsi3+0xf6>
    3c22:	004b      	lsls	r3, r1, #1
    3c24:	1ac0      	subs	r0, r0, r3
    3c26:	4152      	adcs	r2, r2
    3c28:	1a41      	subs	r1, r0, r1
    3c2a:	d200      	bcs.n	3c2e <__divsi3+0xfe>
    3c2c:	4601      	mov	r1, r0
    3c2e:	4152      	adcs	r2, r2
    3c30:	4610      	mov	r0, r2
    3c32:	4770      	bx	lr
    3c34:	e05d      	b.n	3cf2 <__divsi3+0x1c2>
    3c36:	0fca      	lsrs	r2, r1, #31
    3c38:	d000      	beq.n	3c3c <__divsi3+0x10c>
    3c3a:	4249      	negs	r1, r1
    3c3c:	1003      	asrs	r3, r0, #32
    3c3e:	d300      	bcc.n	3c42 <__divsi3+0x112>
    3c40:	4240      	negs	r0, r0
    3c42:	4053      	eors	r3, r2
    3c44:	2200      	movs	r2, #0
    3c46:	469c      	mov	ip, r3
    3c48:	0903      	lsrs	r3, r0, #4
    3c4a:	428b      	cmp	r3, r1
    3c4c:	d32d      	bcc.n	3caa <__divsi3+0x17a>
    3c4e:	0a03      	lsrs	r3, r0, #8
    3c50:	428b      	cmp	r3, r1
    3c52:	d312      	bcc.n	3c7a <__divsi3+0x14a>
    3c54:	22fc      	movs	r2, #252	; 0xfc
    3c56:	0189      	lsls	r1, r1, #6
    3c58:	ba12      	rev	r2, r2
    3c5a:	0a03      	lsrs	r3, r0, #8
    3c5c:	428b      	cmp	r3, r1
    3c5e:	d30c      	bcc.n	3c7a <__divsi3+0x14a>
    3c60:	0189      	lsls	r1, r1, #6
    3c62:	1192      	asrs	r2, r2, #6
    3c64:	428b      	cmp	r3, r1
    3c66:	d308      	bcc.n	3c7a <__divsi3+0x14a>
    3c68:	0189      	lsls	r1, r1, #6
    3c6a:	1192      	asrs	r2, r2, #6
    3c6c:	428b      	cmp	r3, r1
    3c6e:	d304      	bcc.n	3c7a <__divsi3+0x14a>
    3c70:	0189      	lsls	r1, r1, #6
    3c72:	d03a      	beq.n	3cea <__divsi3+0x1ba>
    3c74:	1192      	asrs	r2, r2, #6
    3c76:	e000      	b.n	3c7a <__divsi3+0x14a>
    3c78:	0989      	lsrs	r1, r1, #6
    3c7a:	09c3      	lsrs	r3, r0, #7
    3c7c:	428b      	cmp	r3, r1
    3c7e:	d301      	bcc.n	3c84 <__divsi3+0x154>
    3c80:	01cb      	lsls	r3, r1, #7
    3c82:	1ac0      	subs	r0, r0, r3
    3c84:	4152      	adcs	r2, r2
    3c86:	0983      	lsrs	r3, r0, #6
    3c88:	428b      	cmp	r3, r1
    3c8a:	d301      	bcc.n	3c90 <__divsi3+0x160>
    3c8c:	018b      	lsls	r3, r1, #6
    3c8e:	1ac0      	subs	r0, r0, r3
    3c90:	4152      	adcs	r2, r2
    3c92:	0943      	lsrs	r3, r0, #5
    3c94:	428b      	cmp	r3, r1
    3c96:	d301      	bcc.n	3c9c <__divsi3+0x16c>
    3c98:	014b      	lsls	r3, r1, #5
    3c9a:	1ac0      	subs	r0, r0, r3
    3c9c:	4152      	adcs	r2, r2
    3c9e:	0903      	lsrs	r3, r0, #4
    3ca0:	428b      	cmp	r3, r1
    3ca2:	d301      	bcc.n	3ca8 <__divsi3+0x178>
    3ca4:	010b      	lsls	r3, r1, #4
    3ca6:	1ac0      	subs	r0, r0, r3
    3ca8:	4152      	adcs	r2, r2
    3caa:	08c3      	lsrs	r3, r0, #3
    3cac:	428b      	cmp	r3, r1
    3cae:	d301      	bcc.n	3cb4 <__divsi3+0x184>
    3cb0:	00cb      	lsls	r3, r1, #3
    3cb2:	1ac0      	subs	r0, r0, r3
    3cb4:	4152      	adcs	r2, r2
    3cb6:	0883      	lsrs	r3, r0, #2
    3cb8:	428b      	cmp	r3, r1
    3cba:	d301      	bcc.n	3cc0 <__divsi3+0x190>
    3cbc:	008b      	lsls	r3, r1, #2
    3cbe:	1ac0      	subs	r0, r0, r3
    3cc0:	4152      	adcs	r2, r2
    3cc2:	d2d9      	bcs.n	3c78 <__divsi3+0x148>
    3cc4:	0843      	lsrs	r3, r0, #1
    3cc6:	428b      	cmp	r3, r1
    3cc8:	d301      	bcc.n	3cce <__divsi3+0x19e>
    3cca:	004b      	lsls	r3, r1, #1
    3ccc:	1ac0      	subs	r0, r0, r3
    3cce:	4152      	adcs	r2, r2
    3cd0:	1a41      	subs	r1, r0, r1
    3cd2:	d200      	bcs.n	3cd6 <__divsi3+0x1a6>
    3cd4:	4601      	mov	r1, r0
    3cd6:	4663      	mov	r3, ip
    3cd8:	4152      	adcs	r2, r2
    3cda:	105b      	asrs	r3, r3, #1
    3cdc:	4610      	mov	r0, r2
    3cde:	d301      	bcc.n	3ce4 <__divsi3+0x1b4>
    3ce0:	4240      	negs	r0, r0
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d500      	bpl.n	3ce8 <__divsi3+0x1b8>
    3ce6:	4249      	negs	r1, r1
    3ce8:	4770      	bx	lr
    3cea:	4663      	mov	r3, ip
    3cec:	105b      	asrs	r3, r3, #1
    3cee:	d300      	bcc.n	3cf2 <__divsi3+0x1c2>
    3cf0:	4240      	negs	r0, r0
    3cf2:	b501      	push	{r0, lr}
    3cf4:	2000      	movs	r0, #0
    3cf6:	f000 f805 	bl	3d04 <__aeabi_idiv0>
    3cfa:	bd02      	pop	{r1, pc}

00003cfc <__aeabi_idivmod>:
    3cfc:	2900      	cmp	r1, #0
    3cfe:	d0f8      	beq.n	3cf2 <__divsi3+0x1c2>
    3d00:	e716      	b.n	3b30 <__divsi3>
    3d02:	4770      	bx	lr

00003d04 <__aeabi_idiv0>:
    3d04:	4770      	bx	lr
    3d06:	46c0      	nop			; (mov r8, r8)

00003d08 <__ffssi2>:
    3d08:	b510      	push	{r4, lr}
    3d0a:	2300      	movs	r3, #0
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d002      	beq.n	3d16 <__ffssi2+0xe>
    3d10:	f000 f804 	bl	3d1c <__ctzsi2>
    3d14:	1c43      	adds	r3, r0, #1
    3d16:	0018      	movs	r0, r3
    3d18:	bd10      	pop	{r4, pc}
    3d1a:	46c0      	nop			; (mov r8, r8)

00003d1c <__ctzsi2>:
    3d1c:	4241      	negs	r1, r0
    3d1e:	4008      	ands	r0, r1
    3d20:	211c      	movs	r1, #28
    3d22:	2301      	movs	r3, #1
    3d24:	041b      	lsls	r3, r3, #16
    3d26:	4298      	cmp	r0, r3
    3d28:	d301      	bcc.n	3d2e <__ctzsi2+0x12>
    3d2a:	0c00      	lsrs	r0, r0, #16
    3d2c:	3910      	subs	r1, #16
    3d2e:	0a1b      	lsrs	r3, r3, #8
    3d30:	4298      	cmp	r0, r3
    3d32:	d301      	bcc.n	3d38 <__ctzsi2+0x1c>
    3d34:	0a00      	lsrs	r0, r0, #8
    3d36:	3908      	subs	r1, #8
    3d38:	091b      	lsrs	r3, r3, #4
    3d3a:	4298      	cmp	r0, r3
    3d3c:	d301      	bcc.n	3d42 <__ctzsi2+0x26>
    3d3e:	0900      	lsrs	r0, r0, #4
    3d40:	3904      	subs	r1, #4
    3d42:	a202      	add	r2, pc, #8	; (adr r2, 3d4c <__ctzsi2+0x30>)
    3d44:	5c10      	ldrb	r0, [r2, r0]
    3d46:	1a40      	subs	r0, r0, r1
    3d48:	4770      	bx	lr
    3d4a:	46c0      	nop			; (mov r8, r8)
    3d4c:	1d1d1c1b 	.word	0x1d1d1c1b
    3d50:	1e1e1e1e 	.word	0x1e1e1e1e
    3d54:	1f1f1f1f 	.word	0x1f1f1f1f
    3d58:	1f1f1f1f 	.word	0x1f1f1f1f

00003d5c <__libc_init_array>:
    3d5c:	b570      	push	{r4, r5, r6, lr}
    3d5e:	2600      	movs	r6, #0
    3d60:	4d0c      	ldr	r5, [pc, #48]	; (3d94 <__libc_init_array+0x38>)
    3d62:	4c0d      	ldr	r4, [pc, #52]	; (3d98 <__libc_init_array+0x3c>)
    3d64:	1b64      	subs	r4, r4, r5
    3d66:	10a4      	asrs	r4, r4, #2
    3d68:	42a6      	cmp	r6, r4
    3d6a:	d109      	bne.n	3d80 <__libc_init_array+0x24>
    3d6c:	2600      	movs	r6, #0
    3d6e:	f000 fdbb 	bl	48e8 <_init>
    3d72:	4d0a      	ldr	r5, [pc, #40]	; (3d9c <__libc_init_array+0x40>)
    3d74:	4c0a      	ldr	r4, [pc, #40]	; (3da0 <__libc_init_array+0x44>)
    3d76:	1b64      	subs	r4, r4, r5
    3d78:	10a4      	asrs	r4, r4, #2
    3d7a:	42a6      	cmp	r6, r4
    3d7c:	d105      	bne.n	3d8a <__libc_init_array+0x2e>
    3d7e:	bd70      	pop	{r4, r5, r6, pc}
    3d80:	00b3      	lsls	r3, r6, #2
    3d82:	58eb      	ldr	r3, [r5, r3]
    3d84:	4798      	blx	r3
    3d86:	3601      	adds	r6, #1
    3d88:	e7ee      	b.n	3d68 <__libc_init_array+0xc>
    3d8a:	00b3      	lsls	r3, r6, #2
    3d8c:	58eb      	ldr	r3, [r5, r3]
    3d8e:	4798      	blx	r3
    3d90:	3601      	adds	r6, #1
    3d92:	e7f2      	b.n	3d7a <__libc_init_array+0x1e>
    3d94:	000048f4 	.word	0x000048f4
    3d98:	000048f4 	.word	0x000048f4
    3d9c:	000048f4 	.word	0x000048f4
    3da0:	000048f8 	.word	0x000048f8

00003da4 <memcpy>:
    3da4:	2300      	movs	r3, #0
    3da6:	b510      	push	{r4, lr}
    3da8:	429a      	cmp	r2, r3
    3daa:	d100      	bne.n	3dae <memcpy+0xa>
    3dac:	bd10      	pop	{r4, pc}
    3dae:	5ccc      	ldrb	r4, [r1, r3]
    3db0:	54c4      	strb	r4, [r0, r3]
    3db2:	3301      	adds	r3, #1
    3db4:	e7f8      	b.n	3da8 <memcpy+0x4>

00003db6 <memset>:
    3db6:	0003      	movs	r3, r0
    3db8:	1882      	adds	r2, r0, r2
    3dba:	4293      	cmp	r3, r2
    3dbc:	d100      	bne.n	3dc0 <memset+0xa>
    3dbe:	4770      	bx	lr
    3dc0:	7019      	strb	r1, [r3, #0]
    3dc2:	3301      	adds	r3, #1
    3dc4:	e7f9      	b.n	3dba <memset+0x4>
	...

00003dc8 <siprintf>:
    3dc8:	b40e      	push	{r1, r2, r3}
    3dca:	b510      	push	{r4, lr}
    3dcc:	b09d      	sub	sp, #116	; 0x74
    3dce:	a902      	add	r1, sp, #8
    3dd0:	9002      	str	r0, [sp, #8]
    3dd2:	6108      	str	r0, [r1, #16]
    3dd4:	480b      	ldr	r0, [pc, #44]	; (3e04 <siprintf+0x3c>)
    3dd6:	2482      	movs	r4, #130	; 0x82
    3dd8:	6088      	str	r0, [r1, #8]
    3dda:	6148      	str	r0, [r1, #20]
    3ddc:	2001      	movs	r0, #1
    3dde:	4240      	negs	r0, r0
    3de0:	ab1f      	add	r3, sp, #124	; 0x7c
    3de2:	81c8      	strh	r0, [r1, #14]
    3de4:	4808      	ldr	r0, [pc, #32]	; (3e08 <siprintf+0x40>)
    3de6:	cb04      	ldmia	r3!, {r2}
    3de8:	00a4      	lsls	r4, r4, #2
    3dea:	6800      	ldr	r0, [r0, #0]
    3dec:	9301      	str	r3, [sp, #4]
    3dee:	818c      	strh	r4, [r1, #12]
    3df0:	f000 f8cc 	bl	3f8c <_svfiprintf_r>
    3df4:	2300      	movs	r3, #0
    3df6:	9a02      	ldr	r2, [sp, #8]
    3df8:	7013      	strb	r3, [r2, #0]
    3dfa:	b01d      	add	sp, #116	; 0x74
    3dfc:	bc10      	pop	{r4}
    3dfe:	bc08      	pop	{r3}
    3e00:	b003      	add	sp, #12
    3e02:	4718      	bx	r3
    3e04:	7fffffff 	.word	0x7fffffff
    3e08:	2000007c 	.word	0x2000007c

00003e0c <_malloc_r>:
    3e0c:	2303      	movs	r3, #3
    3e0e:	b570      	push	{r4, r5, r6, lr}
    3e10:	1ccd      	adds	r5, r1, #3
    3e12:	439d      	bics	r5, r3
    3e14:	3508      	adds	r5, #8
    3e16:	0006      	movs	r6, r0
    3e18:	2d0c      	cmp	r5, #12
    3e1a:	d21e      	bcs.n	3e5a <_malloc_r+0x4e>
    3e1c:	250c      	movs	r5, #12
    3e1e:	42a9      	cmp	r1, r5
    3e20:	d81d      	bhi.n	3e5e <_malloc_r+0x52>
    3e22:	0030      	movs	r0, r6
    3e24:	f000 fb6d 	bl	4502 <__malloc_lock>
    3e28:	4a25      	ldr	r2, [pc, #148]	; (3ec0 <_malloc_r+0xb4>)
    3e2a:	6814      	ldr	r4, [r2, #0]
    3e2c:	0021      	movs	r1, r4
    3e2e:	2900      	cmp	r1, #0
    3e30:	d119      	bne.n	3e66 <_malloc_r+0x5a>
    3e32:	4c24      	ldr	r4, [pc, #144]	; (3ec4 <_malloc_r+0xb8>)
    3e34:	6823      	ldr	r3, [r4, #0]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d103      	bne.n	3e42 <_malloc_r+0x36>
    3e3a:	0030      	movs	r0, r6
    3e3c:	f000 fb32 	bl	44a4 <_sbrk_r>
    3e40:	6020      	str	r0, [r4, #0]
    3e42:	0029      	movs	r1, r5
    3e44:	0030      	movs	r0, r6
    3e46:	f000 fb2d 	bl	44a4 <_sbrk_r>
    3e4a:	1c43      	adds	r3, r0, #1
    3e4c:	d12c      	bne.n	3ea8 <_malloc_r+0x9c>
    3e4e:	230c      	movs	r3, #12
    3e50:	0030      	movs	r0, r6
    3e52:	6033      	str	r3, [r6, #0]
    3e54:	f000 fb56 	bl	4504 <__malloc_unlock>
    3e58:	e003      	b.n	3e62 <_malloc_r+0x56>
    3e5a:	2d00      	cmp	r5, #0
    3e5c:	dadf      	bge.n	3e1e <_malloc_r+0x12>
    3e5e:	230c      	movs	r3, #12
    3e60:	6033      	str	r3, [r6, #0]
    3e62:	2000      	movs	r0, #0
    3e64:	bd70      	pop	{r4, r5, r6, pc}
    3e66:	680b      	ldr	r3, [r1, #0]
    3e68:	1b5b      	subs	r3, r3, r5
    3e6a:	d41a      	bmi.n	3ea2 <_malloc_r+0x96>
    3e6c:	2b0b      	cmp	r3, #11
    3e6e:	d903      	bls.n	3e78 <_malloc_r+0x6c>
    3e70:	600b      	str	r3, [r1, #0]
    3e72:	18cc      	adds	r4, r1, r3
    3e74:	6025      	str	r5, [r4, #0]
    3e76:	e003      	b.n	3e80 <_malloc_r+0x74>
    3e78:	428c      	cmp	r4, r1
    3e7a:	d10e      	bne.n	3e9a <_malloc_r+0x8e>
    3e7c:	6863      	ldr	r3, [r4, #4]
    3e7e:	6013      	str	r3, [r2, #0]
    3e80:	0030      	movs	r0, r6
    3e82:	f000 fb3f 	bl	4504 <__malloc_unlock>
    3e86:	0020      	movs	r0, r4
    3e88:	2207      	movs	r2, #7
    3e8a:	300b      	adds	r0, #11
    3e8c:	1d23      	adds	r3, r4, #4
    3e8e:	4390      	bics	r0, r2
    3e90:	1ac3      	subs	r3, r0, r3
    3e92:	d0e7      	beq.n	3e64 <_malloc_r+0x58>
    3e94:	425a      	negs	r2, r3
    3e96:	50e2      	str	r2, [r4, r3]
    3e98:	e7e4      	b.n	3e64 <_malloc_r+0x58>
    3e9a:	684b      	ldr	r3, [r1, #4]
    3e9c:	6063      	str	r3, [r4, #4]
    3e9e:	000c      	movs	r4, r1
    3ea0:	e7ee      	b.n	3e80 <_malloc_r+0x74>
    3ea2:	000c      	movs	r4, r1
    3ea4:	6849      	ldr	r1, [r1, #4]
    3ea6:	e7c2      	b.n	3e2e <_malloc_r+0x22>
    3ea8:	2303      	movs	r3, #3
    3eaa:	1cc4      	adds	r4, r0, #3
    3eac:	439c      	bics	r4, r3
    3eae:	42a0      	cmp	r0, r4
    3eb0:	d0e0      	beq.n	3e74 <_malloc_r+0x68>
    3eb2:	1a21      	subs	r1, r4, r0
    3eb4:	0030      	movs	r0, r6
    3eb6:	f000 faf5 	bl	44a4 <_sbrk_r>
    3eba:	1c43      	adds	r3, r0, #1
    3ebc:	d1da      	bne.n	3e74 <_malloc_r+0x68>
    3ebe:	e7c6      	b.n	3e4e <_malloc_r+0x42>
    3ec0:	20000444 	.word	0x20000444
    3ec4:	20000448 	.word	0x20000448

00003ec8 <__ssputs_r>:
    3ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eca:	688e      	ldr	r6, [r1, #8]
    3ecc:	b085      	sub	sp, #20
    3ece:	0007      	movs	r7, r0
    3ed0:	000c      	movs	r4, r1
    3ed2:	9203      	str	r2, [sp, #12]
    3ed4:	9301      	str	r3, [sp, #4]
    3ed6:	429e      	cmp	r6, r3
    3ed8:	d839      	bhi.n	3f4e <__ssputs_r+0x86>
    3eda:	2390      	movs	r3, #144	; 0x90
    3edc:	898a      	ldrh	r2, [r1, #12]
    3ede:	00db      	lsls	r3, r3, #3
    3ee0:	421a      	tst	r2, r3
    3ee2:	d034      	beq.n	3f4e <__ssputs_r+0x86>
    3ee4:	2503      	movs	r5, #3
    3ee6:	6909      	ldr	r1, [r1, #16]
    3ee8:	6823      	ldr	r3, [r4, #0]
    3eea:	1a5b      	subs	r3, r3, r1
    3eec:	9302      	str	r3, [sp, #8]
    3eee:	6963      	ldr	r3, [r4, #20]
    3ef0:	9802      	ldr	r0, [sp, #8]
    3ef2:	435d      	muls	r5, r3
    3ef4:	0feb      	lsrs	r3, r5, #31
    3ef6:	195d      	adds	r5, r3, r5
    3ef8:	9b01      	ldr	r3, [sp, #4]
    3efa:	106d      	asrs	r5, r5, #1
    3efc:	3301      	adds	r3, #1
    3efe:	181b      	adds	r3, r3, r0
    3f00:	42ab      	cmp	r3, r5
    3f02:	d900      	bls.n	3f06 <__ssputs_r+0x3e>
    3f04:	001d      	movs	r5, r3
    3f06:	0553      	lsls	r3, r2, #21
    3f08:	d532      	bpl.n	3f70 <__ssputs_r+0xa8>
    3f0a:	0029      	movs	r1, r5
    3f0c:	0038      	movs	r0, r7
    3f0e:	f7ff ff7d 	bl	3e0c <_malloc_r>
    3f12:	1e06      	subs	r6, r0, #0
    3f14:	d109      	bne.n	3f2a <__ssputs_r+0x62>
    3f16:	230c      	movs	r3, #12
    3f18:	603b      	str	r3, [r7, #0]
    3f1a:	2340      	movs	r3, #64	; 0x40
    3f1c:	2001      	movs	r0, #1
    3f1e:	89a2      	ldrh	r2, [r4, #12]
    3f20:	4240      	negs	r0, r0
    3f22:	4313      	orrs	r3, r2
    3f24:	81a3      	strh	r3, [r4, #12]
    3f26:	b005      	add	sp, #20
    3f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f2a:	9a02      	ldr	r2, [sp, #8]
    3f2c:	6921      	ldr	r1, [r4, #16]
    3f2e:	f7ff ff39 	bl	3da4 <memcpy>
    3f32:	89a3      	ldrh	r3, [r4, #12]
    3f34:	4a14      	ldr	r2, [pc, #80]	; (3f88 <__ssputs_r+0xc0>)
    3f36:	401a      	ands	r2, r3
    3f38:	2380      	movs	r3, #128	; 0x80
    3f3a:	4313      	orrs	r3, r2
    3f3c:	81a3      	strh	r3, [r4, #12]
    3f3e:	9b02      	ldr	r3, [sp, #8]
    3f40:	6126      	str	r6, [r4, #16]
    3f42:	18f6      	adds	r6, r6, r3
    3f44:	6026      	str	r6, [r4, #0]
    3f46:	6165      	str	r5, [r4, #20]
    3f48:	9e01      	ldr	r6, [sp, #4]
    3f4a:	1aed      	subs	r5, r5, r3
    3f4c:	60a5      	str	r5, [r4, #8]
    3f4e:	9b01      	ldr	r3, [sp, #4]
    3f50:	42b3      	cmp	r3, r6
    3f52:	d200      	bcs.n	3f56 <__ssputs_r+0x8e>
    3f54:	001e      	movs	r6, r3
    3f56:	0032      	movs	r2, r6
    3f58:	9903      	ldr	r1, [sp, #12]
    3f5a:	6820      	ldr	r0, [r4, #0]
    3f5c:	f000 fabf 	bl	44de <memmove>
    3f60:	68a3      	ldr	r3, [r4, #8]
    3f62:	2000      	movs	r0, #0
    3f64:	1b9b      	subs	r3, r3, r6
    3f66:	60a3      	str	r3, [r4, #8]
    3f68:	6823      	ldr	r3, [r4, #0]
    3f6a:	199e      	adds	r6, r3, r6
    3f6c:	6026      	str	r6, [r4, #0]
    3f6e:	e7da      	b.n	3f26 <__ssputs_r+0x5e>
    3f70:	002a      	movs	r2, r5
    3f72:	0038      	movs	r0, r7
    3f74:	f000 fb12 	bl	459c <_realloc_r>
    3f78:	1e06      	subs	r6, r0, #0
    3f7a:	d1e0      	bne.n	3f3e <__ssputs_r+0x76>
    3f7c:	6921      	ldr	r1, [r4, #16]
    3f7e:	0038      	movs	r0, r7
    3f80:	f000 fac2 	bl	4508 <_free_r>
    3f84:	e7c7      	b.n	3f16 <__ssputs_r+0x4e>
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	fffffb7f 	.word	0xfffffb7f

00003f8c <_svfiprintf_r>:
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8e:	b09f      	sub	sp, #124	; 0x7c
    3f90:	9002      	str	r0, [sp, #8]
    3f92:	9305      	str	r3, [sp, #20]
    3f94:	898b      	ldrh	r3, [r1, #12]
    3f96:	000f      	movs	r7, r1
    3f98:	0016      	movs	r6, r2
    3f9a:	061b      	lsls	r3, r3, #24
    3f9c:	d511      	bpl.n	3fc2 <_svfiprintf_r+0x36>
    3f9e:	690b      	ldr	r3, [r1, #16]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d10e      	bne.n	3fc2 <_svfiprintf_r+0x36>
    3fa4:	2140      	movs	r1, #64	; 0x40
    3fa6:	f7ff ff31 	bl	3e0c <_malloc_r>
    3faa:	6038      	str	r0, [r7, #0]
    3fac:	6138      	str	r0, [r7, #16]
    3fae:	2800      	cmp	r0, #0
    3fb0:	d105      	bne.n	3fbe <_svfiprintf_r+0x32>
    3fb2:	230c      	movs	r3, #12
    3fb4:	9a02      	ldr	r2, [sp, #8]
    3fb6:	3801      	subs	r0, #1
    3fb8:	6013      	str	r3, [r2, #0]
    3fba:	b01f      	add	sp, #124	; 0x7c
    3fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fbe:	2340      	movs	r3, #64	; 0x40
    3fc0:	617b      	str	r3, [r7, #20]
    3fc2:	2300      	movs	r3, #0
    3fc4:	ad06      	add	r5, sp, #24
    3fc6:	616b      	str	r3, [r5, #20]
    3fc8:	3320      	adds	r3, #32
    3fca:	766b      	strb	r3, [r5, #25]
    3fcc:	3310      	adds	r3, #16
    3fce:	76ab      	strb	r3, [r5, #26]
    3fd0:	0034      	movs	r4, r6
    3fd2:	7823      	ldrb	r3, [r4, #0]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d147      	bne.n	4068 <_svfiprintf_r+0xdc>
    3fd8:	1ba3      	subs	r3, r4, r6
    3fda:	9304      	str	r3, [sp, #16]
    3fdc:	d00d      	beq.n	3ffa <_svfiprintf_r+0x6e>
    3fde:	1ba3      	subs	r3, r4, r6
    3fe0:	0032      	movs	r2, r6
    3fe2:	0039      	movs	r1, r7
    3fe4:	9802      	ldr	r0, [sp, #8]
    3fe6:	f7ff ff6f 	bl	3ec8 <__ssputs_r>
    3fea:	1c43      	adds	r3, r0, #1
    3fec:	d100      	bne.n	3ff0 <_svfiprintf_r+0x64>
    3fee:	e0b5      	b.n	415c <_svfiprintf_r+0x1d0>
    3ff0:	696a      	ldr	r2, [r5, #20]
    3ff2:	9b04      	ldr	r3, [sp, #16]
    3ff4:	4694      	mov	ip, r2
    3ff6:	4463      	add	r3, ip
    3ff8:	616b      	str	r3, [r5, #20]
    3ffa:	7823      	ldrb	r3, [r4, #0]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d100      	bne.n	4002 <_svfiprintf_r+0x76>
    4000:	e0ac      	b.n	415c <_svfiprintf_r+0x1d0>
    4002:	2201      	movs	r2, #1
    4004:	2300      	movs	r3, #0
    4006:	4252      	negs	r2, r2
    4008:	606a      	str	r2, [r5, #4]
    400a:	a902      	add	r1, sp, #8
    400c:	3254      	adds	r2, #84	; 0x54
    400e:	1852      	adds	r2, r2, r1
    4010:	3401      	adds	r4, #1
    4012:	602b      	str	r3, [r5, #0]
    4014:	60eb      	str	r3, [r5, #12]
    4016:	60ab      	str	r3, [r5, #8]
    4018:	7013      	strb	r3, [r2, #0]
    401a:	65ab      	str	r3, [r5, #88]	; 0x58
    401c:	4e58      	ldr	r6, [pc, #352]	; (4180 <_svfiprintf_r+0x1f4>)
    401e:	2205      	movs	r2, #5
    4020:	7821      	ldrb	r1, [r4, #0]
    4022:	0030      	movs	r0, r6
    4024:	f000 fa50 	bl	44c8 <memchr>
    4028:	1c62      	adds	r2, r4, #1
    402a:	2800      	cmp	r0, #0
    402c:	d120      	bne.n	4070 <_svfiprintf_r+0xe4>
    402e:	6829      	ldr	r1, [r5, #0]
    4030:	06cb      	lsls	r3, r1, #27
    4032:	d504      	bpl.n	403e <_svfiprintf_r+0xb2>
    4034:	2353      	movs	r3, #83	; 0x53
    4036:	ae02      	add	r6, sp, #8
    4038:	3020      	adds	r0, #32
    403a:	199b      	adds	r3, r3, r6
    403c:	7018      	strb	r0, [r3, #0]
    403e:	070b      	lsls	r3, r1, #28
    4040:	d504      	bpl.n	404c <_svfiprintf_r+0xc0>
    4042:	2353      	movs	r3, #83	; 0x53
    4044:	202b      	movs	r0, #43	; 0x2b
    4046:	ae02      	add	r6, sp, #8
    4048:	199b      	adds	r3, r3, r6
    404a:	7018      	strb	r0, [r3, #0]
    404c:	7823      	ldrb	r3, [r4, #0]
    404e:	2b2a      	cmp	r3, #42	; 0x2a
    4050:	d016      	beq.n	4080 <_svfiprintf_r+0xf4>
    4052:	2000      	movs	r0, #0
    4054:	210a      	movs	r1, #10
    4056:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4058:	7822      	ldrb	r2, [r4, #0]
    405a:	3a30      	subs	r2, #48	; 0x30
    405c:	2a09      	cmp	r2, #9
    405e:	d955      	bls.n	410c <_svfiprintf_r+0x180>
    4060:	2800      	cmp	r0, #0
    4062:	d015      	beq.n	4090 <_svfiprintf_r+0x104>
    4064:	9309      	str	r3, [sp, #36]	; 0x24
    4066:	e013      	b.n	4090 <_svfiprintf_r+0x104>
    4068:	2b25      	cmp	r3, #37	; 0x25
    406a:	d0b5      	beq.n	3fd8 <_svfiprintf_r+0x4c>
    406c:	3401      	adds	r4, #1
    406e:	e7b0      	b.n	3fd2 <_svfiprintf_r+0x46>
    4070:	2301      	movs	r3, #1
    4072:	1b80      	subs	r0, r0, r6
    4074:	4083      	lsls	r3, r0
    4076:	6829      	ldr	r1, [r5, #0]
    4078:	0014      	movs	r4, r2
    407a:	430b      	orrs	r3, r1
    407c:	602b      	str	r3, [r5, #0]
    407e:	e7cd      	b.n	401c <_svfiprintf_r+0x90>
    4080:	9b05      	ldr	r3, [sp, #20]
    4082:	1d18      	adds	r0, r3, #4
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	9005      	str	r0, [sp, #20]
    4088:	2b00      	cmp	r3, #0
    408a:	db39      	blt.n	4100 <_svfiprintf_r+0x174>
    408c:	9309      	str	r3, [sp, #36]	; 0x24
    408e:	0014      	movs	r4, r2
    4090:	7823      	ldrb	r3, [r4, #0]
    4092:	2b2e      	cmp	r3, #46	; 0x2e
    4094:	d10b      	bne.n	40ae <_svfiprintf_r+0x122>
    4096:	7863      	ldrb	r3, [r4, #1]
    4098:	1c62      	adds	r2, r4, #1
    409a:	2b2a      	cmp	r3, #42	; 0x2a
    409c:	d13e      	bne.n	411c <_svfiprintf_r+0x190>
    409e:	9b05      	ldr	r3, [sp, #20]
    40a0:	3402      	adds	r4, #2
    40a2:	1d1a      	adds	r2, r3, #4
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	9205      	str	r2, [sp, #20]
    40a8:	2b00      	cmp	r3, #0
    40aa:	db34      	blt.n	4116 <_svfiprintf_r+0x18a>
    40ac:	9307      	str	r3, [sp, #28]
    40ae:	4e35      	ldr	r6, [pc, #212]	; (4184 <_svfiprintf_r+0x1f8>)
    40b0:	7821      	ldrb	r1, [r4, #0]
    40b2:	2203      	movs	r2, #3
    40b4:	0030      	movs	r0, r6
    40b6:	f000 fa07 	bl	44c8 <memchr>
    40ba:	2800      	cmp	r0, #0
    40bc:	d006      	beq.n	40cc <_svfiprintf_r+0x140>
    40be:	2340      	movs	r3, #64	; 0x40
    40c0:	1b80      	subs	r0, r0, r6
    40c2:	4083      	lsls	r3, r0
    40c4:	682a      	ldr	r2, [r5, #0]
    40c6:	3401      	adds	r4, #1
    40c8:	4313      	orrs	r3, r2
    40ca:	602b      	str	r3, [r5, #0]
    40cc:	7821      	ldrb	r1, [r4, #0]
    40ce:	2206      	movs	r2, #6
    40d0:	482d      	ldr	r0, [pc, #180]	; (4188 <_svfiprintf_r+0x1fc>)
    40d2:	1c66      	adds	r6, r4, #1
    40d4:	7629      	strb	r1, [r5, #24]
    40d6:	f000 f9f7 	bl	44c8 <memchr>
    40da:	2800      	cmp	r0, #0
    40dc:	d046      	beq.n	416c <_svfiprintf_r+0x1e0>
    40de:	4b2b      	ldr	r3, [pc, #172]	; (418c <_svfiprintf_r+0x200>)
    40e0:	2b00      	cmp	r3, #0
    40e2:	d12f      	bne.n	4144 <_svfiprintf_r+0x1b8>
    40e4:	6829      	ldr	r1, [r5, #0]
    40e6:	9b05      	ldr	r3, [sp, #20]
    40e8:	2207      	movs	r2, #7
    40ea:	05c9      	lsls	r1, r1, #23
    40ec:	d528      	bpl.n	4140 <_svfiprintf_r+0x1b4>
    40ee:	189b      	adds	r3, r3, r2
    40f0:	4393      	bics	r3, r2
    40f2:	3308      	adds	r3, #8
    40f4:	9305      	str	r3, [sp, #20]
    40f6:	696b      	ldr	r3, [r5, #20]
    40f8:	9a03      	ldr	r2, [sp, #12]
    40fa:	189b      	adds	r3, r3, r2
    40fc:	616b      	str	r3, [r5, #20]
    40fe:	e767      	b.n	3fd0 <_svfiprintf_r+0x44>
    4100:	425b      	negs	r3, r3
    4102:	60eb      	str	r3, [r5, #12]
    4104:	2302      	movs	r3, #2
    4106:	430b      	orrs	r3, r1
    4108:	602b      	str	r3, [r5, #0]
    410a:	e7c0      	b.n	408e <_svfiprintf_r+0x102>
    410c:	434b      	muls	r3, r1
    410e:	3401      	adds	r4, #1
    4110:	189b      	adds	r3, r3, r2
    4112:	2001      	movs	r0, #1
    4114:	e7a0      	b.n	4058 <_svfiprintf_r+0xcc>
    4116:	2301      	movs	r3, #1
    4118:	425b      	negs	r3, r3
    411a:	e7c7      	b.n	40ac <_svfiprintf_r+0x120>
    411c:	2300      	movs	r3, #0
    411e:	0014      	movs	r4, r2
    4120:	200a      	movs	r0, #10
    4122:	001a      	movs	r2, r3
    4124:	606b      	str	r3, [r5, #4]
    4126:	7821      	ldrb	r1, [r4, #0]
    4128:	3930      	subs	r1, #48	; 0x30
    412a:	2909      	cmp	r1, #9
    412c:	d903      	bls.n	4136 <_svfiprintf_r+0x1aa>
    412e:	2b00      	cmp	r3, #0
    4130:	d0bd      	beq.n	40ae <_svfiprintf_r+0x122>
    4132:	9207      	str	r2, [sp, #28]
    4134:	e7bb      	b.n	40ae <_svfiprintf_r+0x122>
    4136:	4342      	muls	r2, r0
    4138:	3401      	adds	r4, #1
    413a:	1852      	adds	r2, r2, r1
    413c:	2301      	movs	r3, #1
    413e:	e7f2      	b.n	4126 <_svfiprintf_r+0x19a>
    4140:	3307      	adds	r3, #7
    4142:	e7d5      	b.n	40f0 <_svfiprintf_r+0x164>
    4144:	ab05      	add	r3, sp, #20
    4146:	9300      	str	r3, [sp, #0]
    4148:	003a      	movs	r2, r7
    414a:	4b11      	ldr	r3, [pc, #68]	; (4190 <_svfiprintf_r+0x204>)
    414c:	0029      	movs	r1, r5
    414e:	9802      	ldr	r0, [sp, #8]
    4150:	e000      	b.n	4154 <_svfiprintf_r+0x1c8>
    4152:	bf00      	nop
    4154:	9003      	str	r0, [sp, #12]
    4156:	9b03      	ldr	r3, [sp, #12]
    4158:	3301      	adds	r3, #1
    415a:	d1cc      	bne.n	40f6 <_svfiprintf_r+0x16a>
    415c:	89bb      	ldrh	r3, [r7, #12]
    415e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4160:	065b      	lsls	r3, r3, #25
    4162:	d400      	bmi.n	4166 <_svfiprintf_r+0x1da>
    4164:	e729      	b.n	3fba <_svfiprintf_r+0x2e>
    4166:	2001      	movs	r0, #1
    4168:	4240      	negs	r0, r0
    416a:	e726      	b.n	3fba <_svfiprintf_r+0x2e>
    416c:	ab05      	add	r3, sp, #20
    416e:	9300      	str	r3, [sp, #0]
    4170:	003a      	movs	r2, r7
    4172:	4b07      	ldr	r3, [pc, #28]	; (4190 <_svfiprintf_r+0x204>)
    4174:	0029      	movs	r1, r5
    4176:	9802      	ldr	r0, [sp, #8]
    4178:	f000 f87a 	bl	4270 <_printf_i>
    417c:	e7ea      	b.n	4154 <_svfiprintf_r+0x1c8>
    417e:	46c0      	nop			; (mov r8, r8)
    4180:	000048b4 	.word	0x000048b4
    4184:	000048ba 	.word	0x000048ba
    4188:	000048be 	.word	0x000048be
    418c:	00000000 	.word	0x00000000
    4190:	00003ec9 	.word	0x00003ec9

00004194 <_printf_common>:
    4194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4196:	0015      	movs	r5, r2
    4198:	9301      	str	r3, [sp, #4]
    419a:	688a      	ldr	r2, [r1, #8]
    419c:	690b      	ldr	r3, [r1, #16]
    419e:	9000      	str	r0, [sp, #0]
    41a0:	000c      	movs	r4, r1
    41a2:	4293      	cmp	r3, r2
    41a4:	da00      	bge.n	41a8 <_printf_common+0x14>
    41a6:	0013      	movs	r3, r2
    41a8:	0022      	movs	r2, r4
    41aa:	602b      	str	r3, [r5, #0]
    41ac:	3243      	adds	r2, #67	; 0x43
    41ae:	7812      	ldrb	r2, [r2, #0]
    41b0:	2a00      	cmp	r2, #0
    41b2:	d001      	beq.n	41b8 <_printf_common+0x24>
    41b4:	3301      	adds	r3, #1
    41b6:	602b      	str	r3, [r5, #0]
    41b8:	6823      	ldr	r3, [r4, #0]
    41ba:	069b      	lsls	r3, r3, #26
    41bc:	d502      	bpl.n	41c4 <_printf_common+0x30>
    41be:	682b      	ldr	r3, [r5, #0]
    41c0:	3302      	adds	r3, #2
    41c2:	602b      	str	r3, [r5, #0]
    41c4:	2706      	movs	r7, #6
    41c6:	6823      	ldr	r3, [r4, #0]
    41c8:	401f      	ands	r7, r3
    41ca:	d027      	beq.n	421c <_printf_common+0x88>
    41cc:	0023      	movs	r3, r4
    41ce:	3343      	adds	r3, #67	; 0x43
    41d0:	781b      	ldrb	r3, [r3, #0]
    41d2:	1e5a      	subs	r2, r3, #1
    41d4:	4193      	sbcs	r3, r2
    41d6:	6822      	ldr	r2, [r4, #0]
    41d8:	0692      	lsls	r2, r2, #26
    41da:	d430      	bmi.n	423e <_printf_common+0xaa>
    41dc:	0022      	movs	r2, r4
    41de:	9901      	ldr	r1, [sp, #4]
    41e0:	3243      	adds	r2, #67	; 0x43
    41e2:	9800      	ldr	r0, [sp, #0]
    41e4:	9e08      	ldr	r6, [sp, #32]
    41e6:	47b0      	blx	r6
    41e8:	1c43      	adds	r3, r0, #1
    41ea:	d025      	beq.n	4238 <_printf_common+0xa4>
    41ec:	2306      	movs	r3, #6
    41ee:	6820      	ldr	r0, [r4, #0]
    41f0:	682a      	ldr	r2, [r5, #0]
    41f2:	68e1      	ldr	r1, [r4, #12]
    41f4:	4003      	ands	r3, r0
    41f6:	2500      	movs	r5, #0
    41f8:	2b04      	cmp	r3, #4
    41fa:	d103      	bne.n	4204 <_printf_common+0x70>
    41fc:	1a8d      	subs	r5, r1, r2
    41fe:	43eb      	mvns	r3, r5
    4200:	17db      	asrs	r3, r3, #31
    4202:	401d      	ands	r5, r3
    4204:	68a3      	ldr	r3, [r4, #8]
    4206:	6922      	ldr	r2, [r4, #16]
    4208:	4293      	cmp	r3, r2
    420a:	dd01      	ble.n	4210 <_printf_common+0x7c>
    420c:	1a9b      	subs	r3, r3, r2
    420e:	18ed      	adds	r5, r5, r3
    4210:	2700      	movs	r7, #0
    4212:	42bd      	cmp	r5, r7
    4214:	d120      	bne.n	4258 <_printf_common+0xc4>
    4216:	2000      	movs	r0, #0
    4218:	e010      	b.n	423c <_printf_common+0xa8>
    421a:	3701      	adds	r7, #1
    421c:	68e3      	ldr	r3, [r4, #12]
    421e:	682a      	ldr	r2, [r5, #0]
    4220:	1a9b      	subs	r3, r3, r2
    4222:	429f      	cmp	r7, r3
    4224:	dad2      	bge.n	41cc <_printf_common+0x38>
    4226:	0022      	movs	r2, r4
    4228:	2301      	movs	r3, #1
    422a:	3219      	adds	r2, #25
    422c:	9901      	ldr	r1, [sp, #4]
    422e:	9800      	ldr	r0, [sp, #0]
    4230:	9e08      	ldr	r6, [sp, #32]
    4232:	47b0      	blx	r6
    4234:	1c43      	adds	r3, r0, #1
    4236:	d1f0      	bne.n	421a <_printf_common+0x86>
    4238:	2001      	movs	r0, #1
    423a:	4240      	negs	r0, r0
    423c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    423e:	2030      	movs	r0, #48	; 0x30
    4240:	18e1      	adds	r1, r4, r3
    4242:	3143      	adds	r1, #67	; 0x43
    4244:	7008      	strb	r0, [r1, #0]
    4246:	0021      	movs	r1, r4
    4248:	1c5a      	adds	r2, r3, #1
    424a:	3145      	adds	r1, #69	; 0x45
    424c:	7809      	ldrb	r1, [r1, #0]
    424e:	18a2      	adds	r2, r4, r2
    4250:	3243      	adds	r2, #67	; 0x43
    4252:	3302      	adds	r3, #2
    4254:	7011      	strb	r1, [r2, #0]
    4256:	e7c1      	b.n	41dc <_printf_common+0x48>
    4258:	0022      	movs	r2, r4
    425a:	2301      	movs	r3, #1
    425c:	321a      	adds	r2, #26
    425e:	9901      	ldr	r1, [sp, #4]
    4260:	9800      	ldr	r0, [sp, #0]
    4262:	9e08      	ldr	r6, [sp, #32]
    4264:	47b0      	blx	r6
    4266:	1c43      	adds	r3, r0, #1
    4268:	d0e6      	beq.n	4238 <_printf_common+0xa4>
    426a:	3701      	adds	r7, #1
    426c:	e7d1      	b.n	4212 <_printf_common+0x7e>
	...

00004270 <_printf_i>:
    4270:	b5f0      	push	{r4, r5, r6, r7, lr}
    4272:	b08b      	sub	sp, #44	; 0x2c
    4274:	9206      	str	r2, [sp, #24]
    4276:	000a      	movs	r2, r1
    4278:	3243      	adds	r2, #67	; 0x43
    427a:	9307      	str	r3, [sp, #28]
    427c:	9005      	str	r0, [sp, #20]
    427e:	9204      	str	r2, [sp, #16]
    4280:	7e0a      	ldrb	r2, [r1, #24]
    4282:	000c      	movs	r4, r1
    4284:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4286:	2a6e      	cmp	r2, #110	; 0x6e
    4288:	d100      	bne.n	428c <_printf_i+0x1c>
    428a:	e08f      	b.n	43ac <_printf_i+0x13c>
    428c:	d817      	bhi.n	42be <_printf_i+0x4e>
    428e:	2a63      	cmp	r2, #99	; 0x63
    4290:	d02c      	beq.n	42ec <_printf_i+0x7c>
    4292:	d808      	bhi.n	42a6 <_printf_i+0x36>
    4294:	2a00      	cmp	r2, #0
    4296:	d100      	bne.n	429a <_printf_i+0x2a>
    4298:	e099      	b.n	43ce <_printf_i+0x15e>
    429a:	2a58      	cmp	r2, #88	; 0x58
    429c:	d054      	beq.n	4348 <_printf_i+0xd8>
    429e:	0026      	movs	r6, r4
    42a0:	3642      	adds	r6, #66	; 0x42
    42a2:	7032      	strb	r2, [r6, #0]
    42a4:	e029      	b.n	42fa <_printf_i+0x8a>
    42a6:	2a64      	cmp	r2, #100	; 0x64
    42a8:	d001      	beq.n	42ae <_printf_i+0x3e>
    42aa:	2a69      	cmp	r2, #105	; 0x69
    42ac:	d1f7      	bne.n	429e <_printf_i+0x2e>
    42ae:	6821      	ldr	r1, [r4, #0]
    42b0:	681a      	ldr	r2, [r3, #0]
    42b2:	0608      	lsls	r0, r1, #24
    42b4:	d523      	bpl.n	42fe <_printf_i+0x8e>
    42b6:	1d11      	adds	r1, r2, #4
    42b8:	6019      	str	r1, [r3, #0]
    42ba:	6815      	ldr	r5, [r2, #0]
    42bc:	e025      	b.n	430a <_printf_i+0x9a>
    42be:	2a73      	cmp	r2, #115	; 0x73
    42c0:	d100      	bne.n	42c4 <_printf_i+0x54>
    42c2:	e088      	b.n	43d6 <_printf_i+0x166>
    42c4:	d808      	bhi.n	42d8 <_printf_i+0x68>
    42c6:	2a6f      	cmp	r2, #111	; 0x6f
    42c8:	d029      	beq.n	431e <_printf_i+0xae>
    42ca:	2a70      	cmp	r2, #112	; 0x70
    42cc:	d1e7      	bne.n	429e <_printf_i+0x2e>
    42ce:	2220      	movs	r2, #32
    42d0:	6809      	ldr	r1, [r1, #0]
    42d2:	430a      	orrs	r2, r1
    42d4:	6022      	str	r2, [r4, #0]
    42d6:	e003      	b.n	42e0 <_printf_i+0x70>
    42d8:	2a75      	cmp	r2, #117	; 0x75
    42da:	d020      	beq.n	431e <_printf_i+0xae>
    42dc:	2a78      	cmp	r2, #120	; 0x78
    42de:	d1de      	bne.n	429e <_printf_i+0x2e>
    42e0:	0022      	movs	r2, r4
    42e2:	2178      	movs	r1, #120	; 0x78
    42e4:	3245      	adds	r2, #69	; 0x45
    42e6:	7011      	strb	r1, [r2, #0]
    42e8:	4a6c      	ldr	r2, [pc, #432]	; (449c <_printf_i+0x22c>)
    42ea:	e030      	b.n	434e <_printf_i+0xde>
    42ec:	000e      	movs	r6, r1
    42ee:	681a      	ldr	r2, [r3, #0]
    42f0:	3642      	adds	r6, #66	; 0x42
    42f2:	1d11      	adds	r1, r2, #4
    42f4:	6019      	str	r1, [r3, #0]
    42f6:	6813      	ldr	r3, [r2, #0]
    42f8:	7033      	strb	r3, [r6, #0]
    42fa:	2301      	movs	r3, #1
    42fc:	e079      	b.n	43f2 <_printf_i+0x182>
    42fe:	0649      	lsls	r1, r1, #25
    4300:	d5d9      	bpl.n	42b6 <_printf_i+0x46>
    4302:	1d11      	adds	r1, r2, #4
    4304:	6019      	str	r1, [r3, #0]
    4306:	2300      	movs	r3, #0
    4308:	5ed5      	ldrsh	r5, [r2, r3]
    430a:	2d00      	cmp	r5, #0
    430c:	da03      	bge.n	4316 <_printf_i+0xa6>
    430e:	232d      	movs	r3, #45	; 0x2d
    4310:	9a04      	ldr	r2, [sp, #16]
    4312:	426d      	negs	r5, r5
    4314:	7013      	strb	r3, [r2, #0]
    4316:	4b62      	ldr	r3, [pc, #392]	; (44a0 <_printf_i+0x230>)
    4318:	270a      	movs	r7, #10
    431a:	9303      	str	r3, [sp, #12]
    431c:	e02f      	b.n	437e <_printf_i+0x10e>
    431e:	6820      	ldr	r0, [r4, #0]
    4320:	6819      	ldr	r1, [r3, #0]
    4322:	0605      	lsls	r5, r0, #24
    4324:	d503      	bpl.n	432e <_printf_i+0xbe>
    4326:	1d08      	adds	r0, r1, #4
    4328:	6018      	str	r0, [r3, #0]
    432a:	680d      	ldr	r5, [r1, #0]
    432c:	e005      	b.n	433a <_printf_i+0xca>
    432e:	0640      	lsls	r0, r0, #25
    4330:	d5f9      	bpl.n	4326 <_printf_i+0xb6>
    4332:	680d      	ldr	r5, [r1, #0]
    4334:	1d08      	adds	r0, r1, #4
    4336:	6018      	str	r0, [r3, #0]
    4338:	b2ad      	uxth	r5, r5
    433a:	4b59      	ldr	r3, [pc, #356]	; (44a0 <_printf_i+0x230>)
    433c:	2708      	movs	r7, #8
    433e:	9303      	str	r3, [sp, #12]
    4340:	2a6f      	cmp	r2, #111	; 0x6f
    4342:	d018      	beq.n	4376 <_printf_i+0x106>
    4344:	270a      	movs	r7, #10
    4346:	e016      	b.n	4376 <_printf_i+0x106>
    4348:	3145      	adds	r1, #69	; 0x45
    434a:	700a      	strb	r2, [r1, #0]
    434c:	4a54      	ldr	r2, [pc, #336]	; (44a0 <_printf_i+0x230>)
    434e:	9203      	str	r2, [sp, #12]
    4350:	681a      	ldr	r2, [r3, #0]
    4352:	6821      	ldr	r1, [r4, #0]
    4354:	1d10      	adds	r0, r2, #4
    4356:	6018      	str	r0, [r3, #0]
    4358:	6815      	ldr	r5, [r2, #0]
    435a:	0608      	lsls	r0, r1, #24
    435c:	d522      	bpl.n	43a4 <_printf_i+0x134>
    435e:	07cb      	lsls	r3, r1, #31
    4360:	d502      	bpl.n	4368 <_printf_i+0xf8>
    4362:	2320      	movs	r3, #32
    4364:	4319      	orrs	r1, r3
    4366:	6021      	str	r1, [r4, #0]
    4368:	2710      	movs	r7, #16
    436a:	2d00      	cmp	r5, #0
    436c:	d103      	bne.n	4376 <_printf_i+0x106>
    436e:	2320      	movs	r3, #32
    4370:	6822      	ldr	r2, [r4, #0]
    4372:	439a      	bics	r2, r3
    4374:	6022      	str	r2, [r4, #0]
    4376:	0023      	movs	r3, r4
    4378:	2200      	movs	r2, #0
    437a:	3343      	adds	r3, #67	; 0x43
    437c:	701a      	strb	r2, [r3, #0]
    437e:	6863      	ldr	r3, [r4, #4]
    4380:	60a3      	str	r3, [r4, #8]
    4382:	2b00      	cmp	r3, #0
    4384:	db5c      	blt.n	4440 <_printf_i+0x1d0>
    4386:	2204      	movs	r2, #4
    4388:	6821      	ldr	r1, [r4, #0]
    438a:	4391      	bics	r1, r2
    438c:	6021      	str	r1, [r4, #0]
    438e:	2d00      	cmp	r5, #0
    4390:	d158      	bne.n	4444 <_printf_i+0x1d4>
    4392:	9e04      	ldr	r6, [sp, #16]
    4394:	2b00      	cmp	r3, #0
    4396:	d064      	beq.n	4462 <_printf_i+0x1f2>
    4398:	0026      	movs	r6, r4
    439a:	9b03      	ldr	r3, [sp, #12]
    439c:	3642      	adds	r6, #66	; 0x42
    439e:	781b      	ldrb	r3, [r3, #0]
    43a0:	7033      	strb	r3, [r6, #0]
    43a2:	e05e      	b.n	4462 <_printf_i+0x1f2>
    43a4:	0648      	lsls	r0, r1, #25
    43a6:	d5da      	bpl.n	435e <_printf_i+0xee>
    43a8:	b2ad      	uxth	r5, r5
    43aa:	e7d8      	b.n	435e <_printf_i+0xee>
    43ac:	6809      	ldr	r1, [r1, #0]
    43ae:	681a      	ldr	r2, [r3, #0]
    43b0:	0608      	lsls	r0, r1, #24
    43b2:	d505      	bpl.n	43c0 <_printf_i+0x150>
    43b4:	1d11      	adds	r1, r2, #4
    43b6:	6019      	str	r1, [r3, #0]
    43b8:	6813      	ldr	r3, [r2, #0]
    43ba:	6962      	ldr	r2, [r4, #20]
    43bc:	601a      	str	r2, [r3, #0]
    43be:	e006      	b.n	43ce <_printf_i+0x15e>
    43c0:	0649      	lsls	r1, r1, #25
    43c2:	d5f7      	bpl.n	43b4 <_printf_i+0x144>
    43c4:	1d11      	adds	r1, r2, #4
    43c6:	6019      	str	r1, [r3, #0]
    43c8:	6813      	ldr	r3, [r2, #0]
    43ca:	8aa2      	ldrh	r2, [r4, #20]
    43cc:	801a      	strh	r2, [r3, #0]
    43ce:	2300      	movs	r3, #0
    43d0:	9e04      	ldr	r6, [sp, #16]
    43d2:	6123      	str	r3, [r4, #16]
    43d4:	e054      	b.n	4480 <_printf_i+0x210>
    43d6:	681a      	ldr	r2, [r3, #0]
    43d8:	1d11      	adds	r1, r2, #4
    43da:	6019      	str	r1, [r3, #0]
    43dc:	6816      	ldr	r6, [r2, #0]
    43de:	2100      	movs	r1, #0
    43e0:	6862      	ldr	r2, [r4, #4]
    43e2:	0030      	movs	r0, r6
    43e4:	f000 f870 	bl	44c8 <memchr>
    43e8:	2800      	cmp	r0, #0
    43ea:	d001      	beq.n	43f0 <_printf_i+0x180>
    43ec:	1b80      	subs	r0, r0, r6
    43ee:	6060      	str	r0, [r4, #4]
    43f0:	6863      	ldr	r3, [r4, #4]
    43f2:	6123      	str	r3, [r4, #16]
    43f4:	2300      	movs	r3, #0
    43f6:	9a04      	ldr	r2, [sp, #16]
    43f8:	7013      	strb	r3, [r2, #0]
    43fa:	e041      	b.n	4480 <_printf_i+0x210>
    43fc:	6923      	ldr	r3, [r4, #16]
    43fe:	0032      	movs	r2, r6
    4400:	9906      	ldr	r1, [sp, #24]
    4402:	9805      	ldr	r0, [sp, #20]
    4404:	9d07      	ldr	r5, [sp, #28]
    4406:	47a8      	blx	r5
    4408:	1c43      	adds	r3, r0, #1
    440a:	d043      	beq.n	4494 <_printf_i+0x224>
    440c:	6823      	ldr	r3, [r4, #0]
    440e:	2500      	movs	r5, #0
    4410:	079b      	lsls	r3, r3, #30
    4412:	d40f      	bmi.n	4434 <_printf_i+0x1c4>
    4414:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4416:	68e0      	ldr	r0, [r4, #12]
    4418:	4298      	cmp	r0, r3
    441a:	da3d      	bge.n	4498 <_printf_i+0x228>
    441c:	0018      	movs	r0, r3
    441e:	e03b      	b.n	4498 <_printf_i+0x228>
    4420:	0022      	movs	r2, r4
    4422:	2301      	movs	r3, #1
    4424:	3219      	adds	r2, #25
    4426:	9906      	ldr	r1, [sp, #24]
    4428:	9805      	ldr	r0, [sp, #20]
    442a:	9e07      	ldr	r6, [sp, #28]
    442c:	47b0      	blx	r6
    442e:	1c43      	adds	r3, r0, #1
    4430:	d030      	beq.n	4494 <_printf_i+0x224>
    4432:	3501      	adds	r5, #1
    4434:	68e3      	ldr	r3, [r4, #12]
    4436:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4438:	1a9b      	subs	r3, r3, r2
    443a:	429d      	cmp	r5, r3
    443c:	dbf0      	blt.n	4420 <_printf_i+0x1b0>
    443e:	e7e9      	b.n	4414 <_printf_i+0x1a4>
    4440:	2d00      	cmp	r5, #0
    4442:	d0a9      	beq.n	4398 <_printf_i+0x128>
    4444:	9e04      	ldr	r6, [sp, #16]
    4446:	0028      	movs	r0, r5
    4448:	0039      	movs	r1, r7
    444a:	f7ff fb6d 	bl	3b28 <__aeabi_uidivmod>
    444e:	9b03      	ldr	r3, [sp, #12]
    4450:	3e01      	subs	r6, #1
    4452:	5c5b      	ldrb	r3, [r3, r1]
    4454:	0028      	movs	r0, r5
    4456:	7033      	strb	r3, [r6, #0]
    4458:	0039      	movs	r1, r7
    445a:	f7ff fadf 	bl	3a1c <__udivsi3>
    445e:	1e05      	subs	r5, r0, #0
    4460:	d1f1      	bne.n	4446 <_printf_i+0x1d6>
    4462:	2f08      	cmp	r7, #8
    4464:	d109      	bne.n	447a <_printf_i+0x20a>
    4466:	6823      	ldr	r3, [r4, #0]
    4468:	07db      	lsls	r3, r3, #31
    446a:	d506      	bpl.n	447a <_printf_i+0x20a>
    446c:	6863      	ldr	r3, [r4, #4]
    446e:	6922      	ldr	r2, [r4, #16]
    4470:	4293      	cmp	r3, r2
    4472:	dc02      	bgt.n	447a <_printf_i+0x20a>
    4474:	2330      	movs	r3, #48	; 0x30
    4476:	3e01      	subs	r6, #1
    4478:	7033      	strb	r3, [r6, #0]
    447a:	9b04      	ldr	r3, [sp, #16]
    447c:	1b9b      	subs	r3, r3, r6
    447e:	6123      	str	r3, [r4, #16]
    4480:	9b07      	ldr	r3, [sp, #28]
    4482:	aa09      	add	r2, sp, #36	; 0x24
    4484:	9300      	str	r3, [sp, #0]
    4486:	0021      	movs	r1, r4
    4488:	9b06      	ldr	r3, [sp, #24]
    448a:	9805      	ldr	r0, [sp, #20]
    448c:	f7ff fe82 	bl	4194 <_printf_common>
    4490:	1c43      	adds	r3, r0, #1
    4492:	d1b3      	bne.n	43fc <_printf_i+0x18c>
    4494:	2001      	movs	r0, #1
    4496:	4240      	negs	r0, r0
    4498:	b00b      	add	sp, #44	; 0x2c
    449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    449c:	000048d6 	.word	0x000048d6
    44a0:	000048c5 	.word	0x000048c5

000044a4 <_sbrk_r>:
    44a4:	2300      	movs	r3, #0
    44a6:	b570      	push	{r4, r5, r6, lr}
    44a8:	4c06      	ldr	r4, [pc, #24]	; (44c4 <_sbrk_r+0x20>)
    44aa:	0005      	movs	r5, r0
    44ac:	0008      	movs	r0, r1
    44ae:	6023      	str	r3, [r4, #0]
    44b0:	f7fc feb6 	bl	1220 <_sbrk>
    44b4:	1c43      	adds	r3, r0, #1
    44b6:	d103      	bne.n	44c0 <_sbrk_r+0x1c>
    44b8:	6823      	ldr	r3, [r4, #0]
    44ba:	2b00      	cmp	r3, #0
    44bc:	d000      	beq.n	44c0 <_sbrk_r+0x1c>
    44be:	602b      	str	r3, [r5, #0]
    44c0:	bd70      	pop	{r4, r5, r6, pc}
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	20000498 	.word	0x20000498

000044c8 <memchr>:
    44c8:	b2c9      	uxtb	r1, r1
    44ca:	1882      	adds	r2, r0, r2
    44cc:	4290      	cmp	r0, r2
    44ce:	d101      	bne.n	44d4 <memchr+0xc>
    44d0:	2000      	movs	r0, #0
    44d2:	4770      	bx	lr
    44d4:	7803      	ldrb	r3, [r0, #0]
    44d6:	428b      	cmp	r3, r1
    44d8:	d0fb      	beq.n	44d2 <memchr+0xa>
    44da:	3001      	adds	r0, #1
    44dc:	e7f6      	b.n	44cc <memchr+0x4>

000044de <memmove>:
    44de:	b510      	push	{r4, lr}
    44e0:	4288      	cmp	r0, r1
    44e2:	d902      	bls.n	44ea <memmove+0xc>
    44e4:	188b      	adds	r3, r1, r2
    44e6:	4298      	cmp	r0, r3
    44e8:	d308      	bcc.n	44fc <memmove+0x1e>
    44ea:	2300      	movs	r3, #0
    44ec:	429a      	cmp	r2, r3
    44ee:	d007      	beq.n	4500 <memmove+0x22>
    44f0:	5ccc      	ldrb	r4, [r1, r3]
    44f2:	54c4      	strb	r4, [r0, r3]
    44f4:	3301      	adds	r3, #1
    44f6:	e7f9      	b.n	44ec <memmove+0xe>
    44f8:	5c8b      	ldrb	r3, [r1, r2]
    44fa:	5483      	strb	r3, [r0, r2]
    44fc:	3a01      	subs	r2, #1
    44fe:	d2fb      	bcs.n	44f8 <memmove+0x1a>
    4500:	bd10      	pop	{r4, pc}

00004502 <__malloc_lock>:
    4502:	4770      	bx	lr

00004504 <__malloc_unlock>:
    4504:	4770      	bx	lr
	...

00004508 <_free_r>:
    4508:	b570      	push	{r4, r5, r6, lr}
    450a:	0005      	movs	r5, r0
    450c:	2900      	cmp	r1, #0
    450e:	d010      	beq.n	4532 <_free_r+0x2a>
    4510:	1f0c      	subs	r4, r1, #4
    4512:	6823      	ldr	r3, [r4, #0]
    4514:	2b00      	cmp	r3, #0
    4516:	da00      	bge.n	451a <_free_r+0x12>
    4518:	18e4      	adds	r4, r4, r3
    451a:	0028      	movs	r0, r5
    451c:	f7ff fff1 	bl	4502 <__malloc_lock>
    4520:	4a1d      	ldr	r2, [pc, #116]	; (4598 <_free_r+0x90>)
    4522:	6813      	ldr	r3, [r2, #0]
    4524:	2b00      	cmp	r3, #0
    4526:	d105      	bne.n	4534 <_free_r+0x2c>
    4528:	6063      	str	r3, [r4, #4]
    452a:	6014      	str	r4, [r2, #0]
    452c:	0028      	movs	r0, r5
    452e:	f7ff ffe9 	bl	4504 <__malloc_unlock>
    4532:	bd70      	pop	{r4, r5, r6, pc}
    4534:	42a3      	cmp	r3, r4
    4536:	d909      	bls.n	454c <_free_r+0x44>
    4538:	6821      	ldr	r1, [r4, #0]
    453a:	1860      	adds	r0, r4, r1
    453c:	4283      	cmp	r3, r0
    453e:	d1f3      	bne.n	4528 <_free_r+0x20>
    4540:	6818      	ldr	r0, [r3, #0]
    4542:	685b      	ldr	r3, [r3, #4]
    4544:	1841      	adds	r1, r0, r1
    4546:	6021      	str	r1, [r4, #0]
    4548:	e7ee      	b.n	4528 <_free_r+0x20>
    454a:	0013      	movs	r3, r2
    454c:	685a      	ldr	r2, [r3, #4]
    454e:	2a00      	cmp	r2, #0
    4550:	d001      	beq.n	4556 <_free_r+0x4e>
    4552:	42a2      	cmp	r2, r4
    4554:	d9f9      	bls.n	454a <_free_r+0x42>
    4556:	6819      	ldr	r1, [r3, #0]
    4558:	1858      	adds	r0, r3, r1
    455a:	42a0      	cmp	r0, r4
    455c:	d10b      	bne.n	4576 <_free_r+0x6e>
    455e:	6820      	ldr	r0, [r4, #0]
    4560:	1809      	adds	r1, r1, r0
    4562:	1858      	adds	r0, r3, r1
    4564:	6019      	str	r1, [r3, #0]
    4566:	4282      	cmp	r2, r0
    4568:	d1e0      	bne.n	452c <_free_r+0x24>
    456a:	6810      	ldr	r0, [r2, #0]
    456c:	6852      	ldr	r2, [r2, #4]
    456e:	1841      	adds	r1, r0, r1
    4570:	6019      	str	r1, [r3, #0]
    4572:	605a      	str	r2, [r3, #4]
    4574:	e7da      	b.n	452c <_free_r+0x24>
    4576:	42a0      	cmp	r0, r4
    4578:	d902      	bls.n	4580 <_free_r+0x78>
    457a:	230c      	movs	r3, #12
    457c:	602b      	str	r3, [r5, #0]
    457e:	e7d5      	b.n	452c <_free_r+0x24>
    4580:	6821      	ldr	r1, [r4, #0]
    4582:	1860      	adds	r0, r4, r1
    4584:	4282      	cmp	r2, r0
    4586:	d103      	bne.n	4590 <_free_r+0x88>
    4588:	6810      	ldr	r0, [r2, #0]
    458a:	6852      	ldr	r2, [r2, #4]
    458c:	1841      	adds	r1, r0, r1
    458e:	6021      	str	r1, [r4, #0]
    4590:	6062      	str	r2, [r4, #4]
    4592:	605c      	str	r4, [r3, #4]
    4594:	e7ca      	b.n	452c <_free_r+0x24>
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	20000444 	.word	0x20000444

0000459c <_realloc_r>:
    459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    459e:	0007      	movs	r7, r0
    45a0:	000d      	movs	r5, r1
    45a2:	0016      	movs	r6, r2
    45a4:	2900      	cmp	r1, #0
    45a6:	d105      	bne.n	45b4 <_realloc_r+0x18>
    45a8:	0011      	movs	r1, r2
    45aa:	f7ff fc2f 	bl	3e0c <_malloc_r>
    45ae:	0004      	movs	r4, r0
    45b0:	0020      	movs	r0, r4
    45b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45b4:	2a00      	cmp	r2, #0
    45b6:	d103      	bne.n	45c0 <_realloc_r+0x24>
    45b8:	f7ff ffa6 	bl	4508 <_free_r>
    45bc:	0034      	movs	r4, r6
    45be:	e7f7      	b.n	45b0 <_realloc_r+0x14>
    45c0:	f000 f812 	bl	45e8 <_malloc_usable_size_r>
    45c4:	002c      	movs	r4, r5
    45c6:	4286      	cmp	r6, r0
    45c8:	d9f2      	bls.n	45b0 <_realloc_r+0x14>
    45ca:	0031      	movs	r1, r6
    45cc:	0038      	movs	r0, r7
    45ce:	f7ff fc1d 	bl	3e0c <_malloc_r>
    45d2:	1e04      	subs	r4, r0, #0
    45d4:	d0ec      	beq.n	45b0 <_realloc_r+0x14>
    45d6:	0029      	movs	r1, r5
    45d8:	0032      	movs	r2, r6
    45da:	f7ff fbe3 	bl	3da4 <memcpy>
    45de:	0029      	movs	r1, r5
    45e0:	0038      	movs	r0, r7
    45e2:	f7ff ff91 	bl	4508 <_free_r>
    45e6:	e7e3      	b.n	45b0 <_realloc_r+0x14>

000045e8 <_malloc_usable_size_r>:
    45e8:	1f0b      	subs	r3, r1, #4
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	1f18      	subs	r0, r3, #4
    45ee:	2b00      	cmp	r3, #0
    45f0:	da01      	bge.n	45f6 <_malloc_usable_size_r+0xe>
    45f2:	580b      	ldr	r3, [r1, r0]
    45f4:	18c0      	adds	r0, r0, r3
    45f6:	4770      	bx	lr
    45f8:	682f2e2e 	.word	0x682f2e2e
    45fc:	732f6c61 	.word	0x732f6c61
    4600:	682f6372 	.word	0x682f6372
    4604:	615f6c61 	.word	0x615f6c61
    4608:	735f6364 	.word	0x735f6364
    460c:	2e636e79 	.word	0x2e636e79
    4610:	00000063 	.word	0x00000063
    4614:	682f2e2e 	.word	0x682f2e2e
    4618:	732f6c61 	.word	0x732f6c61
    461c:	682f6372 	.word	0x682f6372
    4620:	635f6c61 	.word	0x635f6c61
    4624:	735f6372 	.word	0x735f6372
    4628:	2e636e79 	.word	0x2e636e79
    462c:	00000063 	.word	0x00000063
    4630:	682f2e2e 	.word	0x682f2e2e
    4634:	732f6c61 	.word	0x732f6c61
    4638:	682f6372 	.word	0x682f6372
    463c:	695f6c61 	.word	0x695f6c61
    4640:	00632e6f 	.word	0x00632e6f
    4644:	682f2e2e 	.word	0x682f2e2e
    4648:	732f6c61 	.word	0x732f6c61
    464c:	682f6372 	.word	0x682f6372
    4650:	705f6c61 	.word	0x705f6c61
    4654:	632e6d77 	.word	0x632e6d77
    4658:	00000000 	.word	0x00000000
    465c:	682f2e2e 	.word	0x682f2e2e
    4660:	732f6c61 	.word	0x732f6c61
    4664:	682f6372 	.word	0x682f6372
    4668:	745f6c61 	.word	0x745f6c61
    466c:	72656d69 	.word	0x72656d69
    4670:	0000632e 	.word	0x0000632e
    4674:	682f2e2e 	.word	0x682f2e2e
    4678:	732f6c61 	.word	0x732f6c61
    467c:	682f6372 	.word	0x682f6372
    4680:	755f6c61 	.word	0x755f6c61
    4684:	74726173 	.word	0x74726173
    4688:	6e79735f 	.word	0x6e79735f
    468c:	00632e63 	.word	0x00632e63
    4690:	682f2e2e 	.word	0x682f2e2e
    4694:	752f6c61 	.word	0x752f6c61
    4698:	736c6974 	.word	0x736c6974
    469c:	6372732f 	.word	0x6372732f
    46a0:	6974752f 	.word	0x6974752f
    46a4:	6c5f736c 	.word	0x6c5f736c
    46a8:	2e747369 	.word	0x2e747369
    46ac:	00000063 	.word	0x00000063

000046b0 <_adcs>:
    46b0:	00000200 00000000 00000000 00000000     ................
	...
    46cc:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    46dc:	632e6364 00000000                       dc.c....

000046e4 <_map>:
    46e4:	000000ff ffffffff 682f2e2e 652f6c70     ........../hpl/e
    46f4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00004704 <user_mux_confs>:
    4704:	00010000 00030002 00050004 00070006     ................
    4714:	00090008 000b000a 000d000c 000f000e     ................
    4724:	00110010 00130012 00150014 00170016     ................
    4734:	00190018 001b001a 0000001c              ............

00004740 <channel_confs>:
    4740:	00000000 00000001 00000002 00000003     ................
    4750:	00000004 00000005 00000006 00000007     ................
    4760:	00000008 00000009 0000000a 0000000b     ................
    4770:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    4780:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    4790:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    47a0:	0000632e 682f2e2e 742f6c70 70682f63     .c..../hpl/tc/hp
    47b0:	63745f6c 0000632e 00002000              l_tc.c... ..

000047bc <_usb_ep_cfgs>:
    47bc:	20000340 00000000 00000040 20000300     @.. ....@...... 
    47cc:	00000000 00000040 200002c0 00000000     ....@...... ....
    47dc:	00000040 656c6553 6e697463 44412067     @...Selecting AD
    47ec:	68632043 25206e61 000d0a64 20434441     C chan %d...ADC 
    47fc:	75736572 2520746c 64252c64 00000d0a     result %d,%d....
    480c:	0000377c 00003464 0000377c 00003496     |7..d4..|7...4..
    481c:	0000377c 000033ba 0000377c 0000377c     |7...3..|7..|7..
    482c:	0000377c 000033ce 0000377c 000034ca     |7...3..|7...4..
    483c:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
    484c:	2e636462 00000063                       bdc.c...

00004854 <__sf_fake_stderr>:
	...

00004874 <__sf_fake_stdin>:
	...

00004894 <__sf_fake_stdout>:
	...
    48b4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    48c4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    48d4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    48e4:	00006665                                ef..

000048e8 <_init>:
    48e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ea:	46c0      	nop			; (mov r8, r8)
    48ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48ee:	bc08      	pop	{r3}
    48f0:	469e      	mov	lr, r3
    48f2:	4770      	bx	lr

000048f4 <__init_array_start>:
    48f4:	000000dd 	.word	0x000000dd

000048f8 <_fini>:
    48f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48fe:	bc08      	pop	{r3}
    4900:	469e      	mov	lr, r3
    4902:	4770      	bx	lr

00004904 <__fini_array_start>:
    4904:	000000b5 	.word	0x000000b5
